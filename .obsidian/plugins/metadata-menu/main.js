/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __defProps = Object.defineProperties;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __reflectGet = Reflect.get;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var __superGet = (cls, obj, key) => __reflectGet(__getProtoOf(cls), key, obj);
var __async = (__this, __arguments, generator) => {
  return new Promise((resolve, reject) => {
    var fulfilled = (value) => {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    };
    var rejected = (value) => {
      try {
        step(generator.throw(value));
      } catch (e) {
        reject(e);
      }
    };
    var step = (x) => x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);
    step((generator = generator.apply(__this, __arguments)).next());
  });
};

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => MetadataMenu
});
module.exports = __toCommonJS(main_exports);
var import_obsidian69 = require("obsidian");

// src/commands/paletteCommands.ts
var import_obsidian50 = require("obsidian");

// src/components/NoteFields.ts
var import_obsidian45 = require("obsidian");

// src/fileClass/FileClassAttributeModal.ts
var import_obsidian36 = require("obsidian");

// src/fields/fieldManagers/InputField.ts
var import_obsidian10 = require("obsidian");

// src/modals/fields/InputModal.ts
var import_obsidian4 = require("obsidian");

// src/commands/postValues.ts
var import_obsidian2 = require("obsidian");

// src/utils/fileUtils.ts
var import_obsidian = require("obsidian");
function resolve_tfolder(plugin, folder_str) {
  folder_str = (0, import_obsidian.normalizePath)(folder_str);
  const folder = plugin.app.vault.getAbstractFileByPath(folder_str);
  if (!folder) {
    throw new Error(`Folder "${folder_str}" doesn't exist`);
  }
  if (!(folder instanceof import_obsidian.TFolder)) {
    throw new Error(`${folder_str} is a file, not a folder`);
  }
  return folder;
}
function get_tfiles_from_folder(plugin, folder_str) {
  const folder = resolve_tfolder(plugin, folder_str);
  const files = [];
  import_obsidian.Vault.recurseChildren(folder, (file) => {
    if (file instanceof import_obsidian.TFile) {
      files.push(file);
    }
  });
  files.sort((a, b) => {
    return a.basename.localeCompare(b.basename);
  });
  return files;
}
function getFileFromFileOrPath(plugin, fileOrFilePath) {
  let file;
  if (fileOrFilePath instanceof import_obsidian.TFile) {
    file = fileOrFilePath;
  } else {
    const _file = plugin.app.vault.getAbstractFileByPath(fileOrFilePath);
    if (_file instanceof import_obsidian.TFile && _file.extension == "md") {
      file = _file;
    } else {
      throw Error("path doesn't correspond to a proper file");
    }
  }
  return file;
}

// src/utils/list.ts
function getListBounds(plugin, file, parent) {
  var _a;
  const listItems = ((_a = plugin.app.metadataCache.getFileCache(file)) == null ? void 0 : _a.listItems) || [];
  return getListBoundsFromListItemCacheList(listItems, parent);
}
function getListBoundsFromListItemCacheList(listItems, parent) {
  const subParentsLines = [-parent - 1];
  let start2 = parent;
  let end2 = -1;
  let outOfList = false;
  listItems.sort((a, b) => a.position.start.line - b.position.start.line).forEach((listItem) => {
    if (subParentsLines.includes(listItem.parent) && !outOfList) {
      subParentsLines.push(listItem.position.start.line);
      if (start2 > listItem.position.start.line)
        start2 = listItem.position.start.line;
      if (end2 <= listItem.position.end.line) {
        if (listItem.position.end.line == listItem.position.start.line) {
          end2 = listItem.position.end.line;
        } else {
          end2 = listItem.position.start.line;
          outOfList = true;
        }
      }
    }
  });
  if (end2 >= 0) {
    return { start: start2, end: end2 };
  }
  return;
}

// src/types/lookupTypes.ts
var BuiltinSummarizing = /* @__PURE__ */ ((BuiltinSummarizing2) => {
  BuiltinSummarizing2["Sum"] = "Sum";
  BuiltinSummarizing2["Count"] = "Count";
  BuiltinSummarizing2["CountAll"] = "CountAll";
  BuiltinSummarizing2["Average"] = "Average";
  BuiltinSummarizing2["Max"] = "Max";
  BuiltinSummarizing2["Min"] = "Min";
  return BuiltinSummarizing2;
})(BuiltinSummarizing || {});
var BuiltinSummarizingFunctionDescription = {
  "Sum": "Returns the sum of <{{summarizedFieldName}}> fields in the pages matching the query",
  "Count": "Counts all pages matching the query where <{{summarizedFieldName}}> is non empty",
  "CountAll": "Counts all pages matching the query (including empty fields)",
  "Average": "Returns the average value of <{{summarizedFieldName}}> fields in the pages matching the query",
  "Max": "Returns the maximum value of <{{summarizedFieldName}}> fields in the pages matching the query",
  "Min": "Returns the minimum value of <{{summarizedFieldName}}> fields in the pages matching the query"
};
var BuiltinSummarizingFunction = {
  "Sum": 'const i=0;const sum = pages.reduce((p, c) => p + c["{{summarizedFieldName}}"], i); return sum',
  "CountAll": "return pages.length",
  "Count": 'return pages.filter(p => !!p["{{summarizedFieldName}}"]).length',
  "Average": 'const i=0.0;const sum = pages.reduce((p, c) => p + c["{{summarizedFieldName}}"], i); return sum / pages.length',
  "Max": 'return pages.reduce((p,c) => p["{{summarizedFieldName}}"] >= c["{{summarizedFieldName}}"] ? p : c)["{{summarizedFieldName}}"]',
  "Min": 'return pages.reduce((p,c) => p["{{summarizedFieldName}}"]!==null && p["{{summarizedFieldName}}"] <= c["{{summarizedFieldName}}"] ? p : c)["{{summarizedFieldName}}"]'
};
var Type = /* @__PURE__ */ ((Type3) => {
  Type3["LinksList"] = "LinksList";
  Type3["LinksBulletList"] = "LinksBulletList";
  Type3["BuiltinSummarizing"] = "BuiltinSummarizing";
  Type3["CustomList"] = "CustomList";
  Type3["CustomBulletList"] = "CustomBulletList";
  Type3["CustomSummarizing"] = "CustomSummarizing";
  return Type3;
})(Type || {});
var ShortDescription = {
  "LinksList": "Inline list of links",
  "LinksBulletList": "Bullet list of links",
  "BuiltinSummarizing": "",
  "CustomList": "Inline list of customized links",
  "CustomBulletList": "Bullet list of customized links",
  "CustomSummarizing": "Custom summarizing function"
};
var Description = {
  "LinksList": "List of related links displayed inline",
  "LinksBulletList": "List of related links displayed below the field",
  "BuiltinSummarizing": "Built-in summarizing function",
  "CustomList": "Custom list rendering function displayed inline",
  "CustomBulletList": "Custom list rendering function displayed below the field",
  "CustomSummarizing": "Custom summarizing function"
};
var OptionLabel = {
  "LinksList": "",
  "LinksBulletList": "",
  "BuiltinSummarizing": "Built-in summarize function:",
  "CustomList": "Query's results' list's rendering function:",
  "CustomBulletList": "Query's results' list's rendering function:",
  "CustomSummarizing": "Query's results' list's summarizing function:"
};
var OptionSubLabel = {
  "LinksList": "",
  "LinksBulletList": "",
  "BuiltinSummarizing": "",
  "CustomList": `function(page) { return <function using "page">; }`,
  "CustomBulletList": `function(page) { return <function using "page">; }`,
  "CustomSummarizing": `function(page) { return <function using "page">; }`
};
var Helper = {
  "LinksList": "",
  "LinksBulletList": "",
  "BuiltinSummarizing": "",
  "CustomList": 'Javascript string, the "page" (dataview page type) variable is available\nexample 1: page.file.name\nexample 2: `${page.file.name} of gender ${page.gender}`',
  "CustomBulletList": 'Javascript string, the "page" (dataview page type) variable is available\nexample 1: page.file.name\nexample 2: `${page.file.name} of gender ${page.gender}`',
  "CustomSummarizing": 'Javascript string, the "pages" (dataview pages type) variable is available\nexample: \nconst initialValue = 0;\nconst sumWithInitial = pages.reduce(\n    (previousValue, currentValue) => previousValue + currentValue,\n    initialValue\n);\nreturn `${sumWithInitial}`\n'
};
var Default = {
  "LinksList": "",
  "LinksBulletList": "",
  "BuiltinSummarizing": "Count" /* Count */,
  "CustomList": "page.file.name",
  "CustomBulletList": "page.file.name",
  "CustomSummarizing": "return pages.length"
};
var bulletListLookupTypes = [
  "LinksBulletList" /* LinksBulletList */,
  "CustomBulletList" /* CustomBulletList */
];

// src/utils/parser.ts
var fieldComponents = ["inQuote", "inList", "startStyle", "attribute", "endStyle", "beforeSeparatorSpacer", "afterSeparatorSpacer", "values"];
var genericFieldRegex = "(?<inQuote>>(\\s+)?)?(?<inList>- )?(?<startStyle>[_\\*~`]*)(?<attribute>[0-9\\w\\p{Letter}\\p{Emoji_Presentation}][-0-9\\w\\p{Letter}\\p{Emoji_Presentation}\\s]*)(?<endStyle>[_\\*~`]*)(?<beforeSeparatorSpacer>\\s*)";
var inlineFieldRegex = (attribute) => `(?<inQuote>>(\\s+)?)?(?<inList>- )?(?<startStyle>[_\\*~\`]*)(?<attribute>${attribute})(?<endStyle>[_\\*~\`]*)(?<beforeSeparatorSpacer>\\s*)::(?<afterSeparatorSpacer>\\s*)`;
var fullLineRegex = new RegExp(`^${genericFieldRegex}::\\s*(?<values>.*)?`, "u");
var inSentenceRegexBrackets = new RegExp(`\\[${genericFieldRegex}::\\s*(?<values>[^\\]]+)?\\]`, "gu");
var inSentenceRegexPar = new RegExp(`\\(${genericFieldRegex}::\\s*(?<values>[^\\)]+)?\\)`, "gu");
var encodeLink = (value) => {
  return value ? value.replace(/\[\[/g, "\u{1F527}\u{1F400}").replace(/\]\]/g, "\u{1F413}\u{1F54C}") : value;
};
var decodeLink = (value) => {
  return value ? value.replace(/🔧🐀/gu, "[[").replace(/🐓🕌/gu, "]]") : value;
};
var frontMatterLineField = (line) => {
  const frontMatterRegex = new RegExp(new RegExp("(?<attribute>[0-9\\w\\p{Letter}\\p{Emoji_Presentation}][-0-9\\w\\p{Letter}\\p{Emoji_Presentation}\\s]*[^\\s])(?<beforeSeparatorSpacer>\\s*):(?<afterSeparatorSpacer>\\s*)(?<values>.*)", "u"));
  const fR = line.match(frontMatterRegex);
  if (fR == null ? void 0 : fR.groups) {
    const { attribute, values } = fR == null ? void 0 : fR.groups;
    return attribute;
  }
};
var getLineFields = (line) => {
  const fields = [];
  const fR = line.match(fullLineRegex);
  if (fR == null ? void 0 : fR.groups) {
    const { attribute, values } = fR == null ? void 0 : fR.groups;
    fields.push({ attribute, values, index: 0, length: line.length });
  } else {
    const sRBk = encodeLink(line).matchAll(inSentenceRegexBrackets);
    let next = sRBk.next();
    while (!next.done) {
      if (next.value.groups) {
        const { attribute, values } = next.value.groups;
        fields.push({ attribute, values: decodeLink(values), index: next.value.index || 0, length: next.value[0].length });
      }
      next = sRBk.next();
    }
    const sRBc = encodeLink(line).matchAll(inSentenceRegexPar);
    next = sRBc.next();
    while (!next.done) {
      if (next.value.groups) {
        const { attribute, values } = next.value.groups;
        fields.push({ attribute, values: decodeLink(values), index: next.value.index || 0, length: next.value[0].length });
      }
      next = sRBc.next();
    }
  }
  fields.sort((a, b) => {
    if (a.index < b.index)
      return -1;
    if (a.index > b.index)
      return 1;
    return 0;
  });
  return fields;
};

// src/utils/dataviewUtils.ts
function genuineKeys(dvFile) {
  const genuineKeys2 = [];
  Object.keys(dvFile).forEach((key) => {
    if (!genuineKeys2.map((k) => k.toLowerCase().replace(/\s/g, "-")).includes(key.toLowerCase().replace(/\s/g, "-"))) {
      genuineKeys2.push(key);
    } else {
      if (key !== key.toLowerCase().replace(/\s/g, "-")) {
        genuineKeys2[genuineKeys2.indexOf(key.toLowerCase().replace(/\s/g, "-"))] = key;
      }
    }
  });
  return genuineKeys2;
}
function compareDuration(dvDurA, dvDurB) {
  const normalizedA = dvDurA.shiftTo("years", "months", "weeks", "days", "hours", "minutes", "seconds", "milliseconds").normalize();
  const normalizedB = dvDurB.shiftTo("years", "months", "weeks", "days", "hours", "minutes", "seconds", "milliseconds").normalize();
  return normalizedA.equals(normalizedB);
}

// src/commands/postValues.ts
var LocationWrapper = {
  "fullLine": { start: "", end: "" },
  "brackets": { start: "[", end: "]" },
  "parenthesis": { start: "(", end: ")" }
};
function renderField(plugin, file, fieldName, rawValue, location) {
  var _a;
  const field = (_a = plugin.fieldIndex.filesFields.get(file.path)) == null ? void 0 : _a.find((f) => f.name === fieldName);
  const parseFieldValue = (_rawValue) => {
    if (_rawValue.startsWith("[[")) {
      return `${_rawValue}`;
    } else if (_rawValue.startsWith("#")) {
      return `${_rawValue}`;
    } else {
      return (0, import_obsidian2.parseYaml)(_rawValue);
    }
    ;
  };
  const renderMultiFields = (rawValue2, itemRendering) => {
    const values = rawValue2.replace(/(\,\s+)/g, ",").split(",").filter((v) => !!v).map((value) => itemRendering(value));
    return values.length ? values : null;
  };
  switch (location) {
    case "yaml":
      switch (field == null ? void 0 : field.type) {
        case "Lookup" /* Lookup */:
          return renderMultiFields(rawValue, (item) => parseFieldValue(item));
        case "Multi" /* Multi */:
          return renderMultiFields(rawValue, (item) => parseFieldValue(item));
        case "MultiFile" /* MultiFile */:
          return renderMultiFields(rawValue, (item) => `${item}`);
        case "Canvas" /* Canvas */:
          return renderMultiFields(rawValue, (item) => `${item}`);
        case void 0:
          if (["tags", "tagNames", "excludes", plugin.settings.fileClassAlias].includes(fieldName)) {
            return renderMultiFields(rawValue, (item) => `${item}`);
          } else {
            return parseFieldValue(rawValue);
          }
          ;
        default:
          return parseFieldValue(rawValue);
      }
    case "inline":
      return rawValue;
  }
}
var matchInlineFields = (regex, line, attribute, input, location = "fullLine") => {
  const sR = line.matchAll(regex);
  let next = sR.next();
  const newFields = [];
  while (!next.done) {
    const match = next.value;
    if (match.groups && Object.keys(match.groups).every((j) => fieldComponents.includes(j))) {
      const { inList, inQuote, startStyle, endStyle, beforeSeparatorSpacer, afterSeparatorSpacer, values } = match.groups;
      const inputArray = input ? input.replace(/(\,\s+)/g, ",").split(",") : [""];
      const newValue = inputArray.length == 1 ? inputArray[0] : `${inputArray.join(", ")}`;
      const start2 = LocationWrapper[location].start;
      const end2 = LocationWrapper[location].end;
      newFields.push({
        oldField: match[0],
        newField: `${inQuote || ""}${start2}${inList || ""}${startStyle}${attribute}${endStyle}${beforeSeparatorSpacer}::${afterSeparatorSpacer}${newValue}${end2}`
      });
    }
    next = sR.next();
  }
  return newFields;
};
function postFieldsInYaml(plugin, file, fields) {
  return __async(this, null, function* () {
    yield plugin.app.fileManager.processFrontMatter(file, (fm) => {
      Object.entries(fields).forEach(([fieldName, payload]) => {
        const newValue = renderField(plugin, file, fieldName, payload.value, "yaml");
        fm[fieldName] = newValue;
      });
    });
  });
}
function postFieldsInline(plugin, file, fieldsToUpdate, fieldsToCreate, lineNumber, after = true, asList = false, asComment = false) {
  return __async(this, null, function* () {
    var _a;
    const skippedLines = [];
    let newContent = [];
    const currentContent = yield plugin.app.vault.read(file);
    currentContent.split("\n").forEach((line, _lineNumber) => {
      if (_lineNumber == lineNumber) {
        if (after)
          newContent.push(line);
        Object.entries(fieldsToCreate).forEach(([fieldName, payload]) => {
          const newLine = `${asComment ? ">" : ""}${asList ? "- " : ""}${fieldName}:: ${payload.value}`;
          newContent.push(newLine);
        });
        if (!after)
          newContent.push(line);
      } else {
        newContent.push(line);
      }
    });
    const updateContentWithField = (content, fieldName, payload) => {
      return content.map((line, i) => {
        var _a2;
        const encodedInput = encodeLink(payload.value);
        let encodedLine = encodeLink(line);
        const fullLineRegex2 = new RegExp(`^${inlineFieldRegex(fieldName)}(?<values>[^\\]]*)`, "u");
        const fR = encodedLine.match(fullLineRegex2);
        if ((fR == null ? void 0 : fR.groups) && Object.keys(fR.groups).every((j) => fieldComponents.includes(j))) {
          const field = (_a2 = plugin.fieldIndex.filesFields.get(file.path)) == null ? void 0 : _a2.find((f) => f.name === fieldName);
          if ((field == null ? void 0 : field.type) === "Lookup" /* Lookup */) {
            const bounds = getListBounds(plugin, file, i);
            if (bounds) {
              const { start: start2, end: end2 } = bounds;
              for (let j = start2 + 1; j < start2 + (payload.previousItemsCount || 0) + 1 && j < end2 + 1; j++) {
                skippedLines.push(j);
              }
            }
          }
          const { inList, inQuote, startStyle, endStyle, beforeSeparatorSpacer, afterSeparatorSpacer, values } = fR.groups;
          const inputArray = payload.value ? payload.value.replace(/(\,\s+)/g, ",").split(",").sort() : [];
          let newValue;
          let hiddenValue = "";
          let emptyLineAfterList = "";
          if ((field == null ? void 0 : field.type) === "Lookup" /* Lookup */ && bulletListLookupTypes.includes(field == null ? void 0 : field.options.outputType)) {
            emptyLineAfterList = content[i + (payload.previousItemsCount || 0) + 1] !== "" ? "\n" : "";
            newValue = inputArray.length === 1 ? "\n- " + inputArray[0] : `${inputArray.length > 0 ? "\n" : ""}${inputArray.map((item) => "- " + item).join("\n")}`;
            hiddenValue = `<div hidden id="${field.name}_values">${payload.value}</div>`;
          } else {
            newValue = inputArray.length == 1 ? inputArray[0] : `${inputArray.join(", ")}`;
          }
          return `${inQuote || ""}${inList || ""}${startStyle}${fieldName}${endStyle}${beforeSeparatorSpacer}::${afterSeparatorSpacer}${hiddenValue + newValue + emptyLineAfterList}`;
        } else {
          const newFields = [];
          const inSentenceRegexBrackets2 = new RegExp(`\\[${inlineFieldRegex(fieldName)}(?<values>[^\\]]+)?\\]`, "gu");
          const inSentenceRegexPar2 = new RegExp(`\\(${inlineFieldRegex(fieldName)}(?<values>[^\\)]+)?\\)`, "gu");
          newFields.push(...matchInlineFields(inSentenceRegexBrackets2, encodedLine, fieldName, encodedInput, "brackets" /* brackets */));
          newFields.push(...matchInlineFields(inSentenceRegexPar2, encodedLine, fieldName, encodedInput, "parenthesis" /* parenthesis */));
          newFields.forEach((field) => {
            const fieldRegex = new RegExp(field.oldField.replace(/[.*+?^${}()|[\]\\]/g, "\\$&"), "u");
            encodedLine = encodedLine.replace(fieldRegex, field.newField);
          });
          return decodeLink(encodedLine);
        }
      });
    };
    Object.entries(fieldsToUpdate).forEach(([fieldName, payload]) => {
      newContent = updateContentWithField(newContent, fieldName, payload);
    });
    const updatedFile = newContent.filter((line, i) => !skippedLines.includes(i)).join("\n");
    yield plugin.app.vault.modify(file, updatedFile);
    const editor = (_a = plugin.app.workspace.getActiveViewOfType(import_obsidian2.MarkdownView)) == null ? void 0 : _a.editor;
    if (editor) {
      const lineNumber2 = editor.getCursor().line;
      editor.setCursor({ line: editor.getCursor().line, ch: editor.getLine(lineNumber2).length });
    }
  });
}
function postValues(plugin, payload, fileOrFilePath, lineNumber, after = true, asList = false, asComment = false) {
  return __async(this, null, function* () {
    var _a, _b;
    const file = getFileFromFileOrPath(plugin, fileOrFilePath);
    const frontmatter = (_a = plugin.app.metadataCache.getFileCache(file)) == null ? void 0 : _a.frontmatter;
    const { position: { start: start2, end: end2 } } = frontmatter ? frontmatter : { position: { start: void 0, end: void 0 } };
    const dvAPi = (_b = plugin.app.plugins.plugins.dataview) == null ? void 0 : _b.api;
    const inFrontmatter = !!(lineNumber === -1 || lineNumber && start2 && end2 && lineNumber >= start2.line && lineNumber <= end2.line);
    const toCreateInline = {};
    const toUpdateInline = {};
    const toYaml = {};
    payload.forEach((item) => __async(this, null, function* () {
      var _a2, _b2, _c;
      const create = !genuineKeys(dvAPi.page(file.path)).includes(item.name);
      if (create) {
        if (!lineNumber || inFrontmatter) {
          toYaml[item.name] = item.payload;
        } else {
          toCreateInline[item.name] = item.payload;
        }
      } else {
        const dvApi = (_a2 = plugin.app.plugins.plugins.dataview) == null ? void 0 : _a2.api;
        const currentValue = dvApi && ((_b2 = dvApi.page(file.path)) == null ? void 0 : _b2[item.name]);
        const field = (_c = plugin.fieldIndex.filesFields.get(file.path)) == null ? void 0 : _c.find((f) => f.name === item.name);
        const multi = field && multiTypes.includes(field.type);
        const newValue = currentValue && item.payload.addToCurrentValues && (multi || ["tagNames", "tags", "excludes"].includes(item.name)) ? `${currentValue}, ${item.payload.value}` : item.payload.value;
        item.payload.value = newValue;
        if (frontmatter && Object.keys(frontmatter).includes(item.name)) {
          toYaml[item.name] = item.payload;
        } else {
          toUpdateInline[item.name] = item.payload;
        }
      }
    }));
    if (Object.keys(toYaml).length)
      yield plugin.fileTaskManager.pushTask(() => {
        postFieldsInYaml(plugin, file, toYaml);
      });
    if (Object.keys(toCreateInline).length || Object.keys(toUpdateInline).length)
      yield plugin.fileTaskManager.pushTask(() => {
        postFieldsInline(plugin, file, toUpdateInline, toCreateInline, lineNumber, after, asList, asComment);
      });
  });
}

// src/modals/baseModal.ts
var import_obsidian3 = require("obsidian");
var BaseModal = class extends import_obsidian3.Modal {
  constructor(plugin) {
    super(plugin.app);
    this.plugin = plugin;
  }
  onOpen() {
    this.containerEl.onkeydown = (e) => __async(this, null, function* () {
      if (e.key == "Enter") {
        e.preventDefault();
        yield this.save();
        this.close();
      }
    });
  }
  save(e) {
    return __async(this, null, function* () {
      throw Error("Subclass should implement a save method");
    });
  }
  buildSaveBtn(fieldContainer) {
    fieldContainer.createDiv({ cls: "spacer" });
    const saveBtn = new import_obsidian3.ButtonComponent(fieldContainer);
    saveBtn.setIcon("checkmark");
    saveBtn.onClick((e) => __async(this, null, function* () {
      yield this.save(e);
    }));
  }
};

// src/modals/fields/InputModal.ts
var InputModal = class extends BaseModal {
  constructor(plugin, file, field, value, lineNumber = -1, after = false, asList = false, asComment = false) {
    super(plugin);
    this.plugin = plugin;
    this.file = file;
    this.field = field;
    this.value = value;
    this.lineNumber = lineNumber;
    this.after = after;
    this.asList = asList;
    this.asComment = asComment;
    this.templateValues = {};
  }
  onOpen() {
    super.onOpen();
    if (this.field.options.template) {
      const templateFieldRegex = new RegExp(`\\{\\{(?<field>[^\\}]+?)\\}\\}`, "gu");
      const tF = this.field.options.template.matchAll(templateFieldRegex);
      let next = tF.next();
      while (!next.done) {
        if (next.value.groups) {
          const value = next.value.groups.field;
          const [name, optionsString] = value.split(new RegExp(":(.*)", "s")).map((v) => v.trim());
          this.templateValues[name] = "";
          if (optionsString) {
            const options2 = JSON.parse(optionsString);
            this.buildTemplateSelectItem(this.contentEl.createDiv({ cls: "field-container" }), name, options2);
          } else {
            this.buildTemplateInputItem(this.contentEl.createDiv({ cls: "field-container" }), name);
          }
        }
        next = tF.next();
      }
      this.contentEl.createDiv({ text: "Result preview" });
      this.buildResultPreview(this.contentEl.createDiv({ cls: "field-container" }));
      this.buildSaveBtn(this.contentEl.createDiv({ cls: "footer-actions" }));
    } else {
      this.buildInputEl(this.contentEl.createDiv({ cls: "field-container" }));
    }
    this.containerEl.addClass("metadata-menu");
  }
  renderValue() {
    let renderedString = this.field.options.template.slice();
    Object.keys(this.templateValues).forEach((k) => {
      const fieldRegex = new RegExp(`\\{\\{${k.replace(/[.*+?^${}()|[\]\\]/g, "\\$&")}(:[^\\}]*)?\\}\\}`, "u");
      renderedString = renderedString.replace(fieldRegex, this.templateValues[k]);
    });
    this.renderedValue.setValue(renderedString);
  }
  buildTemplateInputItem(fieldContainer, name) {
    fieldContainer.createDiv({ cls: "label", text: name });
    const input = new import_obsidian4.TextComponent(fieldContainer);
    input.inputEl.addClass("with-label");
    input.inputEl.addClass("full-width");
    input.setPlaceholder(`Enter a value for ${name}`);
    input.onChange((value) => {
      this.templateValues[name] = value;
      this.renderValue();
    });
  }
  buildTemplateSelectItem(fieldContainer, name, options2) {
    fieldContainer.createDiv({ text: name, cls: "label" });
    fieldContainer.createDiv({ cls: "spacer" });
    const selectEl = new import_obsidian4.DropdownComponent(fieldContainer);
    selectEl.addOption("", "--select--");
    options2.forEach((o) => selectEl.addOption(o, o));
    selectEl.onChange((value) => {
      this.templateValues[name] = value;
      this.renderValue();
    });
  }
  buildResultPreview(fieldContainer) {
    this.renderedValue = new import_obsidian4.TextAreaComponent(fieldContainer);
    this.renderedValue.inputEl.addClass("full-width");
    this.renderedValue.inputEl.rows = 3;
    this.renderedValue.setValue(this.value);
  }
  buildInputEl(container) {
    const inputEl = new import_obsidian4.TextComponent(container);
    inputEl.inputEl.focus();
    inputEl.inputEl.addClass("full-width");
    inputEl.setValue(`${this.value || ""}`);
    this.inputEl = inputEl;
    const saveBtn = new import_obsidian4.ButtonComponent(container);
    saveBtn.setIcon("checkmark");
    saveBtn.onClick(() => __async(this, null, function* () {
      this.save();
    }));
  }
  save() {
    return __async(this, null, function* () {
      let inputValue = this.inputEl.getValue();
      yield postValues(this.plugin, [{ name: this.field.name, payload: { value: inputValue } }], this.file, this.lineNumber, this.after, this.asList, this.asComment);
      this.close();
    });
  }
};

// src/fields/FieldManager.ts
var import_obsidian9 = require("obsidian");

// src/modals/insertFieldSuggestModal.ts
var import_obsidian6 = require("obsidian");

// src/modals/addNewFieldModal.ts
var import_obsidian5 = require("obsidian");
var addNewFieldModal = class extends import_obsidian5.Modal {
  constructor(plugin, lineNumber, file, after) {
    super(plugin.app);
    this.plugin = plugin;
    this.lineNumber = lineNumber;
    this.file = file;
    this.after = after;
    this.containerEl.addClass("metadata-menu");
  }
  onOpen() {
    this.titleEl.setText("Insert new field");
    const nameContainer = this.contentEl.createDiv({ cls: "field-container" });
    nameContainer.createDiv({ text: "Field name: ", cls: "label" });
    const nameInput = new import_obsidian5.TextComponent(nameContainer);
    nameInput.inputEl.addClass("with-label");
    nameInput.inputEl.addClass("full-width");
    const valueContainer = this.contentEl.createDiv({ cls: "field-container" });
    valueContainer.createDiv({ text: "Field value: ", cls: "label" });
    const valueInput = new import_obsidian5.TextComponent(valueContainer);
    valueInput.inputEl.addClass("with-label");
    valueInput.inputEl.addClass("full-width");
    const footerButtons = this.contentEl.createDiv({
      cls: "footer-actions"
    });
    footerButtons.createDiv({ cls: "spacer" });
    const saveButton = new import_obsidian5.ButtonComponent(footerButtons);
    saveButton.setIcon("checkmark");
    saveButton.onClick(() => __async(this, null, function* () {
      yield postValues(this.plugin, [{ name: nameInput.getValue(), payload: { value: valueInput.getValue() } }], this.file, this.lineNumber, this.after);
      this.close();
    }));
    const cancelButton = new import_obsidian5.ButtonComponent(footerButtons);
    cancelButton.setIcon("cross");
    cancelButton.onClick(() => {
      this.close();
    });
  }
};

// src/modals/insertFieldSuggestModal.ts
var InsertFieldSuggestModal = class extends import_obsidian6.FuzzySuggestModal {
  constructor(plugin, file, lineNumber, after) {
    super(plugin.app);
    this.plugin = plugin;
    this.file = file;
    this.lineNumber = lineNumber;
    this.after = after;
    this.containerEl.addClass("metadata-menu");
  }
  getItems() {
    var _a;
    return [{ actionLabel: "++New++" }].concat(((_a = this.plugin.fieldIndex.filesFields.get(this.file.path)) == null ? void 0 : _a.map((field) => {
      return { actionLabel: field.name, type: field.type };
    })) || []);
  }
  getItemText(item) {
    return item.actionLabel;
  }
  renderSuggestion(item, el) {
    el.addClass("value-container");
    const iconContainer = el.createDiv({ cls: "icon-container" });
    item.item.type ? (0, import_obsidian6.setIcon)(iconContainer, FieldIcon[item.item.type]) : (0, import_obsidian6.setIcon)(iconContainer, "plus-with-circle");
    el.createDiv({ text: item.item.actionLabel });
    el.createDiv({ cls: "spacer" });
    if (item.item.type)
      el.createDiv({ cls: `chip ${FieldTypeTagClass[item.item.type]}`, text: item.item.type });
  }
  onChooseItem(item, evt) {
    var _a;
    if (item.actionLabel === "++New++") {
      const newFieldModal = new addNewFieldModal(this.plugin, this.lineNumber, this.file, this.after);
      newFieldModal.open();
      this.close();
    } else {
      const field = (_a = this.plugin.fieldIndex.filesFields.get(this.file.path)) == null ? void 0 : _a.find((field2) => field2.name === item.actionLabel);
      if (field) {
        const fieldManager = new FieldManager[field.type](this.plugin, field);
        fieldManager.createAndOpenFieldModal(this.file, item.actionLabel, "", this.lineNumber, this.after, false, false);
      }
    }
  }
};

// src/settings/FieldSettingsModal.ts
var import_obsidian8 = require("obsidian");

// src/fields/Field.ts
var Field = class {
  constructor(name = "", options2 = {}, id = "", type = "Input" /* Input */, fileClassName, command) {
    this.name = name;
    this.options = options2;
    this.id = id;
    this.type = type;
    this.fileClassName = fileClassName;
    this.command = command;
  }
  static copyProperty(target, source) {
    target.id = source.id;
    target.name = source.name;
    target.type = source.type;
    Object.keys(source.options).forEach((k) => {
      target.options[k] = source.options[k];
    });
    Object.keys(target.options).forEach((k) => {
      if (!Object.keys(source.options).includes(k)) {
        delete target.options[k];
      }
      ;
    });
    target.command = source.command;
  }
  static createDefault(name) {
    const field = new Field();
    field.type = "Input" /* Input */;
    field.name = name;
    return field;
  }
};
var Field_default = Field;

// src/settings/FieldSetting.ts
var import_obsidian7 = require("obsidian");
var FieldSetting = class extends import_obsidian7.Setting {
  constructor(containerEl, field, plugin) {
    super(containerEl);
    this.containerEl = containerEl;
    this.field = field;
    this.plugin = plugin;
    this.setTextContentWithname();
    this.addEditButton();
    this.addDeleteButton();
    this.settingEl.addClass("no-border");
  }
  setTextContentWithname() {
    const manager = new FieldManager[this.field.type](this.plugin, this.field);
    this.infoEl.textContent = "";
    this.infoEl.addClass("setting-item");
    this.fieldNameContainer = this.infoEl.createEl("div", "name");
    this.fieldNameContainer.setText(this.field.name);
    this.typeContainer = this.infoEl.createEl("div");
    this.typeContainer.setAttr("class", `chip ${FieldTypeTagClass[this.field.type]}`);
    this.typeContainer.setText(this.field.type);
    this.fieldOptionsContainer = this.infoEl.createEl("div");
    this.fieldOptionsContainer.setText(`${manager.getOptionsStr()}`);
  }
  addEditButton() {
    this.addButton((b) => {
      b.setIcon("pencil").setTooltip("Edit").onClick(() => {
        let modal = new FieldSettingsModal(this.plugin, this.containerEl, this, this.field);
        modal.open();
      });
    });
  }
  addDeleteButton() {
    this.addButton((b) => {
      b.setIcon("trash").setTooltip("Delete").onClick(() => {
        var _a;
        const currentExistingProperty = this.plugin.initialProperties.filter((p) => p.id == this.field.id)[0];
        if (currentExistingProperty) {
          this.plugin.initialProperties.remove(currentExistingProperty);
        }
        ;
        (_a = this.settingEl.parentElement) == null ? void 0 : _a.removeChild(this.settingEl);
        this.plugin.saveSettings();
      });
    });
  }
  static getValuesListFromNote(plugin, notePath) {
    return __async(this, null, function* () {
      let values = [];
      const file = plugin.app.vault.getAbstractFileByPath(notePath);
      if (file instanceof import_obsidian7.TFile && file.extension == "md") {
        const result = yield plugin.app.vault.read(file);
        result.split("\n").forEach((line) => {
          if (/^(.*)$/.test(line)) {
            values.push(line.trim());
          }
          ;
        });
        return values;
      } else {
        return [];
      }
      ;
    });
  }
};

// src/settings/FieldSettingsModal.ts
var FieldSettingsModal = class extends import_obsidian8.Modal {
  constructor(plugin, parentSettingContainer, parentSetting, field) {
    super(plugin.app);
    this.plugin = plugin;
    this.parentSettingContainer = parentSettingContainer;
    this.parentSetting = parentSetting;
    this.saved = false;
    this.new = true;
    this.initialField = new Field_default();
    if (field) {
      this.new = false;
      this.field = field;
      Field_default.copyProperty(this.initialField, this.field);
    } else {
      let newId = 1;
      this.plugin.initialProperties.forEach((prop) => {
        if (parseInt(prop.id) && parseInt(prop.id) >= newId) {
          newId = parseInt(prop.id) + 1;
        }
        ;
      });
      this.field = new Field_default();
      this.field.id = newId.toString();
      this.initialField.id = newId.toString();
    }
    ;
    this.fieldManager = new FieldManager[this.field.type](this.plugin, this.field);
    this.addCommand = this.field.command !== void 0;
    this.command = this.field.command || {
      id: this.field ? `insert__${this.field.fileClassName || "presetField"}__${this.field.name}` : "",
      icon: "list-plus",
      label: this.field ? `Insert ${this.field.name} field` : "",
      hotkey: void 0
    };
  }
  onOpen() {
    return __async(this, null, function* () {
      this.containerEl.addClass("metadata-menu");
      if (this.field.name == "") {
        this.titleEl.setText(`Add a field and define options`);
      } else {
        this.titleEl.setText(`Manage settings options for ${this.field.name}`);
      }
      ;
      this.createnameInputContainer();
      this.contentEl.createEl("hr");
      this.createCommandContainer();
      const typeSelectContainer = this.contentEl.createDiv({ cls: "field-container" });
      this.contentEl.createEl("hr");
      this.fieldOptionsContainer = this.contentEl.createDiv();
      const footer = this.contentEl.createDiv({ cls: "footer-actions" });
      footer.createDiv({ cls: "spacer" });
      this.createSaveButton(footer);
      this.createCancelButton(footer);
      this.createTypeSelectorContainer(typeSelectContainer);
      this.fieldManager.createSettingContainer(this.fieldOptionsContainer, this.plugin, 0 /* PluginSettings */);
    });
  }
  onClose() {
    Object.assign(this.field, this.initialField);
    if (!this.new && this.parentSetting) {
      this.parentSetting.setTextContentWithname();
    } else if (this.saved) {
      new FieldSetting(this.parentSettingContainer, this.field, this.plugin);
    }
    ;
  }
  createnameInputContainer() {
    const container = this.contentEl.createDiv({ cls: "field-container" });
    container.createDiv({ cls: "label", text: "Field Name: " });
    const input = new import_obsidian8.TextComponent(container);
    input.inputEl.addClass("with-label");
    input.inputEl.addClass("full-width");
    const name = this.field.name;
    input.setValue(name);
    input.setPlaceholder("Name of the field");
    input.onChange((value) => {
      this.field.name = value;
      this.command.id = `insert__${this.field.fileClassName || "presetField"}__${value}`;
      this.command.label = `Insert ${value} field`;
      this.titleEl.setText(`Manage predefined options for ${this.field.name}`);
      FieldSettingsModal.removeValidationError(input);
    });
    this.namePromptComponent = input;
  }
  createTypeSelectorContainer(parentNode) {
    const typeSelectorContainerLabel = parentNode.createDiv({ cls: "label" });
    typeSelectorContainerLabel.setText(`Field type:`);
    parentNode.createDiv({ cls: "spacer" });
    const select = new import_obsidian8.DropdownComponent(parentNode);
    Object.keys(FieldTypeLabelMapping).forEach((f) => select.addOption(f, FieldTypeTooltip[f]));
    if (this.field.type) {
      select.setValue(this.field.type);
    }
    select.onChange((typeLabel) => {
      this.field = new Field_default();
      Field_default.copyProperty(this.field, this.initialField);
      this.field.name = this.namePromptComponent.getValue();
      this.field.type = FieldTypeLabelMapping[typeLabel];
      if (this.field.type !== this.initialField.type && ![this.field.type, this.initialField.type].every((fieldType) => ["Multi" /* Multi */, "Select" /* Select */, "Cycle" /* Cycle */].includes(fieldType))) {
        this.field.options = {};
      }
      while (this.fieldOptionsContainer.firstChild) {
        this.fieldOptionsContainer.removeChild(this.fieldOptionsContainer.firstChild);
      }
      this.fieldManager = new FieldManager[this.field.type](this.plugin, this.field);
      this.fieldManager.createSettingContainer(this.fieldOptionsContainer, this.plugin, 0 /* PluginSettings */);
    });
  }
  createCommandContainer() {
    const commandContainer = this.contentEl.createDiv({ cls: "field-container" });
    commandContainer.createDiv({ text: "set a command for this field?", cls: "label" });
    commandContainer.createDiv({ cls: "spacer" });
    const addCommandToggler = new import_obsidian8.ToggleComponent(commandContainer);
    addCommandToggler.setValue(this.addCommand);
    const iconContainer = this.contentEl.createDiv({ cls: "field-container" });
    this.addCommand ? iconContainer.show() : iconContainer.hide();
    iconContainer.createDiv({ text: "Icon name", cls: "label" });
    this.iconName = new import_obsidian8.TextComponent(iconContainer);
    this.iconName.inputEl.addClass("full-width");
    this.iconName.inputEl.addClass("with-label");
    const iconPreview = iconContainer.createDiv({ cls: "icon-preview" });
    this.iconName.setValue(this.command.icon);
    (0, import_obsidian8.setIcon)(iconPreview, this.command.icon);
    this.iconName.onChange((value) => {
      this.command.icon = value;
      (0, import_obsidian8.setIcon)(iconPreview, value);
    });
    addCommandToggler.onChange((value) => {
      this.addCommand = value;
      this.addCommand ? iconContainer.show() : iconContainer.hide();
    });
  }
  validateFields() {
    return this.fieldManager.validateName(this.namePromptComponent, this.contentEl) && this.fieldManager.validateOptions();
  }
  createSaveButton(container) {
    const b = new import_obsidian8.ButtonComponent(container);
    b.setTooltip("Save");
    b.setIcon("checkmark");
    b.onClick(() => __async(this, null, function* () {
      var _a;
      let error = !this.validateFields();
      if (error) {
        new import_obsidian8.Notice("Fix errors before saving.");
        return;
      }
      ;
      if (this.addCommand) {
        this.field.command = this.command;
      } else {
        delete this.field.command;
      }
      this.saved = true;
      const currentExistingField = this.plugin.initialProperties.filter((p) => p.id == this.field.id)[0];
      if (currentExistingField) {
        Field_default.copyProperty(currentExistingField, this.field);
      } else {
        this.plugin.initialProperties.push(this.field);
      }
      ;
      Field_default.copyProperty(this.initialField, this.field);
      if (this.parentSetting)
        Field_default.copyProperty(this.parentSetting.field, this.field);
      (_a = this.parentSetting) == null ? void 0 : _a.setTextContentWithname();
      this.plugin.saveSettings();
      this.close();
    }));
  }
  createCancelButton(container) {
    const b = new import_obsidian8.ButtonComponent(container);
    b.setIcon("cross").setTooltip("Cancel").onClick(() => {
      this.saved = false;
      if (this.initialField.name != "") {
        Object.assign(this.field, this.initialField);
      }
      ;
      this.close();
    });
  }
  static setValidationError(textInput, message) {
    textInput.inputEl.addClass("is-invalid");
    const fieldContainer = textInput.inputEl.parentElement;
    const fieldsContainer = fieldContainer == null ? void 0 : fieldContainer.parentElement;
    if (message && fieldsContainer) {
      let mDiv = fieldsContainer.querySelector(".field-error");
      if (!mDiv)
        mDiv = createDiv({ cls: "field-error" });
      mDiv.innerText = message;
      fieldsContainer.insertBefore(mDiv, fieldContainer);
    }
  }
  static removeValidationError(textInput) {
    if (textInput.inputEl.hasClass("is-invalid"))
      textInput.inputEl.removeClass("is-invalid");
    const fieldContainer = textInput.inputEl.parentElement;
    const fieldsContainer = fieldContainer == null ? void 0 : fieldContainer.parentElement;
    const fieldError = fieldsContainer == null ? void 0 : fieldsContainer.querySelector(".field-error");
    if (fieldError)
      fieldsContainer.removeChild(fieldError);
  }
};

// src/fields/FieldManager.ts
var FieldManager2 = class {
  constructor(plugin, field, type) {
    this.plugin = plugin;
    this.field = field;
    this.type = type;
    this.showModalOption = true;
    if (field.type !== type)
      throw Error(`This field is not of type ${type}`);
  }
  static buildMarkDownLink(plugin, file, path, alias) {
    const destFile = plugin.app.metadataCache.getFirstLinkpathDest(path, file.path);
    if (destFile) {
      return plugin.app.fileManager.generateMarkdownLink(destFile, file.path, void 0, alias);
    }
    return "";
  }
  validateName(textInput, contentEl) {
    let error = false;
    if (/^[#>-]/.test(this.field.name)) {
      FieldSettingsModal.setValidationError(textInput, "Field name cannot start with #, >, -");
      error = true;
    }
    ;
    if (this.field.name == "") {
      FieldSettingsModal.setValidationError(textInput, "Field name can not be Empty");
      error = true;
    }
    ;
    return !error;
  }
  validateValue(value) {
    return true;
  }
  static replaceValues(plugin, path, fieldName, value) {
    return __async(this, null, function* () {
      const file = plugin.app.vault.getAbstractFileByPath(path);
      if (file instanceof import_obsidian9.TFile && file.extension == "md") {
        yield postValues(plugin, [{ name: fieldName, payload: { value } }], file);
      }
    });
  }
  static isMenu(location) {
    return location.addItem !== void 0;
  }
  static isSuggest(location) {
    return location.getItems !== void 0;
  }
  static isInsertFieldCommand(location) {
    return location === "InsertFieldCommand";
  }
  static isFieldOptions(location) {
    return location.addOption !== void 0;
  }
  static createAndOpenModal(plugin, file, fieldName, field, value, lineNumber, after, asList, asComment) {
    if (field) {
      const fieldManager = new FieldManager[field.type](plugin, field);
      fieldManager.createAndOpenFieldModal(file, fieldName, value, lineNumber, after, asList, asComment);
    } else {
      const fieldManager = FieldManager2.createDefault(plugin, fieldName);
      fieldManager.createAndOpenFieldModal(file, fieldName, value, lineNumber, after, asList, asComment);
    }
  }
  static openFieldModal(plugin, file, fieldName, value, lineNumber, after, asList, asComment) {
    var _a;
    if (!fieldName) {
      const modal = new InsertFieldSuggestModal(plugin, file, lineNumber, after);
      modal.open();
    } else {
      const field = (_a = plugin.fieldIndex.filesFields.get(file.path)) == null ? void 0 : _a.find((field2) => field2.name === fieldName);
      if (field)
        this.createAndOpenModal(plugin, file, fieldName, field, value, lineNumber, after, asList, asComment);
    }
  }
  static createDefault(plugin, name) {
    const field = Field_default.createDefault(name);
    return new FieldManager[field.type](plugin, field);
  }
  static stringToBoolean(value) {
    let toBooleanValue = false;
    if (isBoolean(value)) {
      toBooleanValue = value;
    } else if (/true/i.test(value) || /1/.test(value)) {
      toBooleanValue = true;
    } else if (/false/i.test(value) || /0/.test(value)) {
      toBooleanValue = false;
    }
    ;
    return toBooleanValue;
  }
  displayValue(container, file, fieldName, onClicked = () => {
  }) {
    var _a;
    const dvApi = (_a = this.plugin.app.plugins.plugins.dataview) == null ? void 0 : _a.api;
    let valueText;
    if (dvApi) {
      switch (dvApi.page(file.path)[fieldName]) {
        case void 0:
          valueText = "";
          break;
        case null:
          valueText = "";
          break;
        case false:
          valueText = "false";
          break;
        case 0:
          valueText = "0";
          break;
        default:
          valueText = dvApi.page(file.path)[fieldName];
      }
    } else {
      valueText = "";
    }
    container.createDiv({ text: valueText });
  }
};

// src/fields/fieldManagers/InputField.ts
var InputField = class extends FieldManager2 {
  constructor(plugin, field) {
    super(plugin, field, "Input" /* Input */);
  }
  getOptionsStr() {
    return this.field.options.template || "";
  }
  addFieldOption(name, value, file, location) {
    const modal = new InputModal(this.plugin, file, this.field, value);
    modal.titleEl.setText(`Change Value for <${name}>`);
    const iconName = FieldIcon["Input" /* Input */];
    const action = () => modal.open();
    if (InputField.isMenu(location)) {
      location.addItem((item) => {
        item.setTitle(`Update <${name}>`);
        item.setIcon(iconName);
        item.onClick(action);
        item.setSection("metadata-menu.fields");
      });
    } else if (InputField.isSuggest(location)) {
      location.options.push({
        id: `update_${name}`,
        actionLabel: `<span>Update <b>${name}</b></span>`,
        action,
        icon: iconName
      });
    } else if (InputField.isFieldOptions(location)) {
      location.addOption(FieldIcon["Input" /* Input */], action, `Update ${name}'s value`);
    }
  }
  createSettingContainer(container, plugin) {
    container.createEl("span", { text: "Template", cls: "label" });
    const templateContainer = container.createDiv({ cls: "field-container" });
    const templateValue = new import_obsidian10.TextAreaComponent(templateContainer);
    templateValue.inputEl.cols = 50;
    templateValue.inputEl.rows = 4;
    templateValue.inputEl.addClass("full-width");
    templateValue.setValue(this.field.options.template || "");
    templateValue.onChange((value) => {
      this.field.options.template = value;
    });
  }
  validateOptions() {
    return true;
  }
  createAndOpenFieldModal(file, selectedFieldName, value, lineNumber, after, asList, asComment) {
    const fieldModal = new InputModal(this.plugin, file, this.field, value || "", lineNumber, after, asList, asComment);
    fieldModal.titleEl.setText(`Enter value for ${selectedFieldName}`);
    fieldModal.open();
  }
  createDvField(dv, p, fieldContainer, attrs = {}) {
    var _a, _b;
    attrs.cls = "value-container";
    const fieldValue = dv.el("span", p[this.field.name], attrs);
    fieldContainer.appendChild(fieldValue);
    const inputContainer = fieldContainer.createDiv({});
    inputContainer.hide();
    const input = inputContainer.createEl("input");
    input.value = p[this.field.name];
    const spacer = fieldContainer.createDiv({ cls: "spacer-1" });
    if ((_a = attrs.options) == null ? void 0 : _a.alwaysOn)
      spacer.hide();
    const editBtn = fieldContainer.createEl("button");
    (0, import_obsidian10.setIcon)(editBtn, FieldIcon["Input" /* Input */]);
    if (!((_b = attrs == null ? void 0 : attrs.options) == null ? void 0 : _b.alwaysOn)) {
      editBtn.hide();
      spacer.show();
      fieldContainer.onmouseover = () => {
        if (!inputContainer.isShown()) {
          editBtn.show();
          spacer.hide();
        }
      };
      fieldContainer.onmouseout = () => {
        var _a2;
        editBtn.hide();
        if (!((_a2 = attrs.options) == null ? void 0 : _a2.alwaysOn))
          spacer.show();
      };
    }
    const validateIcon = inputContainer.createEl("button");
    (0, import_obsidian10.setIcon)(validateIcon, "checkmark");
    validateIcon.onclick = (e) => {
      InputField.replaceValues(this.plugin, p.file.path, this.field.name, input.value);
      inputContainer.hide();
    };
    const cancelIcon = inputContainer.createEl("button");
    (0, import_obsidian10.setIcon)(cancelIcon, "cross");
    cancelIcon.onclick = (e) => {
      var _a2;
      inputContainer.hide();
      fieldValue.show();
      editBtn.show();
      if (!((_a2 = attrs.options) == null ? void 0 : _a2.alwaysOn))
        spacer.show();
    };
    input.focus();
    input.onkeydown = (e) => {
      var _a2;
      if (e.key === "Enter") {
        InputField.replaceValues(this.plugin, p.file.path, this.field.name, input.value);
        inputContainer.hide();
      }
      if (e.key === "Escape") {
        inputContainer.hide();
        fieldValue.show();
        editBtn.show();
        if (!((_a2 = attrs.options) == null ? void 0 : _a2.alwaysOn))
          spacer.show();
      }
    };
    editBtn.onclick = () => {
      if (this.field.options.template) {
        const file = this.plugin.app.vault.getAbstractFileByPath(p.file.path);
        if (file instanceof import_obsidian10.TFile && file.extension === "md") {
          const inputModal = new InputModal(this.plugin, file, this.field, p[this.field.name]);
          inputModal.open();
        }
      } else {
        inputContainer.show();
        input.focus();
      }
      fieldValue.hide();
      editBtn.hide();
      spacer.hide();
    };
  }
};

// src/modals/fields/BooleanModal.ts
var import_obsidian11 = require("obsidian");
var BooleanModal = class extends import_obsidian11.Modal {
  constructor(plugin, file, field, value, lineNumber = -1, after = false, asList = false, asComment = false) {
    super(plugin.app);
    this.plugin = plugin;
    this.file = file;
    this.field = field;
    this.value = value;
    this.lineNumber = lineNumber;
    this.after = after;
    this.asList = asList;
    this.asComment = asComment;
    this.plugin = plugin;
    this.file = file;
    this.value = value;
    this.lineNumber = lineNumber;
    this.after = after;
    this.asList = asList;
    this.asComment = asComment;
    this.field = field;
  }
  onOpen() {
    this.containerEl.addClass("metadata-menu");
    this.containerEl.addClass("narrow");
    this.buildToggleEl();
  }
  buildToggleEl() {
    const choicesContainer = this.contentEl.createDiv({ cls: "value-container" });
    choicesContainer.createDiv({ cls: "spacer" });
    const trueButton = new import_obsidian11.ButtonComponent(choicesContainer);
    trueButton.setButtonText("True");
    trueButton.setClass("left");
    choicesContainer.createDiv({ cls: "spacer" });
    const falseButton = new import_obsidian11.ButtonComponent(choicesContainer);
    falseButton.setButtonText("False");
    choicesContainer.createDiv({ cls: "spacer" });
    if (this.value) {
      trueButton.setCta();
      falseButton.removeCta();
    } else {
      falseButton.setCta();
      trueButton.removeCta();
    }
    falseButton.onClick(() => {
      this.value = false;
      falseButton.setCta();
      trueButton.removeCta();
    });
    trueButton.onClick(() => {
      this.value = true;
      trueButton.setCta();
      falseButton.removeCta();
    });
    const saveButton = new import_obsidian11.ButtonComponent(choicesContainer);
    saveButton.setClass("right");
    saveButton.setIcon("checkmark");
    saveButton.onClick(() => __async(this, null, function* () {
      const value = this.value.toString();
      yield postValues(this.plugin, [{ name: this.field.name, payload: { value } }], this.file, this.lineNumber, this.after, this.asList, this.asComment);
      this.close();
    }));
  }
};

// src/fields/fieldManagers/BooleanField.ts
var BooleanField = class extends FieldManager2 {
  constructor(plugin, field) {
    super(plugin, field, "Boolean" /* Boolean */);
    this.showModalOption = false;
  }
  toggle(name, value, file) {
    return __async(this, null, function* () {
      const bValue = BooleanField.stringToBoolean(value);
      yield postValues(this.plugin, [{ name, payload: { value: (!bValue).toString() } }], file);
    });
  }
  addFieldOption(name, value, file, location) {
    const bValue = BooleanField.stringToBoolean(value);
    const iconName = FieldIcon["Boolean" /* Boolean */];
    const action = () => __async(this, null, function* () {
      return yield this.toggle(name, value, file);
    });
    if (BooleanField.isMenu(location)) {
      location.addItem((item) => {
        item.setTitle(`<${name}> ${bValue ? "\u2705 \u25B7 \u274C" : "\u274C \u25B7 \u2705"}`);
        item.setIcon(iconName);
        item.onClick(action);
        item.setSection("metadata-menu.fields");
      });
    } else if (BooleanField.isSuggest(location)) {
      location.options.push({
        id: `update_${name}`,
        actionLabel: `<span><b>${name}</b> ${bValue ? "\u2705 \u25B7 \u274C" : "\u274C \u25B7 \u2705"}</span>`,
        action,
        icon: iconName
      });
    } else if (BooleanField.isFieldOptions(location)) {
      location.addOption(bValue ? "x-square" : "check-square", action, bValue ? "\u2705 \u25B7 \u274C" : "\u274C \u25B7 \u2705");
    }
    ;
  }
  getOptionsStr() {
    return "";
  }
  createSettingContainer(parentContainer, plugin) {
  }
  validateValue(value) {
    try {
      const bValue = BooleanField.stringToBoolean(value);
      return isBoolean(bValue);
    } catch (error) {
      return false;
    }
  }
  validateOptions() {
    return true;
  }
  createAndOpenFieldModal(file, selectedFieldName, value, lineNumber, after, asList, asComment) {
    const bValue = BooleanField.stringToBoolean(value || "false");
    const fieldModal = new BooleanModal(this.plugin, file, this.field, bValue, lineNumber, after, asList, asComment);
    fieldModal.titleEl.setText(`Set value for ${selectedFieldName}`);
    fieldModal.open();
  }
  createDvField(dv, p, fieldContainer, attrs) {
    const checkbox = dv.el("input", "", __spreadProps(__spreadValues({}, attrs), { "type": "checkbox" }));
    checkbox.checked = p[this.field.name];
    fieldContainer.appendChild(checkbox);
    checkbox.onchange = (value) => {
      BooleanField.replaceValues(this.plugin, p.file.path, this.field.name, checkbox.checked.toString());
    };
  }
};

// src/fields/fieldManagers/NumberField.ts
var import_obsidian13 = require("obsidian");

// src/modals/fields/NumberModal.ts
var import_obsidian12 = require("obsidian");
var NumberModal = class extends import_obsidian12.Modal {
  constructor(plugin, file, field, value, lineNumber = -1, after = false, asList = false, asComment = false) {
    super(plugin.app);
    this.plugin = plugin;
    this.file = file;
    this.field = field;
    this.value = value;
    this.lineNumber = lineNumber;
    this.after = after;
    this.asList = asList;
    this.asComment = asComment;
    this.fieldManager = new FieldManager[this.field.type](this.plugin, this.field);
    this.containerEl.addClass("metadata-menu");
  }
  onOpen() {
    this.buildInputEl();
  }
  decrement(numberInput) {
    const { step } = this.field.options;
    const fStep = parseFloat(step);
    if (!isNaN(fStep)) {
      numberInput.setValue((parseFloat(numberInput.getValue()) - fStep).toString());
    } else {
      numberInput.setValue((parseFloat(numberInput.getValue()) - 1).toString());
    }
  }
  increment(numberInput) {
    const { step } = this.field.options;
    const fStep = parseFloat(step);
    if (!isNaN(fStep)) {
      numberInput.setValue((parseFloat(numberInput.getValue()) + fStep).toString());
    } else {
      numberInput.setValue((parseFloat(numberInput.getValue()) + 1).toString());
    }
  }
  toggleButtonsState(minusBtn, plusBtn, numberInput) {
    minusBtn.setDisabled(!this.fieldManager.canDecrement(numberInput.getValue()));
    plusBtn.setDisabled(!this.fieldManager.canIncrement(numberInput.getValue()));
    if (this.fieldManager.canDecrement(numberInput.getValue())) {
      minusBtn.setCta();
    } else {
      minusBtn.removeCta();
    }
    if (this.fieldManager.canIncrement(numberInput.getValue())) {
      plusBtn.setCta();
    } else {
      plusBtn.removeCta();
    }
  }
  buildInputEl() {
    const { step } = this.field.options;
    const fieldContainer = this.contentEl.createEl("div", { cls: "field-container" });
    const numberInput = new import_obsidian12.TextComponent(fieldContainer);
    numberInput.inputEl.focus();
    numberInput.setValue(`${this.value}`);
    const minusBtn = new import_obsidian12.ButtonComponent(fieldContainer);
    minusBtn.setButtonText(`- ${!!step ? step : 1}`);
    minusBtn.setDisabled(!this.fieldManager.canDecrement(numberInput.getValue()));
    const plusBtn = new import_obsidian12.ButtonComponent(fieldContainer);
    plusBtn.setButtonText(`+ ${!!step ? step : 1}`);
    plusBtn.setDisabled(!this.fieldManager.canIncrement(numberInput.getValue()));
    fieldContainer.createDiv({ cls: "spacer" });
    const validateBtn = new import_obsidian12.ButtonComponent(fieldContainer);
    validateBtn.setIcon("checkmark");
    const cancelBtn = new import_obsidian12.ButtonComponent(fieldContainer);
    cancelBtn.setIcon("cross");
    const errorField = this.contentEl.createEl("div", { cls: "field-error" });
    errorField.hide();
    this.toggleButtonsState(minusBtn, plusBtn, numberInput);
    numberInput.onChange(() => {
      numberInput.inputEl.removeClass("is-invalid");
      errorField.hide();
      errorField.setText("");
      this.toggleButtonsState(minusBtn, plusBtn, numberInput);
    });
    plusBtn.onClick((e) => {
      e.preventDefault();
      this.increment(numberInput);
      this.toggleButtonsState(minusBtn, plusBtn, numberInput);
    });
    minusBtn.onClick((e) => {
      e.preventDefault();
      this.decrement(numberInput);
      this.toggleButtonsState(minusBtn, plusBtn, numberInput);
    });
    cancelBtn.onClick((e) => {
      e.preventDefault();
      this.close();
    });
    validateBtn.onClick(() => __async(this, null, function* () {
      let inputValue = numberInput.getValue();
      if (!this.fieldManager.validateValue(inputValue)) {
        const { min: min2, max: max2 } = this.field.options;
        errorField.show();
        errorField.setText(`value must be numeric${min2 ? " and >= " + min2 : ""} ${max2 ? " and <= " + max2 : ""}`);
        numberInput.inputEl.setAttr("class", "is-invalid");
        return;
      }
      yield postValues(this.plugin, [{ name: this.field.name, payload: { value: inputValue } }], this.file, this.lineNumber, this.after, this.asList, this.asComment);
      this.close();
    }));
  }
};

// src/fields/fieldManagers/NumberField.ts
var NumberField = class extends FieldManager2 {
  constructor(plugin, field) {
    super(plugin, field, "Number" /* Number */);
  }
  getOptionsStr() {
    const options2 = [];
    Object.keys(this.field.options).forEach((k) => {
      if (this.field.options[k])
        options2.push(`${k}: ${this.field.options[k]}`);
    });
    return options2.join(" | ");
  }
  canDecrement(value) {
    const { step, min: min2 } = this.field.options;
    const fStep = parseFloat(step);
    const fMin = parseFloat(min2);
    return !(isNaN(parseFloat(value)) || !isNaN(fMin) && (!isNaN(fStep) && (parseFloat(value) - fStep < fMin || parseFloat(value) - 1 < fMin)));
  }
  canIncrement(value) {
    const { step, max: max2 } = this.field.options;
    const fStep = parseFloat(step);
    const fMax = parseFloat(max2);
    return !(isNaN(parseFloat(value)) || !isNaN(fMax) && (!isNaN(fStep) && (parseFloat(value) + fStep > fMax || parseFloat(value) + 1 > fMax)));
  }
  validateValue(value) {
    const { min: min2, max: max2 } = this.field.options;
    const fMin = parseFloat(min2);
    const fMax = parseFloat(max2);
    const fValue = parseFloat(value);
    return !isNaN(fValue) && (isNaN(fMin) || fValue >= fMin) && (isNaN(fMax) || fValue <= fMax);
  }
  addFieldOption(name, value, file, location) {
    const modal = new NumberModal(this.plugin, file, this.field, value);
    modal.titleEl.setText(`Change Value for <${name}>`);
    const { min: min2, max: max2, step } = this.field.options;
    const fMin = parseFloat(min2);
    const fMax = parseFloat(max2);
    const fStep = parseFloat(step);
    const fValue = parseFloat(value);
    const canDecrease = !isNaN(fMin) && fValue - fStep >= fMin;
    const canIncrease = !isNaN(fMax) && fValue + fStep <= fMax;
    const action = () => modal.open();
    const decrease = () => __async(this, null, function* () {
      return yield postValues(this.plugin, [{ name, payload: { value: (fValue - fStep).toString() } }], file);
    });
    const increase = () => __async(this, null, function* () {
      return yield postValues(this.plugin, [{ name, payload: { value: (fValue + fStep).toString() } }], file);
    });
    if (NumberField.isMenu(location)) {
      location.addItem((item) => {
        item.setTitle(`Update <${name}>`);
        item.setIcon(FieldIcon["Number" /* Number */]);
        item.onClick(action);
        item.setSection("metadata-menu.fields");
      });
      if (fStep) {
        if (canDecrease)
          location.addItem((item) => {
            item.setIcon("minus-square");
            item.setTitle(`<${name}> \u2198\uFE0F ${fValue - fStep}`);
            item.onClick(decrease);
            item.setSection("metadata-menu.fields");
          });
        if (canIncrease)
          location.addItem((item) => {
            item.setIcon("plus-square");
            item.setTitle(`<${name}> \u2197\uFE0F ${fValue + fStep}`);
            item.onClick(increase);
            item.setSection("metadata-menu.fields");
          });
      }
    } else if (NumberField.isSuggest(location)) {
      location.options.push({
        id: `update_${name}`,
        actionLabel: `<span>Update <b>${name}</b></span>`,
        action,
        icon: FieldIcon["Number" /* Number */]
      });
    } else if (NumberField.isFieldOptions(location)) {
      if (step) {
        if (canDecrease) {
          location.addOption("minus-square", decrease, `Decrease ${name} by ${step}`);
        }
        if (canIncrease) {
          location.addOption("plus-square", increase, `Increase ${name} by ${step}`);
        }
      }
      location.addOption(FieldIcon["Number" /* Number */], action, `Update ${name}'s value`);
    }
    ;
  }
  createNumberContainer(container) {
    const numberStepValueContainer = container.createDiv({ cls: "field-container" });
    numberStepValueContainer.createEl("span", { text: "Step (optional)", cls: "label" });
    numberStepValueContainer.createDiv({ cls: "spacer" });
    this.numberStepValue = new import_obsidian13.TextComponent(numberStepValueContainer);
    this.numberStepValue.inputEl.addClass("with-label");
    this.numberStepValue.setValue(this.field.options.step || "");
    const numberMinValueContainer = container.createDiv({ cls: "field-container" });
    numberMinValueContainer.createEl("span", { text: "Min value (optional)", cls: "label" });
    this.numberMinValue = new import_obsidian13.TextComponent(numberMinValueContainer);
    this.numberMinValue.inputEl.addClass("full-width");
    this.numberMinValue.inputEl.addClass("with-label");
    this.numberMinValue.setValue(this.field.options.min || "");
    const numberMaxValueContainer = container.createDiv({ cls: "field-container" });
    numberMaxValueContainer.createEl("span", { text: "Max value (optional)", cls: "label" });
    this.numberMaxValue = new import_obsidian13.TextComponent(numberMaxValueContainer);
    this.numberMaxValue.inputEl.addClass("full-width");
    this.numberMaxValue.inputEl.addClass("with-label");
    this.numberMaxValue.setValue(this.field.options.max || "");
    this.numberStepValue.onChange((value) => {
      this.field.options.step = value;
      FieldSettingsModal.removeValidationError(this.numberStepValue);
    });
    this.numberMinValue.onChange((value) => {
      this.field.options.min = value;
      FieldSettingsModal.removeValidationError(this.numberMinValue);
    });
    this.numberMaxValue.onChange((value) => {
      this.field.options.max = value;
      FieldSettingsModal.removeValidationError(this.numberMaxValue);
    });
  }
  createSettingContainer(container, plugin) {
    this.createNumberContainer(container);
  }
  validateOptions() {
    let error = false;
    if (this.field.options.step && isNaN(parseFloat(this.field.options.step))) {
      FieldSettingsModal.setValidationError(this.numberStepValue, "Values must be numeric.");
      error = true;
    }
    if (this.field.options.min && isNaN(parseFloat(this.field.options.min))) {
      FieldSettingsModal.setValidationError(this.numberMinValue, "Values must be numeric.");
      error = true;
    }
    if (this.field.options.max && isNaN(parseFloat(this.field.options.max))) {
      FieldSettingsModal.setValidationError(this.numberMaxValue, "Values must be numeric.");
      error = true;
    }
    return !error;
  }
  createAndOpenFieldModal(file, selectedFieldName, value, lineNumber, after, asList, asComment) {
    const fieldModal = new NumberModal(this.plugin, file, this.field, value || "", lineNumber, after, asList, asComment);
    fieldModal.titleEl.setText(`Enter value for ${selectedFieldName}`);
    fieldModal.open();
  }
  toggleDvButtons(decrementBtn, incrementBtn, value) {
    if (this.canDecrement(value)) {
      decrementBtn.removeClass("disabled");
    } else {
      decrementBtn.addClass("disabled");
    }
    if (this.canIncrement(value)) {
      incrementBtn.removeClass("disabled");
    } else {
      incrementBtn.addClass("disabled");
      ;
    }
  }
  createDvField(dv, p, fieldContainer, attrs = {}) {
    var _a;
    attrs.cls = "value-container";
    const fieldValue = dv.el("span", p[this.field.name], attrs);
    fieldContainer.appendChild(fieldValue);
    const inputContainer = fieldContainer.createDiv({});
    const input = inputContainer.createEl("input");
    input.value = p[this.field.name];
    const tripleSpacer = fieldContainer.createDiv({ cls: "spacer-3" });
    const editButton = fieldContainer.createEl("button");
    (0, import_obsidian13.setIcon)(editButton, FieldIcon["Number" /* Number */]);
    const decrementButton = fieldContainer.createEl("button");
    (0, import_obsidian13.setIcon)(decrementButton, "left-arrow");
    const incrementButton = fieldContainer.createEl("button");
    (0, import_obsidian13.setIcon)(incrementButton, "right-arrow");
    if (!((_a = attrs == null ? void 0 : attrs.options) == null ? void 0 : _a.alwaysOn)) {
      editButton.hide();
      decrementButton.hide();
      incrementButton.hide();
      tripleSpacer.show();
      fieldContainer.onmouseover = () => {
        editButton.show();
        decrementButton.show();
        incrementButton.show();
        tripleSpacer.hide();
      };
      fieldContainer.onmouseout = () => {
        editButton.hide();
        decrementButton.hide();
        incrementButton.hide();
        tripleSpacer.show();
      };
    }
    const validateIcon = fieldContainer.createEl("button");
    (0, import_obsidian13.setIcon)(validateIcon, "checkmark");
    validateIcon.onclick = () => __async(this, null, function* () {
      if (this.validateValue(input.value)) {
        const file = this.plugin.app.vault.getAbstractFileByPath(p.file.path);
        if (file instanceof import_obsidian13.TFile && file.extension == "md") {
          yield postValues(this.plugin, [{ name: this.field.name, payload: { value: input.value } }], file);
          this.toggleDvButtons(decrementButton, incrementButton, input.value);
        }
        fieldContainer.removeChild(inputContainer);
      }
    });
    inputContainer == null ? void 0 : inputContainer.appendChild(validateIcon);
    const cancelIcon = fieldContainer.createEl("button");
    (0, import_obsidian13.setIcon)(cancelIcon, "cross");
    cancelIcon.onclick = (e) => {
      fieldContainer.removeChild(inputContainer);
      fieldContainer.appendChild(fieldValue);
      fieldContainer.appendChild(decrementButton);
      fieldContainer.appendChild(editButton);
      fieldContainer.appendChild(incrementButton);
      fieldContainer.appendChild(tripleSpacer);
    };
    inputContainer.appendChild(cancelIcon);
    input.focus();
    input.onkeyup = (e) => {
      if (!this.validateValue(input.value)) {
        input.addClass("is-invalid");
        validateIcon.addClass("disabled");
      } else {
        input.removeClass("is-invalid");
        validateIcon.removeClass("disabled");
      }
    };
    input.onkeydown = (e) => __async(this, null, function* () {
      if (e.key === "Enter") {
        if (this.validateValue(input.value)) {
          const file = this.plugin.app.vault.getAbstractFileByPath(p.file.path);
          if (file instanceof import_obsidian13.TFile && file.extension == "md") {
            yield postValues(this.plugin, [{ name: this.field.name, payload: { value: input.value } }], file);
            this.toggleDvButtons(decrementButton, incrementButton, input.value);
          }
          fieldContainer.removeChild(inputContainer);
        }
      }
      if (e.key === "Escape") {
        fieldContainer.removeChild(inputContainer);
        fieldContainer.appendChild(fieldValue);
        fieldContainer.appendChild(decrementButton);
        fieldContainer.appendChild(editButton);
        fieldContainer.appendChild(incrementButton);
        fieldContainer.appendChild(tripleSpacer);
      }
    });
    editButton.onclick = () => {
      fieldContainer.removeChild(fieldValue);
      fieldContainer.removeChild(editButton);
      fieldContainer.removeChild(decrementButton);
      fieldContainer.removeChild(incrementButton);
      fieldContainer.removeChild(tripleSpacer);
      fieldContainer.appendChild(inputContainer);
      input.focus();
    };
    decrementButton.onclick = () => __async(this, null, function* () {
      if (this.canDecrement(p[this.field.name])) {
        const { step } = this.field.options;
        const fStep = parseFloat(step);
        const file = this.plugin.app.vault.getAbstractFileByPath(p["file"]["path"]);
        if (file instanceof import_obsidian13.TFile && file.extension == "md") {
          const newValue = (!!fStep ? p[this.field.name] - fStep : p[this.field.name] - 1).toString();
          yield postValues(this.plugin, [{ name: this.field.name, payload: { value: newValue } }], file);
          this.toggleDvButtons(decrementButton, incrementButton, newValue);
        }
      }
    });
    incrementButton.onclick = () => __async(this, null, function* () {
      if (this.canIncrement(p[this.field.name])) {
        const { step } = this.field.options;
        const fStep = parseFloat(step);
        const file = this.plugin.app.vault.getAbstractFileByPath(p["file"]["path"]);
        if (file instanceof import_obsidian13.TFile && file.extension == "md") {
          const newValue = (!!fStep ? p[this.field.name] + fStep : p[this.field.name] + 1).toString();
          yield postValues(this.plugin, [{ name: this.field.name, payload: { value: newValue } }], file);
          this.toggleDvButtons(decrementButton, incrementButton, newValue);
        }
      }
    });
    fieldContainer.removeChild(inputContainer);
    fieldContainer.appendChild(fieldValue);
    fieldContainer.appendChild(decrementButton);
    fieldContainer.appendChild(editButton);
    fieldContainer.appendChild(incrementButton);
    fieldContainer.appendChild(tripleSpacer);
    this.toggleDvButtons(decrementButton, incrementButton, p[this.field.name]);
  }
};

// src/fields/fieldManagers/SelectField.ts
var import_obsidian18 = require("obsidian");

// src/modals/fields/SelectModal.ts
var import_obsidian14 = require("obsidian");

// src/types/selectValuesSourceTypes.ts
var Type2 = /* @__PURE__ */ ((Type3) => {
  Type3["ValuesList"] = "ValuesList";
  Type3["ValuesListNotePath"] = "ValuesListNotePath";
  Type3["ValuesFromDVQuery"] = "ValuesFromDVQuery";
  return Type3;
})(Type2 || {});
var Key = {
  "ValuesList": "valuesList",
  "ValuesListNotePath": "valuesListNotePath",
  "ValuesFromDVQuery": "valuesFromDVQuery"
};
var typeDisplay = {
  "ValuesList": "Values defined in these settings",
  "ValuesListNotePath": "Values from a note",
  "ValuesFromDVQuery": "Values returned from a dataview query"
};

// src/modals/fields/SelectModal.ts
var ValueSuggestModal = class extends import_obsidian14.SuggestModal {
  constructor(plugin, file, value, field, lineNumber = -1, after = false, asList = false, asComment = false) {
    super(plugin.app);
    this.plugin = plugin;
    this.file = file;
    this.value = value;
    this.field = field;
    this.lineNumber = lineNumber;
    this.after = after;
    this.asList = asList;
    this.asComment = asComment;
    this.containerEl.addClass("metadata-menu");
  }
  onOpen() {
    return __async(this, null, function* () {
      __superGet(ValueSuggestModal.prototype, this, "onOpen").call(this);
      const inputContainer = this.containerEl.createDiv({ cls: "suggester-input" });
      inputContainer.appendChild(this.inputEl);
      this.containerEl.find(".prompt").prepend(inputContainer);
      const buttonContainer = this.containerEl.createDiv({ cls: "footer-actions" });
      buttonContainer.createDiv({ cls: "spacer" });
      const infoContainer = buttonContainer.createDiv({ cls: "info" });
      infoContainer.setText("Shift+Enter to save");
      this.addButton = new import_obsidian14.ButtonComponent(inputContainer);
      this.addButton.setIcon("plus");
      this.addButton.onClick(() => this.addNewValueToSettings());
      this.addButton.setCta();
      this.addButton.setTooltip("Add this value to this field settings");
      this.addButton.buttonEl.hide();
      const cancelButton = new import_obsidian14.ButtonComponent(buttonContainer);
      cancelButton.setIcon("cross");
      cancelButton.onClick(() => this.close());
      cancelButton.setTooltip("Cancel");
      const clearButton = new import_obsidian14.ButtonComponent(buttonContainer);
      clearButton.setIcon("eraser");
      clearButton.onClick(() => __async(this, null, function* () {
        yield this.clearValues();
        this.close();
      }));
      clearButton.buttonEl.addClass("danger");
      clearButton.setTooltip("Clear the field value");
      this.modalEl.appendChild(buttonContainer);
    });
  }
  addNewValueToSettings() {
    return __async(this, null, function* () {
      var _a, _b;
      const newValue = this.inputEl.value;
      const fileClassName = (_b = (_a = this.plugin.fieldIndex.filesFields.get(this.file.path)) == null ? void 0 : _a.find((field) => field.name === this.field.name)) == null ? void 0 : _b.fileClassName;
      if (fileClassName) {
        const fileClass = this.plugin.fieldIndex.fileClassesName.get(fileClassName);
        const fileClassAttribute = fileClass == null ? void 0 : fileClass.attributes.find((attr) => attr.name === this.field.name);
        if (fileClass && fileClassAttribute) {
          let newOptions;
          if (Array.isArray(fileClassAttribute.options)) {
            newOptions = [...fileClassAttribute.options, newValue];
            yield fileClass.updateAttribute(fileClassAttribute.type, fileClassAttribute.name, newOptions, fileClassAttribute);
          } else if (fileClassAttribute.options.sourceType === "ValuesList" /* ValuesList */) {
            newOptions = fileClassAttribute.options.valuesList;
            newOptions[`${Object.keys(fileClassAttribute.options.valuesList).length + 1}`] = newValue;
            yield fileClass.updateAttribute(fileClassAttribute.type, fileClassAttribute.name, newOptions, fileClassAttribute);
          } else if (fileClassAttribute.options.sourceType === "ValuesListNotePath" /* ValuesListNotePath */) {
            const valuesFile = this.plugin.app.vault.getAbstractFileByPath(fileClassAttribute.options.valuesListNotePath);
            if (valuesFile instanceof import_obsidian14.TFile && valuesFile.extension == "md") {
              const result = yield this.plugin.app.vault.read(valuesFile);
              this.plugin.app.vault.modify(valuesFile, `${result}
${newValue}`);
            }
          } else {
            newOptions = fileClassAttribute.options;
            newOptions[`${Object.keys(fileClassAttribute.options).length + 1}`] = newValue;
            yield fileClass.updateAttribute(fileClassAttribute.type, fileClassAttribute.name, newOptions, fileClassAttribute);
          }
        }
      } else {
        const presetField = this.plugin.settings.presetFields.find((field) => field.name === this.field.name);
        if ((presetField == null ? void 0 : presetField.options.sourceType) === "ValuesListNotePath" /* ValuesListNotePath */) {
          const valuesFile = this.plugin.app.vault.getAbstractFileByPath(presetField.options.valuesListNotePath);
          if (valuesFile instanceof import_obsidian14.TFile && valuesFile.extension == "md") {
            const result = yield this.plugin.app.vault.read(valuesFile);
            this.plugin.app.vault.modify(valuesFile, `${result}
${newValue}`);
          }
        } else if ((presetField == null ? void 0 : presetField.options.sourceType) === "ValuesList" /* ValuesList */) {
          const currentExistingField = this.plugin.initialProperties.find((p) => p.id == this.field.id);
          if (currentExistingField) {
            const valuesList = currentExistingField.options.valuesList;
            valuesList[`${Object.keys(valuesList).length + 1}`] = newValue;
          }
          this.plugin.saveSettings();
        }
      }
      yield this.saveItem(newValue);
      this.close();
    });
  }
  clearValues() {
    return __async(this, null, function* () {
      yield postValues(this.plugin, [{ name: this.field.name, payload: { value: "" } }], this.file, this.lineNumber, this.after, this.asList, this.asComment);
    });
  }
  getSuggestions(query) {
    var _a;
    const dvApi = (_a = this.plugin.app.plugins.plugins.dataview) == null ? void 0 : _a.api;
    let dvFile;
    if (dvApi)
      dvFile = dvApi.page(this.file.path);
    const fieldManager = new FieldManager[this.field.type](this.plugin, this.field);
    const values = fieldManager.getOptionsList(dvFile).filter((o) => o.toLowerCase().includes(query.toLowerCase()));
    if (this.addButton) {
      values.some((p) => p === query) || this.field.options.sourceType == "ValuesFromDVQuery" /* ValuesFromDVQuery */ || !query ? this.addButton.buttonEl.hide() : this.addButton.buttonEl.show();
    }
    ;
    return values;
  }
  renderSuggestion(value, el) {
    el.setText(value);
    el.addClass("value-container");
    if (value === this.value)
      el.addClass("value-checked");
  }
  saveItem(item) {
    return __async(this, null, function* () {
      yield postValues(this.plugin, [{ name: this.field.name, payload: { value: item.toString() } }], this.file, this.lineNumber, this.after, this.asList, this.asComment);
    });
  }
  onChooseSuggestion(item, evt) {
    return __async(this, null, function* () {
      this.saveItem(item);
    });
  }
};

// src/fields/fieldManagers/AbstractListBasedField.ts
var import_obsidian17 = require("obsidian");

// src/suggester/FileSuggester.ts
var import_obsidian16 = require("obsidian");

// src/suggester/suggest.ts
var import_obsidian15 = require("obsidian");

// node_modules/@popperjs/core/lib/enums.js
var top = "top";
var bottom = "bottom";
var right = "right";
var left = "left";
var auto = "auto";
var basePlacements = [top, bottom, right, left];
var start = "start";
var end = "end";
var clippingParents = "clippingParents";
var viewport = "viewport";
var popper = "popper";
var reference = "reference";
var variationPlacements = /* @__PURE__ */ basePlacements.reduce(function(acc, placement) {
  return acc.concat([placement + "-" + start, placement + "-" + end]);
}, []);
var placements = /* @__PURE__ */ [].concat(basePlacements, [auto]).reduce(function(acc, placement) {
  return acc.concat([placement, placement + "-" + start, placement + "-" + end]);
}, []);
var beforeRead = "beforeRead";
var read = "read";
var afterRead = "afterRead";
var beforeMain = "beforeMain";
var main = "main";
var afterMain = "afterMain";
var beforeWrite = "beforeWrite";
var write = "write";
var afterWrite = "afterWrite";
var modifierPhases = [beforeRead, read, afterRead, beforeMain, main, afterMain, beforeWrite, write, afterWrite];

// node_modules/@popperjs/core/lib/dom-utils/getNodeName.js
function getNodeName(element) {
  return element ? (element.nodeName || "").toLowerCase() : null;
}

// node_modules/@popperjs/core/lib/dom-utils/getWindow.js
function getWindow(node) {
  if (node == null) {
    return window;
  }
  if (node.toString() !== "[object Window]") {
    var ownerDocument = node.ownerDocument;
    return ownerDocument ? ownerDocument.defaultView || window : window;
  }
  return node;
}

// node_modules/@popperjs/core/lib/dom-utils/instanceOf.js
function isElement(node) {
  var OwnElement = getWindow(node).Element;
  return node instanceof OwnElement || node instanceof Element;
}
function isHTMLElement(node) {
  var OwnElement = getWindow(node).HTMLElement;
  return node instanceof OwnElement || node instanceof HTMLElement;
}
function isShadowRoot(node) {
  if (typeof ShadowRoot === "undefined") {
    return false;
  }
  var OwnElement = getWindow(node).ShadowRoot;
  return node instanceof OwnElement || node instanceof ShadowRoot;
}

// node_modules/@popperjs/core/lib/modifiers/applyStyles.js
function applyStyles(_ref) {
  var state = _ref.state;
  Object.keys(state.elements).forEach(function(name) {
    var style = state.styles[name] || {};
    var attributes = state.attributes[name] || {};
    var element = state.elements[name];
    if (!isHTMLElement(element) || !getNodeName(element)) {
      return;
    }
    Object.assign(element.style, style);
    Object.keys(attributes).forEach(function(name2) {
      var value = attributes[name2];
      if (value === false) {
        element.removeAttribute(name2);
      } else {
        element.setAttribute(name2, value === true ? "" : value);
      }
    });
  });
}
function effect(_ref2) {
  var state = _ref2.state;
  var initialStyles = {
    popper: {
      position: state.options.strategy,
      left: "0",
      top: "0",
      margin: "0"
    },
    arrow: {
      position: "absolute"
    },
    reference: {}
  };
  Object.assign(state.elements.popper.style, initialStyles.popper);
  state.styles = initialStyles;
  if (state.elements.arrow) {
    Object.assign(state.elements.arrow.style, initialStyles.arrow);
  }
  return function() {
    Object.keys(state.elements).forEach(function(name) {
      var element = state.elements[name];
      var attributes = state.attributes[name] || {};
      var styleProperties = Object.keys(state.styles.hasOwnProperty(name) ? state.styles[name] : initialStyles[name]);
      var style = styleProperties.reduce(function(style2, property) {
        style2[property] = "";
        return style2;
      }, {});
      if (!isHTMLElement(element) || !getNodeName(element)) {
        return;
      }
      Object.assign(element.style, style);
      Object.keys(attributes).forEach(function(attribute) {
        element.removeAttribute(attribute);
      });
    });
  };
}
var applyStyles_default = {
  name: "applyStyles",
  enabled: true,
  phase: "write",
  fn: applyStyles,
  effect,
  requires: ["computeStyles"]
};

// node_modules/@popperjs/core/lib/utils/getBasePlacement.js
function getBasePlacement(placement) {
  return placement.split("-")[0];
}

// node_modules/@popperjs/core/lib/utils/math.js
var max = Math.max;
var min = Math.min;
var round = Math.round;

// node_modules/@popperjs/core/lib/utils/userAgent.js
function getUAString() {
  var uaData = navigator.userAgentData;
  if (uaData != null && uaData.brands) {
    return uaData.brands.map(function(item) {
      return item.brand + "/" + item.version;
    }).join(" ");
  }
  return navigator.userAgent;
}

// node_modules/@popperjs/core/lib/dom-utils/isLayoutViewport.js
function isLayoutViewport() {
  return !/^((?!chrome|android).)*safari/i.test(getUAString());
}

// node_modules/@popperjs/core/lib/dom-utils/getBoundingClientRect.js
function getBoundingClientRect(element, includeScale, isFixedStrategy) {
  if (includeScale === void 0) {
    includeScale = false;
  }
  if (isFixedStrategy === void 0) {
    isFixedStrategy = false;
  }
  var clientRect = element.getBoundingClientRect();
  var scaleX = 1;
  var scaleY = 1;
  if (includeScale && isHTMLElement(element)) {
    scaleX = element.offsetWidth > 0 ? round(clientRect.width) / element.offsetWidth || 1 : 1;
    scaleY = element.offsetHeight > 0 ? round(clientRect.height) / element.offsetHeight || 1 : 1;
  }
  var _ref = isElement(element) ? getWindow(element) : window, visualViewport = _ref.visualViewport;
  var addVisualOffsets = !isLayoutViewport() && isFixedStrategy;
  var x = (clientRect.left + (addVisualOffsets && visualViewport ? visualViewport.offsetLeft : 0)) / scaleX;
  var y = (clientRect.top + (addVisualOffsets && visualViewport ? visualViewport.offsetTop : 0)) / scaleY;
  var width = clientRect.width / scaleX;
  var height = clientRect.height / scaleY;
  return {
    width,
    height,
    top: y,
    right: x + width,
    bottom: y + height,
    left: x,
    x,
    y
  };
}

// node_modules/@popperjs/core/lib/dom-utils/getLayoutRect.js
function getLayoutRect(element) {
  var clientRect = getBoundingClientRect(element);
  var width = element.offsetWidth;
  var height = element.offsetHeight;
  if (Math.abs(clientRect.width - width) <= 1) {
    width = clientRect.width;
  }
  if (Math.abs(clientRect.height - height) <= 1) {
    height = clientRect.height;
  }
  return {
    x: element.offsetLeft,
    y: element.offsetTop,
    width,
    height
  };
}

// node_modules/@popperjs/core/lib/dom-utils/contains.js
function contains(parent, child) {
  var rootNode = child.getRootNode && child.getRootNode();
  if (parent.contains(child)) {
    return true;
  } else if (rootNode && isShadowRoot(rootNode)) {
    var next = child;
    do {
      if (next && parent.isSameNode(next)) {
        return true;
      }
      next = next.parentNode || next.host;
    } while (next);
  }
  return false;
}

// node_modules/@popperjs/core/lib/dom-utils/getComputedStyle.js
function getComputedStyle(element) {
  return getWindow(element).getComputedStyle(element);
}

// node_modules/@popperjs/core/lib/dom-utils/isTableElement.js
function isTableElement(element) {
  return ["table", "td", "th"].indexOf(getNodeName(element)) >= 0;
}

// node_modules/@popperjs/core/lib/dom-utils/getDocumentElement.js
function getDocumentElement(element) {
  return ((isElement(element) ? element.ownerDocument : element.document) || window.document).documentElement;
}

// node_modules/@popperjs/core/lib/dom-utils/getParentNode.js
function getParentNode(element) {
  if (getNodeName(element) === "html") {
    return element;
  }
  return element.assignedSlot || element.parentNode || (isShadowRoot(element) ? element.host : null) || getDocumentElement(element);
}

// node_modules/@popperjs/core/lib/dom-utils/getOffsetParent.js
function getTrueOffsetParent(element) {
  if (!isHTMLElement(element) || getComputedStyle(element).position === "fixed") {
    return null;
  }
  return element.offsetParent;
}
function getContainingBlock(element) {
  var isFirefox = /firefox/i.test(getUAString());
  var isIE = /Trident/i.test(getUAString());
  if (isIE && isHTMLElement(element)) {
    var elementCss = getComputedStyle(element);
    if (elementCss.position === "fixed") {
      return null;
    }
  }
  var currentNode = getParentNode(element);
  if (isShadowRoot(currentNode)) {
    currentNode = currentNode.host;
  }
  while (isHTMLElement(currentNode) && ["html", "body"].indexOf(getNodeName(currentNode)) < 0) {
    var css = getComputedStyle(currentNode);
    if (css.transform !== "none" || css.perspective !== "none" || css.contain === "paint" || ["transform", "perspective"].indexOf(css.willChange) !== -1 || isFirefox && css.willChange === "filter" || isFirefox && css.filter && css.filter !== "none") {
      return currentNode;
    } else {
      currentNode = currentNode.parentNode;
    }
  }
  return null;
}
function getOffsetParent(element) {
  var window2 = getWindow(element);
  var offsetParent = getTrueOffsetParent(element);
  while (offsetParent && isTableElement(offsetParent) && getComputedStyle(offsetParent).position === "static") {
    offsetParent = getTrueOffsetParent(offsetParent);
  }
  if (offsetParent && (getNodeName(offsetParent) === "html" || getNodeName(offsetParent) === "body" && getComputedStyle(offsetParent).position === "static")) {
    return window2;
  }
  return offsetParent || getContainingBlock(element) || window2;
}

// node_modules/@popperjs/core/lib/utils/getMainAxisFromPlacement.js
function getMainAxisFromPlacement(placement) {
  return ["top", "bottom"].indexOf(placement) >= 0 ? "x" : "y";
}

// node_modules/@popperjs/core/lib/utils/within.js
function within(min2, value, max2) {
  return max(min2, min(value, max2));
}
function withinMaxClamp(min2, value, max2) {
  var v = within(min2, value, max2);
  return v > max2 ? max2 : v;
}

// node_modules/@popperjs/core/lib/utils/getFreshSideObject.js
function getFreshSideObject() {
  return {
    top: 0,
    right: 0,
    bottom: 0,
    left: 0
  };
}

// node_modules/@popperjs/core/lib/utils/mergePaddingObject.js
function mergePaddingObject(paddingObject) {
  return Object.assign({}, getFreshSideObject(), paddingObject);
}

// node_modules/@popperjs/core/lib/utils/expandToHashMap.js
function expandToHashMap(value, keys) {
  return keys.reduce(function(hashMap, key) {
    hashMap[key] = value;
    return hashMap;
  }, {});
}

// node_modules/@popperjs/core/lib/modifiers/arrow.js
var toPaddingObject = function toPaddingObject2(padding, state) {
  padding = typeof padding === "function" ? padding(Object.assign({}, state.rects, {
    placement: state.placement
  })) : padding;
  return mergePaddingObject(typeof padding !== "number" ? padding : expandToHashMap(padding, basePlacements));
};
function arrow(_ref) {
  var _state$modifiersData$;
  var state = _ref.state, name = _ref.name, options2 = _ref.options;
  var arrowElement = state.elements.arrow;
  var popperOffsets2 = state.modifiersData.popperOffsets;
  var basePlacement = getBasePlacement(state.placement);
  var axis = getMainAxisFromPlacement(basePlacement);
  var isVertical = [left, right].indexOf(basePlacement) >= 0;
  var len = isVertical ? "height" : "width";
  if (!arrowElement || !popperOffsets2) {
    return;
  }
  var paddingObject = toPaddingObject(options2.padding, state);
  var arrowRect = getLayoutRect(arrowElement);
  var minProp = axis === "y" ? top : left;
  var maxProp = axis === "y" ? bottom : right;
  var endDiff = state.rects.reference[len] + state.rects.reference[axis] - popperOffsets2[axis] - state.rects.popper[len];
  var startDiff = popperOffsets2[axis] - state.rects.reference[axis];
  var arrowOffsetParent = getOffsetParent(arrowElement);
  var clientSize = arrowOffsetParent ? axis === "y" ? arrowOffsetParent.clientHeight || 0 : arrowOffsetParent.clientWidth || 0 : 0;
  var centerToReference = endDiff / 2 - startDiff / 2;
  var min2 = paddingObject[minProp];
  var max2 = clientSize - arrowRect[len] - paddingObject[maxProp];
  var center = clientSize / 2 - arrowRect[len] / 2 + centerToReference;
  var offset2 = within(min2, center, max2);
  var axisProp = axis;
  state.modifiersData[name] = (_state$modifiersData$ = {}, _state$modifiersData$[axisProp] = offset2, _state$modifiersData$.centerOffset = offset2 - center, _state$modifiersData$);
}
function effect2(_ref2) {
  var state = _ref2.state, options2 = _ref2.options;
  var _options$element = options2.element, arrowElement = _options$element === void 0 ? "[data-popper-arrow]" : _options$element;
  if (arrowElement == null) {
    return;
  }
  if (typeof arrowElement === "string") {
    arrowElement = state.elements.popper.querySelector(arrowElement);
    if (!arrowElement) {
      return;
    }
  }
  if (true) {
    if (!isHTMLElement(arrowElement)) {
      console.error(['Popper: "arrow" element must be an HTMLElement (not an SVGElement).', "To use an SVG arrow, wrap it in an HTMLElement that will be used as", "the arrow."].join(" "));
    }
  }
  if (!contains(state.elements.popper, arrowElement)) {
    if (true) {
      console.error(['Popper: "arrow" modifier\'s `element` must be a child of the popper', "element."].join(" "));
    }
    return;
  }
  state.elements.arrow = arrowElement;
}
var arrow_default = {
  name: "arrow",
  enabled: true,
  phase: "main",
  fn: arrow,
  effect: effect2,
  requires: ["popperOffsets"],
  requiresIfExists: ["preventOverflow"]
};

// node_modules/@popperjs/core/lib/utils/getVariation.js
function getVariation(placement) {
  return placement.split("-")[1];
}

// node_modules/@popperjs/core/lib/modifiers/computeStyles.js
var unsetSides = {
  top: "auto",
  right: "auto",
  bottom: "auto",
  left: "auto"
};
function roundOffsetsByDPR(_ref) {
  var x = _ref.x, y = _ref.y;
  var win = window;
  var dpr = win.devicePixelRatio || 1;
  return {
    x: round(x * dpr) / dpr || 0,
    y: round(y * dpr) / dpr || 0
  };
}
function mapToStyles(_ref2) {
  var _Object$assign2;
  var popper2 = _ref2.popper, popperRect = _ref2.popperRect, placement = _ref2.placement, variation = _ref2.variation, offsets = _ref2.offsets, position = _ref2.position, gpuAcceleration = _ref2.gpuAcceleration, adaptive = _ref2.adaptive, roundOffsets = _ref2.roundOffsets, isFixed = _ref2.isFixed;
  var _offsets$x = offsets.x, x = _offsets$x === void 0 ? 0 : _offsets$x, _offsets$y = offsets.y, y = _offsets$y === void 0 ? 0 : _offsets$y;
  var _ref3 = typeof roundOffsets === "function" ? roundOffsets({
    x,
    y
  }) : {
    x,
    y
  };
  x = _ref3.x;
  y = _ref3.y;
  var hasX = offsets.hasOwnProperty("x");
  var hasY = offsets.hasOwnProperty("y");
  var sideX = left;
  var sideY = top;
  var win = window;
  if (adaptive) {
    var offsetParent = getOffsetParent(popper2);
    var heightProp = "clientHeight";
    var widthProp = "clientWidth";
    if (offsetParent === getWindow(popper2)) {
      offsetParent = getDocumentElement(popper2);
      if (getComputedStyle(offsetParent).position !== "static" && position === "absolute") {
        heightProp = "scrollHeight";
        widthProp = "scrollWidth";
      }
    }
    offsetParent = offsetParent;
    if (placement === top || (placement === left || placement === right) && variation === end) {
      sideY = bottom;
      var offsetY = isFixed && offsetParent === win && win.visualViewport ? win.visualViewport.height : offsetParent[heightProp];
      y -= offsetY - popperRect.height;
      y *= gpuAcceleration ? 1 : -1;
    }
    if (placement === left || (placement === top || placement === bottom) && variation === end) {
      sideX = right;
      var offsetX = isFixed && offsetParent === win && win.visualViewport ? win.visualViewport.width : offsetParent[widthProp];
      x -= offsetX - popperRect.width;
      x *= gpuAcceleration ? 1 : -1;
    }
  }
  var commonStyles = Object.assign({
    position
  }, adaptive && unsetSides);
  var _ref4 = roundOffsets === true ? roundOffsetsByDPR({
    x,
    y
  }) : {
    x,
    y
  };
  x = _ref4.x;
  y = _ref4.y;
  if (gpuAcceleration) {
    var _Object$assign;
    return Object.assign({}, commonStyles, (_Object$assign = {}, _Object$assign[sideY] = hasY ? "0" : "", _Object$assign[sideX] = hasX ? "0" : "", _Object$assign.transform = (win.devicePixelRatio || 1) <= 1 ? "translate(" + x + "px, " + y + "px)" : "translate3d(" + x + "px, " + y + "px, 0)", _Object$assign));
  }
  return Object.assign({}, commonStyles, (_Object$assign2 = {}, _Object$assign2[sideY] = hasY ? y + "px" : "", _Object$assign2[sideX] = hasX ? x + "px" : "", _Object$assign2.transform = "", _Object$assign2));
}
function computeStyles(_ref5) {
  var state = _ref5.state, options2 = _ref5.options;
  var _options$gpuAccelerat = options2.gpuAcceleration, gpuAcceleration = _options$gpuAccelerat === void 0 ? true : _options$gpuAccelerat, _options$adaptive = options2.adaptive, adaptive = _options$adaptive === void 0 ? true : _options$adaptive, _options$roundOffsets = options2.roundOffsets, roundOffsets = _options$roundOffsets === void 0 ? true : _options$roundOffsets;
  if (true) {
    var transitionProperty = getComputedStyle(state.elements.popper).transitionProperty || "";
    if (adaptive && ["transform", "top", "right", "bottom", "left"].some(function(property) {
      return transitionProperty.indexOf(property) >= 0;
    })) {
      console.warn(["Popper: Detected CSS transitions on at least one of the following", 'CSS properties: "transform", "top", "right", "bottom", "left".', "\n\n", 'Disable the "computeStyles" modifier\'s `adaptive` option to allow', "for smooth transitions, or remove these properties from the CSS", "transition declaration on the popper element if only transitioning", "opacity or background-color for example.", "\n\n", "We recommend using the popper element as a wrapper around an inner", "element that can have any CSS property transitioned for animations."].join(" "));
    }
  }
  var commonStyles = {
    placement: getBasePlacement(state.placement),
    variation: getVariation(state.placement),
    popper: state.elements.popper,
    popperRect: state.rects.popper,
    gpuAcceleration,
    isFixed: state.options.strategy === "fixed"
  };
  if (state.modifiersData.popperOffsets != null) {
    state.styles.popper = Object.assign({}, state.styles.popper, mapToStyles(Object.assign({}, commonStyles, {
      offsets: state.modifiersData.popperOffsets,
      position: state.options.strategy,
      adaptive,
      roundOffsets
    })));
  }
  if (state.modifiersData.arrow != null) {
    state.styles.arrow = Object.assign({}, state.styles.arrow, mapToStyles(Object.assign({}, commonStyles, {
      offsets: state.modifiersData.arrow,
      position: "absolute",
      adaptive: false,
      roundOffsets
    })));
  }
  state.attributes.popper = Object.assign({}, state.attributes.popper, {
    "data-popper-placement": state.placement
  });
}
var computeStyles_default = {
  name: "computeStyles",
  enabled: true,
  phase: "beforeWrite",
  fn: computeStyles,
  data: {}
};

// node_modules/@popperjs/core/lib/modifiers/eventListeners.js
var passive = {
  passive: true
};
function effect3(_ref) {
  var state = _ref.state, instance = _ref.instance, options2 = _ref.options;
  var _options$scroll = options2.scroll, scroll = _options$scroll === void 0 ? true : _options$scroll, _options$resize = options2.resize, resize = _options$resize === void 0 ? true : _options$resize;
  var window2 = getWindow(state.elements.popper);
  var scrollParents = [].concat(state.scrollParents.reference, state.scrollParents.popper);
  if (scroll) {
    scrollParents.forEach(function(scrollParent) {
      scrollParent.addEventListener("scroll", instance.update, passive);
    });
  }
  if (resize) {
    window2.addEventListener("resize", instance.update, passive);
  }
  return function() {
    if (scroll) {
      scrollParents.forEach(function(scrollParent) {
        scrollParent.removeEventListener("scroll", instance.update, passive);
      });
    }
    if (resize) {
      window2.removeEventListener("resize", instance.update, passive);
    }
  };
}
var eventListeners_default = {
  name: "eventListeners",
  enabled: true,
  phase: "write",
  fn: function fn() {
  },
  effect: effect3,
  data: {}
};

// node_modules/@popperjs/core/lib/utils/getOppositePlacement.js
var hash = {
  left: "right",
  right: "left",
  bottom: "top",
  top: "bottom"
};
function getOppositePlacement(placement) {
  return placement.replace(/left|right|bottom|top/g, function(matched) {
    return hash[matched];
  });
}

// node_modules/@popperjs/core/lib/utils/getOppositeVariationPlacement.js
var hash2 = {
  start: "end",
  end: "start"
};
function getOppositeVariationPlacement(placement) {
  return placement.replace(/start|end/g, function(matched) {
    return hash2[matched];
  });
}

// node_modules/@popperjs/core/lib/dom-utils/getWindowScroll.js
function getWindowScroll(node) {
  var win = getWindow(node);
  var scrollLeft = win.pageXOffset;
  var scrollTop = win.pageYOffset;
  return {
    scrollLeft,
    scrollTop
  };
}

// node_modules/@popperjs/core/lib/dom-utils/getWindowScrollBarX.js
function getWindowScrollBarX(element) {
  return getBoundingClientRect(getDocumentElement(element)).left + getWindowScroll(element).scrollLeft;
}

// node_modules/@popperjs/core/lib/dom-utils/getViewportRect.js
function getViewportRect(element, strategy) {
  var win = getWindow(element);
  var html = getDocumentElement(element);
  var visualViewport = win.visualViewport;
  var width = html.clientWidth;
  var height = html.clientHeight;
  var x = 0;
  var y = 0;
  if (visualViewport) {
    width = visualViewport.width;
    height = visualViewport.height;
    var layoutViewport = isLayoutViewport();
    if (layoutViewport || !layoutViewport && strategy === "fixed") {
      x = visualViewport.offsetLeft;
      y = visualViewport.offsetTop;
    }
  }
  return {
    width,
    height,
    x: x + getWindowScrollBarX(element),
    y
  };
}

// node_modules/@popperjs/core/lib/dom-utils/getDocumentRect.js
function getDocumentRect(element) {
  var _element$ownerDocumen;
  var html = getDocumentElement(element);
  var winScroll = getWindowScroll(element);
  var body = (_element$ownerDocumen = element.ownerDocument) == null ? void 0 : _element$ownerDocumen.body;
  var width = max(html.scrollWidth, html.clientWidth, body ? body.scrollWidth : 0, body ? body.clientWidth : 0);
  var height = max(html.scrollHeight, html.clientHeight, body ? body.scrollHeight : 0, body ? body.clientHeight : 0);
  var x = -winScroll.scrollLeft + getWindowScrollBarX(element);
  var y = -winScroll.scrollTop;
  if (getComputedStyle(body || html).direction === "rtl") {
    x += max(html.clientWidth, body ? body.clientWidth : 0) - width;
  }
  return {
    width,
    height,
    x,
    y
  };
}

// node_modules/@popperjs/core/lib/dom-utils/isScrollParent.js
function isScrollParent(element) {
  var _getComputedStyle = getComputedStyle(element), overflow = _getComputedStyle.overflow, overflowX = _getComputedStyle.overflowX, overflowY = _getComputedStyle.overflowY;
  return /auto|scroll|overlay|hidden/.test(overflow + overflowY + overflowX);
}

// node_modules/@popperjs/core/lib/dom-utils/getScrollParent.js
function getScrollParent(node) {
  if (["html", "body", "#document"].indexOf(getNodeName(node)) >= 0) {
    return node.ownerDocument.body;
  }
  if (isHTMLElement(node) && isScrollParent(node)) {
    return node;
  }
  return getScrollParent(getParentNode(node));
}

// node_modules/@popperjs/core/lib/dom-utils/listScrollParents.js
function listScrollParents(element, list) {
  var _element$ownerDocumen;
  if (list === void 0) {
    list = [];
  }
  var scrollParent = getScrollParent(element);
  var isBody = scrollParent === ((_element$ownerDocumen = element.ownerDocument) == null ? void 0 : _element$ownerDocumen.body);
  var win = getWindow(scrollParent);
  var target = isBody ? [win].concat(win.visualViewport || [], isScrollParent(scrollParent) ? scrollParent : []) : scrollParent;
  var updatedList = list.concat(target);
  return isBody ? updatedList : updatedList.concat(listScrollParents(getParentNode(target)));
}

// node_modules/@popperjs/core/lib/utils/rectToClientRect.js
function rectToClientRect(rect) {
  return Object.assign({}, rect, {
    left: rect.x,
    top: rect.y,
    right: rect.x + rect.width,
    bottom: rect.y + rect.height
  });
}

// node_modules/@popperjs/core/lib/dom-utils/getClippingRect.js
function getInnerBoundingClientRect(element, strategy) {
  var rect = getBoundingClientRect(element, false, strategy === "fixed");
  rect.top = rect.top + element.clientTop;
  rect.left = rect.left + element.clientLeft;
  rect.bottom = rect.top + element.clientHeight;
  rect.right = rect.left + element.clientWidth;
  rect.width = element.clientWidth;
  rect.height = element.clientHeight;
  rect.x = rect.left;
  rect.y = rect.top;
  return rect;
}
function getClientRectFromMixedType(element, clippingParent, strategy) {
  return clippingParent === viewport ? rectToClientRect(getViewportRect(element, strategy)) : isElement(clippingParent) ? getInnerBoundingClientRect(clippingParent, strategy) : rectToClientRect(getDocumentRect(getDocumentElement(element)));
}
function getClippingParents(element) {
  var clippingParents2 = listScrollParents(getParentNode(element));
  var canEscapeClipping = ["absolute", "fixed"].indexOf(getComputedStyle(element).position) >= 0;
  var clipperElement = canEscapeClipping && isHTMLElement(element) ? getOffsetParent(element) : element;
  if (!isElement(clipperElement)) {
    return [];
  }
  return clippingParents2.filter(function(clippingParent) {
    return isElement(clippingParent) && contains(clippingParent, clipperElement) && getNodeName(clippingParent) !== "body";
  });
}
function getClippingRect(element, boundary, rootBoundary, strategy) {
  var mainClippingParents = boundary === "clippingParents" ? getClippingParents(element) : [].concat(boundary);
  var clippingParents2 = [].concat(mainClippingParents, [rootBoundary]);
  var firstClippingParent = clippingParents2[0];
  var clippingRect = clippingParents2.reduce(function(accRect, clippingParent) {
    var rect = getClientRectFromMixedType(element, clippingParent, strategy);
    accRect.top = max(rect.top, accRect.top);
    accRect.right = min(rect.right, accRect.right);
    accRect.bottom = min(rect.bottom, accRect.bottom);
    accRect.left = max(rect.left, accRect.left);
    return accRect;
  }, getClientRectFromMixedType(element, firstClippingParent, strategy));
  clippingRect.width = clippingRect.right - clippingRect.left;
  clippingRect.height = clippingRect.bottom - clippingRect.top;
  clippingRect.x = clippingRect.left;
  clippingRect.y = clippingRect.top;
  return clippingRect;
}

// node_modules/@popperjs/core/lib/utils/computeOffsets.js
function computeOffsets(_ref) {
  var reference2 = _ref.reference, element = _ref.element, placement = _ref.placement;
  var basePlacement = placement ? getBasePlacement(placement) : null;
  var variation = placement ? getVariation(placement) : null;
  var commonX = reference2.x + reference2.width / 2 - element.width / 2;
  var commonY = reference2.y + reference2.height / 2 - element.height / 2;
  var offsets;
  switch (basePlacement) {
    case top:
      offsets = {
        x: commonX,
        y: reference2.y - element.height
      };
      break;
    case bottom:
      offsets = {
        x: commonX,
        y: reference2.y + reference2.height
      };
      break;
    case right:
      offsets = {
        x: reference2.x + reference2.width,
        y: commonY
      };
      break;
    case left:
      offsets = {
        x: reference2.x - element.width,
        y: commonY
      };
      break;
    default:
      offsets = {
        x: reference2.x,
        y: reference2.y
      };
  }
  var mainAxis = basePlacement ? getMainAxisFromPlacement(basePlacement) : null;
  if (mainAxis != null) {
    var len = mainAxis === "y" ? "height" : "width";
    switch (variation) {
      case start:
        offsets[mainAxis] = offsets[mainAxis] - (reference2[len] / 2 - element[len] / 2);
        break;
      case end:
        offsets[mainAxis] = offsets[mainAxis] + (reference2[len] / 2 - element[len] / 2);
        break;
      default:
    }
  }
  return offsets;
}

// node_modules/@popperjs/core/lib/utils/detectOverflow.js
function detectOverflow(state, options2) {
  if (options2 === void 0) {
    options2 = {};
  }
  var _options = options2, _options$placement = _options.placement, placement = _options$placement === void 0 ? state.placement : _options$placement, _options$strategy = _options.strategy, strategy = _options$strategy === void 0 ? state.strategy : _options$strategy, _options$boundary = _options.boundary, boundary = _options$boundary === void 0 ? clippingParents : _options$boundary, _options$rootBoundary = _options.rootBoundary, rootBoundary = _options$rootBoundary === void 0 ? viewport : _options$rootBoundary, _options$elementConte = _options.elementContext, elementContext = _options$elementConte === void 0 ? popper : _options$elementConte, _options$altBoundary = _options.altBoundary, altBoundary = _options$altBoundary === void 0 ? false : _options$altBoundary, _options$padding = _options.padding, padding = _options$padding === void 0 ? 0 : _options$padding;
  var paddingObject = mergePaddingObject(typeof padding !== "number" ? padding : expandToHashMap(padding, basePlacements));
  var altContext = elementContext === popper ? reference : popper;
  var popperRect = state.rects.popper;
  var element = state.elements[altBoundary ? altContext : elementContext];
  var clippingClientRect = getClippingRect(isElement(element) ? element : element.contextElement || getDocumentElement(state.elements.popper), boundary, rootBoundary, strategy);
  var referenceClientRect = getBoundingClientRect(state.elements.reference);
  var popperOffsets2 = computeOffsets({
    reference: referenceClientRect,
    element: popperRect,
    strategy: "absolute",
    placement
  });
  var popperClientRect = rectToClientRect(Object.assign({}, popperRect, popperOffsets2));
  var elementClientRect = elementContext === popper ? popperClientRect : referenceClientRect;
  var overflowOffsets = {
    top: clippingClientRect.top - elementClientRect.top + paddingObject.top,
    bottom: elementClientRect.bottom - clippingClientRect.bottom + paddingObject.bottom,
    left: clippingClientRect.left - elementClientRect.left + paddingObject.left,
    right: elementClientRect.right - clippingClientRect.right + paddingObject.right
  };
  var offsetData = state.modifiersData.offset;
  if (elementContext === popper && offsetData) {
    var offset2 = offsetData[placement];
    Object.keys(overflowOffsets).forEach(function(key) {
      var multiply = [right, bottom].indexOf(key) >= 0 ? 1 : -1;
      var axis = [top, bottom].indexOf(key) >= 0 ? "y" : "x";
      overflowOffsets[key] += offset2[axis] * multiply;
    });
  }
  return overflowOffsets;
}

// node_modules/@popperjs/core/lib/utils/computeAutoPlacement.js
function computeAutoPlacement(state, options2) {
  if (options2 === void 0) {
    options2 = {};
  }
  var _options = options2, placement = _options.placement, boundary = _options.boundary, rootBoundary = _options.rootBoundary, padding = _options.padding, flipVariations = _options.flipVariations, _options$allowedAutoP = _options.allowedAutoPlacements, allowedAutoPlacements = _options$allowedAutoP === void 0 ? placements : _options$allowedAutoP;
  var variation = getVariation(placement);
  var placements2 = variation ? flipVariations ? variationPlacements : variationPlacements.filter(function(placement2) {
    return getVariation(placement2) === variation;
  }) : basePlacements;
  var allowedPlacements = placements2.filter(function(placement2) {
    return allowedAutoPlacements.indexOf(placement2) >= 0;
  });
  if (allowedPlacements.length === 0) {
    allowedPlacements = placements2;
    if (true) {
      console.error(["Popper: The `allowedAutoPlacements` option did not allow any", "placements. Ensure the `placement` option matches the variation", "of the allowed placements.", 'For example, "auto" cannot be used to allow "bottom-start".', 'Use "auto-start" instead.'].join(" "));
    }
  }
  var overflows = allowedPlacements.reduce(function(acc, placement2) {
    acc[placement2] = detectOverflow(state, {
      placement: placement2,
      boundary,
      rootBoundary,
      padding
    })[getBasePlacement(placement2)];
    return acc;
  }, {});
  return Object.keys(overflows).sort(function(a, b) {
    return overflows[a] - overflows[b];
  });
}

// node_modules/@popperjs/core/lib/modifiers/flip.js
function getExpandedFallbackPlacements(placement) {
  if (getBasePlacement(placement) === auto) {
    return [];
  }
  var oppositePlacement = getOppositePlacement(placement);
  return [getOppositeVariationPlacement(placement), oppositePlacement, getOppositeVariationPlacement(oppositePlacement)];
}
function flip(_ref) {
  var state = _ref.state, options2 = _ref.options, name = _ref.name;
  if (state.modifiersData[name]._skip) {
    return;
  }
  var _options$mainAxis = options2.mainAxis, checkMainAxis = _options$mainAxis === void 0 ? true : _options$mainAxis, _options$altAxis = options2.altAxis, checkAltAxis = _options$altAxis === void 0 ? true : _options$altAxis, specifiedFallbackPlacements = options2.fallbackPlacements, padding = options2.padding, boundary = options2.boundary, rootBoundary = options2.rootBoundary, altBoundary = options2.altBoundary, _options$flipVariatio = options2.flipVariations, flipVariations = _options$flipVariatio === void 0 ? true : _options$flipVariatio, allowedAutoPlacements = options2.allowedAutoPlacements;
  var preferredPlacement = state.options.placement;
  var basePlacement = getBasePlacement(preferredPlacement);
  var isBasePlacement = basePlacement === preferredPlacement;
  var fallbackPlacements = specifiedFallbackPlacements || (isBasePlacement || !flipVariations ? [getOppositePlacement(preferredPlacement)] : getExpandedFallbackPlacements(preferredPlacement));
  var placements2 = [preferredPlacement].concat(fallbackPlacements).reduce(function(acc, placement2) {
    return acc.concat(getBasePlacement(placement2) === auto ? computeAutoPlacement(state, {
      placement: placement2,
      boundary,
      rootBoundary,
      padding,
      flipVariations,
      allowedAutoPlacements
    }) : placement2);
  }, []);
  var referenceRect = state.rects.reference;
  var popperRect = state.rects.popper;
  var checksMap = /* @__PURE__ */ new Map();
  var makeFallbackChecks = true;
  var firstFittingPlacement = placements2[0];
  for (var i = 0; i < placements2.length; i++) {
    var placement = placements2[i];
    var _basePlacement = getBasePlacement(placement);
    var isStartVariation = getVariation(placement) === start;
    var isVertical = [top, bottom].indexOf(_basePlacement) >= 0;
    var len = isVertical ? "width" : "height";
    var overflow = detectOverflow(state, {
      placement,
      boundary,
      rootBoundary,
      altBoundary,
      padding
    });
    var mainVariationSide = isVertical ? isStartVariation ? right : left : isStartVariation ? bottom : top;
    if (referenceRect[len] > popperRect[len]) {
      mainVariationSide = getOppositePlacement(mainVariationSide);
    }
    var altVariationSide = getOppositePlacement(mainVariationSide);
    var checks = [];
    if (checkMainAxis) {
      checks.push(overflow[_basePlacement] <= 0);
    }
    if (checkAltAxis) {
      checks.push(overflow[mainVariationSide] <= 0, overflow[altVariationSide] <= 0);
    }
    if (checks.every(function(check) {
      return check;
    })) {
      firstFittingPlacement = placement;
      makeFallbackChecks = false;
      break;
    }
    checksMap.set(placement, checks);
  }
  if (makeFallbackChecks) {
    var numberOfChecks = flipVariations ? 3 : 1;
    var _loop = function _loop2(_i2) {
      var fittingPlacement = placements2.find(function(placement2) {
        var checks2 = checksMap.get(placement2);
        if (checks2) {
          return checks2.slice(0, _i2).every(function(check) {
            return check;
          });
        }
      });
      if (fittingPlacement) {
        firstFittingPlacement = fittingPlacement;
        return "break";
      }
    };
    for (var _i = numberOfChecks; _i > 0; _i--) {
      var _ret = _loop(_i);
      if (_ret === "break")
        break;
    }
  }
  if (state.placement !== firstFittingPlacement) {
    state.modifiersData[name]._skip = true;
    state.placement = firstFittingPlacement;
    state.reset = true;
  }
}
var flip_default = {
  name: "flip",
  enabled: true,
  phase: "main",
  fn: flip,
  requiresIfExists: ["offset"],
  data: {
    _skip: false
  }
};

// node_modules/@popperjs/core/lib/modifiers/hide.js
function getSideOffsets(overflow, rect, preventedOffsets) {
  if (preventedOffsets === void 0) {
    preventedOffsets = {
      x: 0,
      y: 0
    };
  }
  return {
    top: overflow.top - rect.height - preventedOffsets.y,
    right: overflow.right - rect.width + preventedOffsets.x,
    bottom: overflow.bottom - rect.height + preventedOffsets.y,
    left: overflow.left - rect.width - preventedOffsets.x
  };
}
function isAnySideFullyClipped(overflow) {
  return [top, right, bottom, left].some(function(side) {
    return overflow[side] >= 0;
  });
}
function hide(_ref) {
  var state = _ref.state, name = _ref.name;
  var referenceRect = state.rects.reference;
  var popperRect = state.rects.popper;
  var preventedOffsets = state.modifiersData.preventOverflow;
  var referenceOverflow = detectOverflow(state, {
    elementContext: "reference"
  });
  var popperAltOverflow = detectOverflow(state, {
    altBoundary: true
  });
  var referenceClippingOffsets = getSideOffsets(referenceOverflow, referenceRect);
  var popperEscapeOffsets = getSideOffsets(popperAltOverflow, popperRect, preventedOffsets);
  var isReferenceHidden = isAnySideFullyClipped(referenceClippingOffsets);
  var hasPopperEscaped = isAnySideFullyClipped(popperEscapeOffsets);
  state.modifiersData[name] = {
    referenceClippingOffsets,
    popperEscapeOffsets,
    isReferenceHidden,
    hasPopperEscaped
  };
  state.attributes.popper = Object.assign({}, state.attributes.popper, {
    "data-popper-reference-hidden": isReferenceHidden,
    "data-popper-escaped": hasPopperEscaped
  });
}
var hide_default = {
  name: "hide",
  enabled: true,
  phase: "main",
  requiresIfExists: ["preventOverflow"],
  fn: hide
};

// node_modules/@popperjs/core/lib/modifiers/offset.js
function distanceAndSkiddingToXY(placement, rects, offset2) {
  var basePlacement = getBasePlacement(placement);
  var invertDistance = [left, top].indexOf(basePlacement) >= 0 ? -1 : 1;
  var _ref = typeof offset2 === "function" ? offset2(Object.assign({}, rects, {
    placement
  })) : offset2, skidding = _ref[0], distance = _ref[1];
  skidding = skidding || 0;
  distance = (distance || 0) * invertDistance;
  return [left, right].indexOf(basePlacement) >= 0 ? {
    x: distance,
    y: skidding
  } : {
    x: skidding,
    y: distance
  };
}
function offset(_ref2) {
  var state = _ref2.state, options2 = _ref2.options, name = _ref2.name;
  var _options$offset = options2.offset, offset2 = _options$offset === void 0 ? [0, 0] : _options$offset;
  var data = placements.reduce(function(acc, placement) {
    acc[placement] = distanceAndSkiddingToXY(placement, state.rects, offset2);
    return acc;
  }, {});
  var _data$state$placement = data[state.placement], x = _data$state$placement.x, y = _data$state$placement.y;
  if (state.modifiersData.popperOffsets != null) {
    state.modifiersData.popperOffsets.x += x;
    state.modifiersData.popperOffsets.y += y;
  }
  state.modifiersData[name] = data;
}
var offset_default = {
  name: "offset",
  enabled: true,
  phase: "main",
  requires: ["popperOffsets"],
  fn: offset
};

// node_modules/@popperjs/core/lib/modifiers/popperOffsets.js
function popperOffsets(_ref) {
  var state = _ref.state, name = _ref.name;
  state.modifiersData[name] = computeOffsets({
    reference: state.rects.reference,
    element: state.rects.popper,
    strategy: "absolute",
    placement: state.placement
  });
}
var popperOffsets_default = {
  name: "popperOffsets",
  enabled: true,
  phase: "read",
  fn: popperOffsets,
  data: {}
};

// node_modules/@popperjs/core/lib/utils/getAltAxis.js
function getAltAxis(axis) {
  return axis === "x" ? "y" : "x";
}

// node_modules/@popperjs/core/lib/modifiers/preventOverflow.js
function preventOverflow(_ref) {
  var state = _ref.state, options2 = _ref.options, name = _ref.name;
  var _options$mainAxis = options2.mainAxis, checkMainAxis = _options$mainAxis === void 0 ? true : _options$mainAxis, _options$altAxis = options2.altAxis, checkAltAxis = _options$altAxis === void 0 ? false : _options$altAxis, boundary = options2.boundary, rootBoundary = options2.rootBoundary, altBoundary = options2.altBoundary, padding = options2.padding, _options$tether = options2.tether, tether = _options$tether === void 0 ? true : _options$tether, _options$tetherOffset = options2.tetherOffset, tetherOffset = _options$tetherOffset === void 0 ? 0 : _options$tetherOffset;
  var overflow = detectOverflow(state, {
    boundary,
    rootBoundary,
    padding,
    altBoundary
  });
  var basePlacement = getBasePlacement(state.placement);
  var variation = getVariation(state.placement);
  var isBasePlacement = !variation;
  var mainAxis = getMainAxisFromPlacement(basePlacement);
  var altAxis = getAltAxis(mainAxis);
  var popperOffsets2 = state.modifiersData.popperOffsets;
  var referenceRect = state.rects.reference;
  var popperRect = state.rects.popper;
  var tetherOffsetValue = typeof tetherOffset === "function" ? tetherOffset(Object.assign({}, state.rects, {
    placement: state.placement
  })) : tetherOffset;
  var normalizedTetherOffsetValue = typeof tetherOffsetValue === "number" ? {
    mainAxis: tetherOffsetValue,
    altAxis: tetherOffsetValue
  } : Object.assign({
    mainAxis: 0,
    altAxis: 0
  }, tetherOffsetValue);
  var offsetModifierState = state.modifiersData.offset ? state.modifiersData.offset[state.placement] : null;
  var data = {
    x: 0,
    y: 0
  };
  if (!popperOffsets2) {
    return;
  }
  if (checkMainAxis) {
    var _offsetModifierState$;
    var mainSide = mainAxis === "y" ? top : left;
    var altSide = mainAxis === "y" ? bottom : right;
    var len = mainAxis === "y" ? "height" : "width";
    var offset2 = popperOffsets2[mainAxis];
    var min2 = offset2 + overflow[mainSide];
    var max2 = offset2 - overflow[altSide];
    var additive = tether ? -popperRect[len] / 2 : 0;
    var minLen = variation === start ? referenceRect[len] : popperRect[len];
    var maxLen = variation === start ? -popperRect[len] : -referenceRect[len];
    var arrowElement = state.elements.arrow;
    var arrowRect = tether && arrowElement ? getLayoutRect(arrowElement) : {
      width: 0,
      height: 0
    };
    var arrowPaddingObject = state.modifiersData["arrow#persistent"] ? state.modifiersData["arrow#persistent"].padding : getFreshSideObject();
    var arrowPaddingMin = arrowPaddingObject[mainSide];
    var arrowPaddingMax = arrowPaddingObject[altSide];
    var arrowLen = within(0, referenceRect[len], arrowRect[len]);
    var minOffset = isBasePlacement ? referenceRect[len] / 2 - additive - arrowLen - arrowPaddingMin - normalizedTetherOffsetValue.mainAxis : minLen - arrowLen - arrowPaddingMin - normalizedTetherOffsetValue.mainAxis;
    var maxOffset = isBasePlacement ? -referenceRect[len] / 2 + additive + arrowLen + arrowPaddingMax + normalizedTetherOffsetValue.mainAxis : maxLen + arrowLen + arrowPaddingMax + normalizedTetherOffsetValue.mainAxis;
    var arrowOffsetParent = state.elements.arrow && getOffsetParent(state.elements.arrow);
    var clientOffset = arrowOffsetParent ? mainAxis === "y" ? arrowOffsetParent.clientTop || 0 : arrowOffsetParent.clientLeft || 0 : 0;
    var offsetModifierValue = (_offsetModifierState$ = offsetModifierState == null ? void 0 : offsetModifierState[mainAxis]) != null ? _offsetModifierState$ : 0;
    var tetherMin = offset2 + minOffset - offsetModifierValue - clientOffset;
    var tetherMax = offset2 + maxOffset - offsetModifierValue;
    var preventedOffset = within(tether ? min(min2, tetherMin) : min2, offset2, tether ? max(max2, tetherMax) : max2);
    popperOffsets2[mainAxis] = preventedOffset;
    data[mainAxis] = preventedOffset - offset2;
  }
  if (checkAltAxis) {
    var _offsetModifierState$2;
    var _mainSide = mainAxis === "x" ? top : left;
    var _altSide = mainAxis === "x" ? bottom : right;
    var _offset = popperOffsets2[altAxis];
    var _len = altAxis === "y" ? "height" : "width";
    var _min = _offset + overflow[_mainSide];
    var _max = _offset - overflow[_altSide];
    var isOriginSide = [top, left].indexOf(basePlacement) !== -1;
    var _offsetModifierValue = (_offsetModifierState$2 = offsetModifierState == null ? void 0 : offsetModifierState[altAxis]) != null ? _offsetModifierState$2 : 0;
    var _tetherMin = isOriginSide ? _min : _offset - referenceRect[_len] - popperRect[_len] - _offsetModifierValue + normalizedTetherOffsetValue.altAxis;
    var _tetherMax = isOriginSide ? _offset + referenceRect[_len] + popperRect[_len] - _offsetModifierValue - normalizedTetherOffsetValue.altAxis : _max;
    var _preventedOffset = tether && isOriginSide ? withinMaxClamp(_tetherMin, _offset, _tetherMax) : within(tether ? _tetherMin : _min, _offset, tether ? _tetherMax : _max);
    popperOffsets2[altAxis] = _preventedOffset;
    data[altAxis] = _preventedOffset - _offset;
  }
  state.modifiersData[name] = data;
}
var preventOverflow_default = {
  name: "preventOverflow",
  enabled: true,
  phase: "main",
  fn: preventOverflow,
  requiresIfExists: ["offset"]
};

// node_modules/@popperjs/core/lib/dom-utils/getHTMLElementScroll.js
function getHTMLElementScroll(element) {
  return {
    scrollLeft: element.scrollLeft,
    scrollTop: element.scrollTop
  };
}

// node_modules/@popperjs/core/lib/dom-utils/getNodeScroll.js
function getNodeScroll(node) {
  if (node === getWindow(node) || !isHTMLElement(node)) {
    return getWindowScroll(node);
  } else {
    return getHTMLElementScroll(node);
  }
}

// node_modules/@popperjs/core/lib/dom-utils/getCompositeRect.js
function isElementScaled(element) {
  var rect = element.getBoundingClientRect();
  var scaleX = round(rect.width) / element.offsetWidth || 1;
  var scaleY = round(rect.height) / element.offsetHeight || 1;
  return scaleX !== 1 || scaleY !== 1;
}
function getCompositeRect(elementOrVirtualElement, offsetParent, isFixed) {
  if (isFixed === void 0) {
    isFixed = false;
  }
  var isOffsetParentAnElement = isHTMLElement(offsetParent);
  var offsetParentIsScaled = isHTMLElement(offsetParent) && isElementScaled(offsetParent);
  var documentElement = getDocumentElement(offsetParent);
  var rect = getBoundingClientRect(elementOrVirtualElement, offsetParentIsScaled, isFixed);
  var scroll = {
    scrollLeft: 0,
    scrollTop: 0
  };
  var offsets = {
    x: 0,
    y: 0
  };
  if (isOffsetParentAnElement || !isOffsetParentAnElement && !isFixed) {
    if (getNodeName(offsetParent) !== "body" || isScrollParent(documentElement)) {
      scroll = getNodeScroll(offsetParent);
    }
    if (isHTMLElement(offsetParent)) {
      offsets = getBoundingClientRect(offsetParent, true);
      offsets.x += offsetParent.clientLeft;
      offsets.y += offsetParent.clientTop;
    } else if (documentElement) {
      offsets.x = getWindowScrollBarX(documentElement);
    }
  }
  return {
    x: rect.left + scroll.scrollLeft - offsets.x,
    y: rect.top + scroll.scrollTop - offsets.y,
    width: rect.width,
    height: rect.height
  };
}

// node_modules/@popperjs/core/lib/utils/orderModifiers.js
function order(modifiers) {
  var map = /* @__PURE__ */ new Map();
  var visited = /* @__PURE__ */ new Set();
  var result = [];
  modifiers.forEach(function(modifier) {
    map.set(modifier.name, modifier);
  });
  function sort(modifier) {
    visited.add(modifier.name);
    var requires = [].concat(modifier.requires || [], modifier.requiresIfExists || []);
    requires.forEach(function(dep) {
      if (!visited.has(dep)) {
        var depModifier = map.get(dep);
        if (depModifier) {
          sort(depModifier);
        }
      }
    });
    result.push(modifier);
  }
  modifiers.forEach(function(modifier) {
    if (!visited.has(modifier.name)) {
      sort(modifier);
    }
  });
  return result;
}
function orderModifiers(modifiers) {
  var orderedModifiers = order(modifiers);
  return modifierPhases.reduce(function(acc, phase) {
    return acc.concat(orderedModifiers.filter(function(modifier) {
      return modifier.phase === phase;
    }));
  }, []);
}

// node_modules/@popperjs/core/lib/utils/debounce.js
function debounce(fn2) {
  var pending;
  return function() {
    if (!pending) {
      pending = new Promise(function(resolve) {
        Promise.resolve().then(function() {
          pending = void 0;
          resolve(fn2());
        });
      });
    }
    return pending;
  };
}

// node_modules/@popperjs/core/lib/utils/format.js
function format(str) {
  for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
    args[_key - 1] = arguments[_key];
  }
  return [].concat(args).reduce(function(p, c) {
    return p.replace(/%s/, c);
  }, str);
}

// node_modules/@popperjs/core/lib/utils/validateModifiers.js
var INVALID_MODIFIER_ERROR = 'Popper: modifier "%s" provided an invalid %s property, expected %s but got %s';
var MISSING_DEPENDENCY_ERROR = 'Popper: modifier "%s" requires "%s", but "%s" modifier is not available';
var VALID_PROPERTIES = ["name", "enabled", "phase", "fn", "effect", "requires", "options"];
function validateModifiers(modifiers) {
  modifiers.forEach(function(modifier) {
    [].concat(Object.keys(modifier), VALID_PROPERTIES).filter(function(value, index, self) {
      return self.indexOf(value) === index;
    }).forEach(function(key) {
      switch (key) {
        case "name":
          if (typeof modifier.name !== "string") {
            console.error(format(INVALID_MODIFIER_ERROR, String(modifier.name), '"name"', '"string"', '"' + String(modifier.name) + '"'));
          }
          break;
        case "enabled":
          if (typeof modifier.enabled !== "boolean") {
            console.error(format(INVALID_MODIFIER_ERROR, modifier.name, '"enabled"', '"boolean"', '"' + String(modifier.enabled) + '"'));
          }
          break;
        case "phase":
          if (modifierPhases.indexOf(modifier.phase) < 0) {
            console.error(format(INVALID_MODIFIER_ERROR, modifier.name, '"phase"', "either " + modifierPhases.join(", "), '"' + String(modifier.phase) + '"'));
          }
          break;
        case "fn":
          if (typeof modifier.fn !== "function") {
            console.error(format(INVALID_MODIFIER_ERROR, modifier.name, '"fn"', '"function"', '"' + String(modifier.fn) + '"'));
          }
          break;
        case "effect":
          if (modifier.effect != null && typeof modifier.effect !== "function") {
            console.error(format(INVALID_MODIFIER_ERROR, modifier.name, '"effect"', '"function"', '"' + String(modifier.fn) + '"'));
          }
          break;
        case "requires":
          if (modifier.requires != null && !Array.isArray(modifier.requires)) {
            console.error(format(INVALID_MODIFIER_ERROR, modifier.name, '"requires"', '"array"', '"' + String(modifier.requires) + '"'));
          }
          break;
        case "requiresIfExists":
          if (!Array.isArray(modifier.requiresIfExists)) {
            console.error(format(INVALID_MODIFIER_ERROR, modifier.name, '"requiresIfExists"', '"array"', '"' + String(modifier.requiresIfExists) + '"'));
          }
          break;
        case "options":
        case "data":
          break;
        default:
          console.error('PopperJS: an invalid property has been provided to the "' + modifier.name + '" modifier, valid properties are ' + VALID_PROPERTIES.map(function(s) {
            return '"' + s + '"';
          }).join(", ") + '; but "' + key + '" was provided.');
      }
      modifier.requires && modifier.requires.forEach(function(requirement) {
        if (modifiers.find(function(mod) {
          return mod.name === requirement;
        }) == null) {
          console.error(format(MISSING_DEPENDENCY_ERROR, String(modifier.name), requirement, requirement));
        }
      });
    });
  });
}

// node_modules/@popperjs/core/lib/utils/uniqueBy.js
function uniqueBy(arr, fn2) {
  var identifiers = /* @__PURE__ */ new Set();
  return arr.filter(function(item) {
    var identifier = fn2(item);
    if (!identifiers.has(identifier)) {
      identifiers.add(identifier);
      return true;
    }
  });
}

// node_modules/@popperjs/core/lib/utils/mergeByName.js
function mergeByName(modifiers) {
  var merged = modifiers.reduce(function(merged2, current) {
    var existing = merged2[current.name];
    merged2[current.name] = existing ? Object.assign({}, existing, current, {
      options: Object.assign({}, existing.options, current.options),
      data: Object.assign({}, existing.data, current.data)
    }) : current;
    return merged2;
  }, {});
  return Object.keys(merged).map(function(key) {
    return merged[key];
  });
}

// node_modules/@popperjs/core/lib/createPopper.js
var INVALID_ELEMENT_ERROR = "Popper: Invalid reference or popper argument provided. They must be either a DOM element or virtual element.";
var INFINITE_LOOP_ERROR = "Popper: An infinite loop in the modifiers cycle has been detected! The cycle has been interrupted to prevent a browser crash.";
var DEFAULT_OPTIONS = {
  placement: "bottom",
  modifiers: [],
  strategy: "absolute"
};
function areValidElements() {
  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
    args[_key] = arguments[_key];
  }
  return !args.some(function(element) {
    return !(element && typeof element.getBoundingClientRect === "function");
  });
}
function popperGenerator(generatorOptions) {
  if (generatorOptions === void 0) {
    generatorOptions = {};
  }
  var _generatorOptions = generatorOptions, _generatorOptions$def = _generatorOptions.defaultModifiers, defaultModifiers2 = _generatorOptions$def === void 0 ? [] : _generatorOptions$def, _generatorOptions$def2 = _generatorOptions.defaultOptions, defaultOptions = _generatorOptions$def2 === void 0 ? DEFAULT_OPTIONS : _generatorOptions$def2;
  return function createPopper2(reference2, popper2, options2) {
    if (options2 === void 0) {
      options2 = defaultOptions;
    }
    var state = {
      placement: "bottom",
      orderedModifiers: [],
      options: Object.assign({}, DEFAULT_OPTIONS, defaultOptions),
      modifiersData: {},
      elements: {
        reference: reference2,
        popper: popper2
      },
      attributes: {},
      styles: {}
    };
    var effectCleanupFns = [];
    var isDestroyed = false;
    var instance = {
      state,
      setOptions: function setOptions(setOptionsAction) {
        var options3 = typeof setOptionsAction === "function" ? setOptionsAction(state.options) : setOptionsAction;
        cleanupModifierEffects();
        state.options = Object.assign({}, defaultOptions, state.options, options3);
        state.scrollParents = {
          reference: isElement(reference2) ? listScrollParents(reference2) : reference2.contextElement ? listScrollParents(reference2.contextElement) : [],
          popper: listScrollParents(popper2)
        };
        var orderedModifiers = orderModifiers(mergeByName([].concat(defaultModifiers2, state.options.modifiers)));
        state.orderedModifiers = orderedModifiers.filter(function(m) {
          return m.enabled;
        });
        if (true) {
          var modifiers = uniqueBy([].concat(orderedModifiers, state.options.modifiers), function(_ref) {
            var name = _ref.name;
            return name;
          });
          validateModifiers(modifiers);
          if (getBasePlacement(state.options.placement) === auto) {
            var flipModifier = state.orderedModifiers.find(function(_ref2) {
              var name = _ref2.name;
              return name === "flip";
            });
            if (!flipModifier) {
              console.error(['Popper: "auto" placements require the "flip" modifier be', "present and enabled to work."].join(" "));
            }
          }
          var _getComputedStyle = getComputedStyle(popper2), marginTop = _getComputedStyle.marginTop, marginRight = _getComputedStyle.marginRight, marginBottom = _getComputedStyle.marginBottom, marginLeft = _getComputedStyle.marginLeft;
          if ([marginTop, marginRight, marginBottom, marginLeft].some(function(margin) {
            return parseFloat(margin);
          })) {
            console.warn(['Popper: CSS "margin" styles cannot be used to apply padding', "between the popper and its reference element or boundary.", "To replicate margin, use the `offset` modifier, as well as", "the `padding` option in the `preventOverflow` and `flip`", "modifiers."].join(" "));
          }
        }
        runModifierEffects();
        return instance.update();
      },
      forceUpdate: function forceUpdate() {
        if (isDestroyed) {
          return;
        }
        var _state$elements = state.elements, reference3 = _state$elements.reference, popper3 = _state$elements.popper;
        if (!areValidElements(reference3, popper3)) {
          if (true) {
            console.error(INVALID_ELEMENT_ERROR);
          }
          return;
        }
        state.rects = {
          reference: getCompositeRect(reference3, getOffsetParent(popper3), state.options.strategy === "fixed"),
          popper: getLayoutRect(popper3)
        };
        state.reset = false;
        state.placement = state.options.placement;
        state.orderedModifiers.forEach(function(modifier) {
          return state.modifiersData[modifier.name] = Object.assign({}, modifier.data);
        });
        var __debug_loops__ = 0;
        for (var index = 0; index < state.orderedModifiers.length; index++) {
          if (true) {
            __debug_loops__ += 1;
            if (__debug_loops__ > 100) {
              console.error(INFINITE_LOOP_ERROR);
              break;
            }
          }
          if (state.reset === true) {
            state.reset = false;
            index = -1;
            continue;
          }
          var _state$orderedModifie = state.orderedModifiers[index], fn2 = _state$orderedModifie.fn, _state$orderedModifie2 = _state$orderedModifie.options, _options = _state$orderedModifie2 === void 0 ? {} : _state$orderedModifie2, name = _state$orderedModifie.name;
          if (typeof fn2 === "function") {
            state = fn2({
              state,
              options: _options,
              name,
              instance
            }) || state;
          }
        }
      },
      update: debounce(function() {
        return new Promise(function(resolve) {
          instance.forceUpdate();
          resolve(state);
        });
      }),
      destroy: function destroy() {
        cleanupModifierEffects();
        isDestroyed = true;
      }
    };
    if (!areValidElements(reference2, popper2)) {
      if (true) {
        console.error(INVALID_ELEMENT_ERROR);
      }
      return instance;
    }
    instance.setOptions(options2).then(function(state2) {
      if (!isDestroyed && options2.onFirstUpdate) {
        options2.onFirstUpdate(state2);
      }
    });
    function runModifierEffects() {
      state.orderedModifiers.forEach(function(_ref3) {
        var name = _ref3.name, _ref3$options = _ref3.options, options3 = _ref3$options === void 0 ? {} : _ref3$options, effect4 = _ref3.effect;
        if (typeof effect4 === "function") {
          var cleanupFn = effect4({
            state,
            name,
            instance,
            options: options3
          });
          var noopFn = function noopFn2() {
          };
          effectCleanupFns.push(cleanupFn || noopFn);
        }
      });
    }
    function cleanupModifierEffects() {
      effectCleanupFns.forEach(function(fn2) {
        return fn2();
      });
      effectCleanupFns = [];
    }
    return instance;
  };
}

// node_modules/@popperjs/core/lib/popper.js
var defaultModifiers = [eventListeners_default, popperOffsets_default, computeStyles_default, applyStyles_default, offset_default, flip_default, preventOverflow_default, arrow_default, hide_default];
var createPopper = /* @__PURE__ */ popperGenerator({
  defaultModifiers
});

// src/suggester/suggest.ts
var wrapAround = (value, size) => {
  return (value % size + size) % size;
};
var Suggest = class {
  constructor(owner, containerEl, scope) {
    this.owner = owner;
    this.containerEl = containerEl;
    containerEl.on("click", ".suggestion-item", this.onSuggestionClick.bind(this));
    containerEl.on("mousemove", ".suggestion-item", this.onSuggestionMouseover.bind(this));
    scope.register([], "ArrowUp", (event) => {
      if (!event.isComposing) {
        this.setSelectedItem(this.selectedItem - 1, true);
        return false;
      }
    });
    scope.register([], "ArrowDown", (event) => {
      if (!event.isComposing) {
        this.setSelectedItem(this.selectedItem + 1, true);
        return false;
      }
    });
    scope.register([], "Enter", (event) => {
      if (!event.isComposing) {
        this.useSelectedItem(event);
        return false;
      }
    });
  }
  onSuggestionClick(event, el) {
    event.preventDefault();
    const item = this.suggestions.indexOf(el);
    this.setSelectedItem(item, false);
    this.useSelectedItem(event);
  }
  onSuggestionMouseover(_event, el) {
    const item = this.suggestions.indexOf(el);
    this.setSelectedItem(item, false);
  }
  setSuggestions(values) {
    this.containerEl.empty();
    const suggestionEls = [];
    values.forEach((value) => {
      const suggestionEl = this.containerEl.createDiv("suggestion-item");
      this.owner.renderSuggestion(value, suggestionEl);
      suggestionEls.push(suggestionEl);
    });
    this.values = values;
    this.suggestions = suggestionEls;
    this.setSelectedItem(0, false);
  }
  useSelectedItem(event) {
    const currentValue = this.values[this.selectedItem];
    if (currentValue) {
      this.owner.selectSuggestion(currentValue, event);
    }
  }
  setSelectedItem(selectedIndex, scrollIntoView) {
    const normalizedIndex = wrapAround(selectedIndex, this.suggestions.length);
    const prevSelectedSuggestion = this.suggestions[this.selectedItem];
    const selectedSuggestion = this.suggestions[normalizedIndex];
    prevSelectedSuggestion == null ? void 0 : prevSelectedSuggestion.removeClass("is-selected");
    selectedSuggestion == null ? void 0 : selectedSuggestion.addClass("is-selected");
    this.selectedItem = normalizedIndex;
    if (scrollIntoView) {
      selectedSuggestion.scrollIntoView(false);
    }
  }
};
var TextInputSuggest = class {
  constructor(inputEl) {
    this.inputEl = inputEl;
    this.scope = new import_obsidian15.Scope();
    this.suggestEl = createDiv("suggestion-container");
    const suggestion = this.suggestEl.createDiv("suggestion");
    this.suggest = new Suggest(this, suggestion, this.scope);
    this.scope.register([], "Escape", this.close.bind(this));
    this.inputEl.addEventListener("input", this.onInputChanged.bind(this));
    this.inputEl.addEventListener("focus", this.onInputChanged.bind(this));
    this.inputEl.addEventListener("blur", this.close.bind(this));
    this.suggestEl.on("mousedown", ".suggestion-container", (event) => {
      event.preventDefault();
    });
  }
  onInputChanged() {
    const inputStr = this.inputEl.value;
    const suggestions = this.getSuggestions(inputStr);
    if (!suggestions) {
      this.close();
      return;
    }
    if (suggestions.length > 0) {
      this.suggest.setSuggestions(suggestions);
      this.open(app.dom.appContainerEl, this.inputEl);
    } else {
      this.close();
    }
  }
  open(container, inputEl) {
    app.keymap.pushScope(this.scope);
    container.appendChild(this.suggestEl);
    this.popper = createPopper(inputEl, this.suggestEl, {
      placement: "bottom-start",
      modifiers: [
        {
          name: "sameWidth",
          enabled: true,
          fn: ({ state, instance }) => {
            const targetWidth = `${state.rects.reference.width}px`;
            if (state.styles.popper.width === targetWidth) {
              return;
            }
            state.styles.popper.width = targetWidth;
            instance.update();
          },
          phase: "beforeWrite",
          requires: ["computeStyles"]
        }
      ]
    });
  }
  close() {
    app.keymap.popScope(this.scope);
    this.suggest.setSuggestions([]);
    if (this.popper)
      this.popper.destroy();
    this.suggestEl.detach();
  }
};

// src/suggester/FileSuggester.ts
var FileSuggest = class extends TextInputSuggest {
  constructor(inputEl, plugin, folder, extenstion = "md") {
    super(inputEl);
    this.inputEl = inputEl;
    this.plugin = plugin;
    this.folder = folder;
    this.extenstion = extenstion;
    this.plugin = plugin;
  }
  getSuggestions(input_str) {
    const all_files = [];
    try {
      all_files.push(...get_tfiles_from_folder(this.plugin, this.folder));
    } catch (error) {
    }
    const files = [];
    const lower_input_str = input_str.toLowerCase();
    all_files.forEach((file) => {
      if (file instanceof import_obsidian16.TFile && file.extension === this.extenstion && file.path.toLowerCase().contains(lower_input_str)) {
        files.push(file);
      }
    });
    return files;
  }
  renderSuggestion(file, el) {
    el.setText(file.path);
  }
  selectSuggestion(file) {
    this.inputEl.value = file.path;
    this.inputEl.trigger("input");
    this.close();
  }
};

// src/fields/fieldManagers/AbstractListBasedField.ts
var AbstractListBasedField = class extends FieldManager2 {
  constructor(plugin, field, type) {
    super(plugin, field, type);
  }
  createListNotePathContainer(container, plugin) {
    const valuesListNotePathContainer = container.createDiv({ cls: "field-container" });
    valuesListNotePathContainer.createDiv({ text: `Path of the note`, cls: "label" });
    const input = new import_obsidian17.TextComponent(valuesListNotePathContainer);
    input.inputEl.addClass("full-width");
    input.inputEl.addClass("with-label");
    new FileSuggest(input.inputEl, plugin, "/");
    const listNotePath = this.field.options.valuesListNotePath;
    input.setValue(listNotePath || "");
    input.setPlaceholder("Path/of/the/note.md");
    input.onChange((value) => this.field.options.valuesListNotePath = value);
    return valuesListNotePathContainer;
  }
  removePresetValue(key) {
    let newValues = {};
    for (let _key in this.field.options.valuesList) {
      if (key !== _key) {
        newValues[_key] = this.field.options.valuesList[_key];
      }
      ;
    }
    ;
    this.field.options.valuesList = newValues;
  }
  createValuesListContainer(parentContainer) {
    const presetValuesFields = parentContainer.createDiv();
    const valuesList = presetValuesFields.createDiv();
    const valuesListBody = valuesList.createDiv();
    Object.keys(this.field.options.valuesList).forEach((key) => {
      this.valuesPromptComponents.push(this.createValueContainer(valuesListBody, key));
    });
    this.createAddButton(valuesList, valuesListBody);
    return presetValuesFields;
  }
  createValueContainer(parentNode, key) {
    const values = this.field.options.valuesList || {};
    const presetValue = values[key];
    const valueContainer = parentNode.createDiv({ cls: "field-container" });
    const input = new import_obsidian17.TextComponent(valueContainer);
    input.inputEl.addClass("full-width");
    this.valuesPromptComponents.push(input);
    input.setValue(presetValue);
    input.onChange((value) => {
      this.field.options.valuesList[key] = value;
      FieldSettingsModal.removeValidationError(input);
    });
    const valueRemoveButton = new import_obsidian17.ButtonComponent(valueContainer);
    valueRemoveButton.setIcon("trash").onClick((evt) => {
      evt.preventDefault;
      this.removePresetValue(key);
      parentNode.removeChild(valueContainer);
      this.valuesPromptComponents.remove(input);
    });
    if (key != Object.keys(this.field.options)[0]) {
      const valueUpgradeButton = new import_obsidian17.ButtonComponent(valueContainer);
      (0, import_obsidian17.setIcon)(valueUpgradeButton.buttonEl, "up-chevron-glyph");
      valueUpgradeButton.onClick((evt) => {
        const thisValue = values[key];
        const inputIndex = this.valuesPromptComponents.indexOf(input);
        const upperComponent = inputIndex !== -1 ? this.valuesPromptComponents[inputIndex - 1] : this.valuesPromptComponents.last();
        if (upperComponent) {
          const upperValue = upperComponent.inputEl.value;
          const upperKey = Object.keys(values).filter((k) => values[k] == upperValue)[0];
          if (upperKey) {
            upperComponent.setValue(thisValue);
            values[upperKey] = thisValue;
            input.setValue(upperValue);
            values[key] = upperValue;
          }
          ;
        }
        ;
      });
    }
    ;
    return input;
  }
  validateValue(value) {
    return true;
  }
  getOptionsStr() {
    switch (this.field.options.sourceType) {
      case "ValuesList" /* ValuesList */:
        return Object.values(this.field.options.valuesList).join(", ");
      case "ValuesListNotePath" /* ValuesListNotePath */:
        return this.field.options.valuesListNotePath;
      case "ValuesFromDVQuery" /* ValuesFromDVQuery */:
        return this.field.options.valuesFromDVQuery;
      default:
        return "";
    }
  }
  getOptionsList(dvFile = void 0) {
    var _a;
    let values = [];
    if (Array.isArray(this.field.options)) {
      values = this.field.options;
    } else if (!this.field.options.sourceType) {
      values = Object.values(this.field.options);
    } else {
      switch (this.field.options.sourceType) {
        case "ValuesList" /* ValuesList */:
          values = Object.values(this.field.options.valuesList);
          break;
        case "ValuesListNotePath" /* ValuesListNotePath */:
          values = this.plugin.fieldIndex.valuesListNotePathValues.get(this.field.options.valuesListNotePath) || [];
          break;
        case "ValuesFromDVQuery" /* ValuesFromDVQuery */:
          {
            const dvApi = (_a = this.plugin.app.plugins.plugins.dataview) == null ? void 0 : _a.api;
            if (dvApi) {
              values = new Function("dv", "current", `return ${this.field.options.valuesFromDVQuery}`)(dvApi, dvFile);
            } else {
              values = [];
            }
          }
          break;
        default:
          values = [];
          break;
      }
    }
    return values;
  }
  validateOptions() {
    let error = false;
    this.valuesPromptComponents.forEach((input) => {
      var _a, _b;
      if (/[,]/gu.test(input.inputEl.value) && ((_a = input.inputEl.parentElement) == null ? void 0 : _a.lastElementChild)) {
        FieldSettingsModal.setValidationError(input, "Values cannot contain a comma");
        error = true;
      }
      ;
      if (input.inputEl.value == "" && ((_b = input.inputEl.parentElement) == null ? void 0 : _b.lastElementChild)) {
        FieldSettingsModal.setValidationError(input, "Values can't be null.");
        error = true;
      }
      ;
    });
    return !error;
  }
  createAddButton(valuesList, valuesListBody) {
    const valuesListFooter = valuesList.createDiv();
    const addValue = valuesListFooter.createEl("button");
    addValue.type = "button";
    addValue.textContent = "Add a value";
    addValue.onClickEvent((evt) => __async(this, null, function* () {
      evt.preventDefault;
      let newKeyNumber = 1;
      Object.keys(this.field.options.valuesList).forEach((key) => {
        if (parseInt(key) && parseInt(key) >= newKeyNumber) {
          newKeyNumber = parseInt(key) + 1;
        }
        ;
      });
      const newKey = newKeyNumber.toString();
      this.field.options.valuesList[newKey] = "";
      this.createValueContainer(valuesListBody, newKey);
    }));
    valuesList.createEl("hr");
  }
  createValuesFromDVQueryContainer(parentContainer) {
    const valuesFromDVQueryTopContainer = parentContainer.createDiv({ cls: "vstacked" });
    valuesFromDVQueryTopContainer.createEl("span", { text: "Dataview function" });
    valuesFromDVQueryTopContainer.createEl("span", { text: "Dataview query returning a list of string (<dv> object is available)", cls: "sub-text" });
    const valuesFromDVQueryContainer = valuesFromDVQueryTopContainer.createDiv({ cls: "field-container" });
    const valuesFromDVQuery = new import_obsidian17.TextAreaComponent(valuesFromDVQueryContainer);
    valuesFromDVQuery.inputEl.addClass("full-width");
    valuesFromDVQuery.inputEl.cols = 65;
    valuesFromDVQuery.inputEl.rows = 8;
    valuesFromDVQuery.setPlaceholder("ex: dv.pages('#student').map(p => p.name)");
    valuesFromDVQuery.setValue(this.field.options.valuesFromDVQuery || "");
    valuesFromDVQuery.onChange((value) => {
      this.field.options.valuesFromDVQuery = value;
    });
    return valuesFromDVQueryTopContainer;
  }
  displaySelectedTypeContainer(optionContainers, value) {
    Object.keys(optionContainers).forEach((key) => {
      if (key === value) {
        optionContainers[key].show();
      } else {
        optionContainers[key].hide();
      }
    });
  }
  createSettingContainer(container, plugin, location) {
    const sourceTypeContainer = container.createDiv({ cls: "field-container" });
    sourceTypeContainer.createDiv({ text: "Values source type", cls: "label" });
    sourceTypeContainer.createDiv({ cls: "spacer" });
    const sourceType = new import_obsidian17.DropdownComponent(sourceTypeContainer);
    if (!this.field.options.sourceType) {
      if (typeof this.field.options === "object" && Object.keys(this.field.options).every((key) => !isNaN(parseInt(key)))) {
        const valuesList = {};
        Object.keys(this.field.options).forEach((key) => valuesList[key] = this.field.options[key]);
        this.field.options = {};
        this.field.options.valuesList = valuesList;
      } else {
        this.field.options = {};
      }
      this.field.options.sourceType = "ValuesList" /* ValuesList */;
      this.field.options.valuesListNotePath = "";
      this.field.options.valuesFromDVQuery = "";
    }
    Object.keys(Type2).forEach((option) => sourceType.addOption(option, typeDisplay[option]));
    sourceType.setValue(this.field.options.sourceType || "ValuesList" /* ValuesList */);
    const valuesListNotePathContainer = this.createListNotePathContainer(container, plugin);
    const presetValuesFieldsContainer = this.createValuesListContainer(container);
    const valuesFromDVQueryContainer = this.createValuesFromDVQueryContainer(container);
    const valuesContainers = {
      "ValuesList": presetValuesFieldsContainer,
      "ValuesListNotePath": valuesListNotePathContainer,
      "ValuesFromDVQuery": valuesFromDVQueryContainer
    };
    sourceType.onChange((value) => {
      this.field.options.sourceType = value;
      this.displaySelectedTypeContainer(valuesContainers, value);
    });
    this.displaySelectedTypeContainer(valuesContainers, this.field.options.sourceType);
  }
  createDvField(dv, p, fieldContainer, attrs = {}) {
    attrs.cls = "value-container";
    fieldContainer.appendChild(dv.el("span", p[this.field.name], attrs));
  }
};

// src/fields/fieldManagers/SelectField.ts
var SelectField = class extends AbstractListBasedField {
  constructor(plugin, field) {
    super(plugin, field, "Select" /* Select */);
    this.valuesPromptComponents = [];
  }
  addFieldOption(name, value, file, location) {
    const modal = new ValueSuggestModal(this.plugin, file, value, this.field);
    modal.titleEl.setText("Select value");
    const action = () => modal.open();
    if (SelectField.isMenu(location)) {
      location.addItem((item) => {
        item.setTitle(`Update ${name}`);
        item.setIcon(FieldIcon["Select" /* Select */]);
        item.onClick(action);
        item.setSection("metadata-menu.fields");
      });
    } else if (SelectField.isSuggest(location)) {
      location.options.push({
        id: `update_${name}`,
        actionLabel: `<span>Update <b>${name}</b></span>`,
        action,
        icon: FieldIcon["Select" /* Select */]
      });
    } else if (SelectField.isFieldOptions(location)) {
      location.addOption(FieldIcon["Multi" /* Multi */], action, `Update ${name}'s value`);
    }
    ;
  }
  createAndOpenFieldModal(file, selectedFieldName, value, lineNumber, after, asList, asComment) {
    const fieldModal = new ValueSuggestModal(this.plugin, file, value || "", this.field, lineNumber, after, asList, asComment);
    fieldModal.titleEl.setText(`Select option for ${selectedFieldName}`);
    fieldModal.open();
  }
  createDvField(dv, p, fieldContainer, attrs = {}) {
    var _a;
    attrs.cls = "value-container";
    fieldContainer.appendChild(dv.el("span", p[this.field.name] || "", attrs));
    const spacer = fieldContainer.createEl("div", { cls: "spacer-1" });
    const dropDownButton = fieldContainer.createEl("button");
    (0, import_obsidian18.setIcon)(dropDownButton, "down-chevron-glyph");
    const file = this.plugin.app.vault.getAbstractFileByPath(p["file"]["path"]);
    let fieldModal;
    if (file instanceof import_obsidian18.TFile && file.extension == "md") {
      fieldModal = new ValueSuggestModal(this.plugin, file, p[this.field.name], this.field);
    } else {
      throw Error("path doesn't correspond to a proper file");
    }
    dropDownButton.onclick = () => fieldModal.open();
    if (!((_a = attrs == null ? void 0 : attrs.options) == null ? void 0 : _a.alwaysOn)) {
      dropDownButton.hide();
      spacer.show();
      fieldContainer.onmouseover = () => {
        dropDownButton.show();
        spacer.hide();
      };
      fieldContainer.onmouseout = () => {
        dropDownButton.hide();
        spacer.show();
      };
    }
  }
};

// src/fields/fieldManagers/CycleField.ts
var import_obsidian19 = require("obsidian");
var CycleField = class extends AbstractListBasedField {
  constructor(plugin, field) {
    super(plugin, field, "Cycle" /* Cycle */);
    this.valuesPromptComponents = [];
    this.showModalOption = false;
  }
  createSettingContainer(container, plugin, location) {
    const allowNullValueContainer = container.createDiv({ cls: "field-container" });
    allowNullValueContainer.createDiv({ cls: "label", text: "Cycle begins by a null value" });
    allowNullValueContainer.createDiv({ cls: "spacer" });
    const allowNullToggler = new import_obsidian19.ToggleComponent(allowNullValueContainer);
    allowNullToggler.setValue(this.field.options.allowNull || false);
    allowNullToggler.onChange((value) => this.field.options.allowNull = value);
    super.createSettingContainer(container, plugin, location);
  }
  nextOption(rawValue) {
    let nextOption;
    const values = this.getOptionsList();
    const value = !rawValue ? "" : rawValue;
    if (values.indexOf(value) === -1) {
      nextOption = values[0] || "";
    } else {
      nextOption = values[(values.indexOf(value) + 1) % values.length];
    }
    return nextOption;
  }
  getOptionsList() {
    return this.field.options.allowNull ? ["", ...super.getOptionsList()] : super.getOptionsList();
  }
  getRawOptionFromDuration(duration2) {
    var _a;
    const dvApi = (_a = this.plugin.app.plugins.plugins.dataview) == null ? void 0 : _a.api;
    let matchedValue = void 0;
    if (dvApi && dvApi.value.isDuration(duration2)) {
      this.getOptionsList().forEach((option) => {
        const dvOption = dvApi.duration(option);
        if (Object.keys(duration2.values).every((j) => !duration2.values[j] && !dvOption.values[j] || duration2.values[j] === dvOption.values[j])) {
          matchedValue = option;
        }
      });
    }
    return matchedValue;
  }
  displayValue(container, file, fieldName, onClicked) {
    var _a;
    const dvApi = (_a = this.plugin.app.plugins.plugins.dataview) == null ? void 0 : _a.api;
    let valueText;
    if (dvApi) {
      switch (dvApi.page(file.path)[fieldName]) {
        case void 0:
          valueText = "";
          break;
        case null:
          valueText = "";
          break;
        case false:
          valueText = "false";
          break;
        case 0:
          valueText = "0";
          break;
        default:
          valueText = dvApi.page(file.path)[fieldName];
      }
    } else {
      valueText = "";
    }
    container.createDiv({ text: this.getRawOptionFromDuration(valueText) || valueText });
  }
  next(name, value, file) {
    return __async(this, null, function* () {
      let matchedValue = this.getRawOptionFromDuration(value) || value;
      yield postValues(this.plugin, [{ name, payload: { value: this.nextOption(matchedValue).toString() } }], file);
    });
  }
  addFieldOption(name, value, file, location) {
    let matchedValue = this.getRawOptionFromDuration(value) || value;
    const iconName = FieldIcon["Cycle" /* Cycle */];
    const action = () => __async(this, null, function* () {
      return this.next(name, value, file);
    });
    if (CycleField.isMenu(location)) {
      location.addItem((item) => {
        item.setTitle(`${name} : ${matchedValue} \u25B7 ${this.nextOption(matchedValue)}`);
        item.setIcon(iconName);
        item.onClick(action);
        item.setSection("metadata-menu.fields");
      });
    } else if (CycleField.isSuggest(location)) {
      location.options.push({
        id: `${name}_${matchedValue}_${this.nextOption(matchedValue)}`,
        actionLabel: `<span><b>${name}</b> : ${matchedValue} \u25B7 ${this.nextOption(matchedValue)}</span>`,
        action,
        icon: iconName
      });
    } else if (CycleField.isFieldOptions(location)) {
      location.addOption(iconName, action, `${matchedValue} \u25B7 ${this.nextOption(matchedValue)}`);
    }
    ;
  }
  createAndOpenFieldModal(file, selectedFieldName, value, lineNumber, after, asList, asComment) {
    const fieldModal = new ValueSuggestModal(this.plugin, file, value || "", this.field, lineNumber, after, asList, asComment);
    fieldModal.titleEl.setText(`Select option for ${selectedFieldName}`);
    fieldModal.open();
  }
  createDvField(dv, p, fieldContainer, attrs = {}) {
    var _a;
    attrs.cls = "value-container";
    fieldContainer.appendChild(dv.el("span", p[this.field.name], attrs));
    const nextOption = this.nextOption(p[this.field.name]);
    const spacer = fieldContainer.createEl("div", { cls: "spacer" });
    const cycleBtn = fieldContainer.createEl("button");
    (0, import_obsidian19.setIcon)(cycleBtn, FieldIcon["Cycle" /* Cycle */]);
    if (!((_a = attrs == null ? void 0 : attrs.options) == null ? void 0 : _a.alwaysOn)) {
      cycleBtn.hide();
      spacer.show();
      fieldContainer.onmouseover = () => {
        cycleBtn.show();
        spacer.hide();
      };
      fieldContainer.onmouseout = () => {
        cycleBtn.hide();
        spacer.show();
      };
    }
    cycleBtn.onclick = (e) => {
      var _a2;
      CycleField.replaceValues(this.plugin, p.file.path, this.field.name, nextOption);
      if (!((_a2 = attrs == null ? void 0 : attrs.options) == null ? void 0 : _a2.alwaysOn)) {
        cycleBtn.hide();
        spacer.show();
      }
    };
  }
};

// src/fields/fieldManagers/MultiField.ts
var import_obsidian23 = require("obsidian");

// src/modals/fields/MultiSelectModal.ts
var import_obsidian22 = require("obsidian");

// src/fields/fieldManagers/FileField.ts
var import_obsidian21 = require("obsidian");

// src/modals/fields/SingleFileModal.ts
var import_obsidian20 = require("obsidian");
var FileFuzzySuggester = class extends import_obsidian20.FuzzySuggestModal {
  constructor(plugin, file, field, initialValueObject, lineNumber = -1, after = false, asList = false, asComment = false) {
    var _a;
    super(plugin.app);
    this.plugin = plugin;
    this.file = file;
    this.field = field;
    this.lineNumber = lineNumber;
    this.after = after;
    this.asList = asList;
    this.asComment = asComment;
    const dvApi = (_a = this.plugin.app.plugins.plugins["dataview"]) == null ? void 0 : _a.api;
    if (dvApi) {
      if (dvApi.value.isLink(initialValueObject)) {
        const file2 = this.plugin.app.vault.getAbstractFileByPath(initialValueObject.path);
        if (file2 instanceof import_obsidian20.TFile)
          this.selectedFile = file2;
      }
    }
    this.containerEl.addClass("metadata-menu");
  }
  getItems() {
    const sortingMethod = new Function("a", "b", `return ${this.field.options.customSorting}`) || function(a, b) {
      return a.basename < b.basename ? -1 : 1;
    };
    try {
      const fileManager = new FieldManager[this.field.type](this.plugin, this.field);
      return fileManager.getFiles(this.file).sort(sortingMethod);
    } catch (error) {
      this.close();
      throw error;
    }
  }
  getItemText(item) {
    return item.basename;
  }
  renderSuggestion(value, el) {
    var _a, _b;
    const dvApi = (_a = this.plugin.app.plugins.plugins.dataview) == null ? void 0 : _a.api;
    if (dvApi && this.field.options.customRendering) {
      const suggestionContainer = el.createDiv({ cls: "item-with-add-on" });
      suggestionContainer.createDiv({
        text: new Function("page", `return ${this.field.options.customRendering}`)(dvApi.page(value.item.path))
      });
      const filePath = suggestionContainer.createDiv({ cls: "add-on" });
      filePath.setText(value.item.path);
    } else {
      el.setText(value.item.basename);
    }
    el.addClass("value-container");
    const spacer = this.containerEl.createDiv({ cls: "spacer" });
    el.appendChild(spacer);
    if (((_b = this.selectedFile) == null ? void 0 : _b.path) === value.item.path) {
      el.addClass("value-checked");
      const iconContainer = el.createDiv({ cls: "icon-container" });
      (0, import_obsidian20.setIcon)(iconContainer, "check-circle");
    }
    this.inputEl.focus();
  }
  onChooseItem(item) {
    return __async(this, null, function* () {
      var _a;
      const dvApi = (_a = this.plugin.app.plugins.plugins.dataview) == null ? void 0 : _a.api;
      let alias = void 0;
      if (dvApi && this.field.options.customRendering) {
        alias = new Function("page", `return ${this.field.options.customRendering}`)(dvApi.page(item.path));
      }
      const value = FileField.buildMarkDownLink(this.plugin, this.file, item.basename, alias);
      yield postValues(this.plugin, [{ name: this.field.name, payload: { value } }], this.file, this.lineNumber, this.asList, this.asComment);
    });
  }
};

// src/fields/fieldManagers/FileField.ts
var FileField = class extends FieldManager2 {
  constructor(plugin, field) {
    super(plugin, field, "File" /* File */);
    this.getFiles = (currentFile) => {
      const getResults = (api) => {
        try {
          return new Function("dv", "current", `return ${this.field.options.dvQueryString}`)(api, api.page(currentFile == null ? void 0 : currentFile.path));
        } catch (error) {
          new import_obsidian21.Notice(`Wrong query for field <${this.field.name}>
check your settings`, 3e3);
        }
      };
      const dataview = this.plugin.app.plugins.plugins["dataview"];
      if (this.field.options.dvQueryString && (dataview == null ? void 0 : dataview.settings.enableDataviewJs) && (dataview == null ? void 0 : dataview.settings.enableInlineDataviewJs)) {
        try {
          const filesPath = getResults(dataview.api).values.map((v) => v.file.path);
          return this.plugin.app.vault.getMarkdownFiles().filter((f) => filesPath.includes(f.path));
        } catch (error) {
          throw error;
        }
      } else {
        return this.plugin.app.vault.getMarkdownFiles();
      }
    };
  }
  addFieldOption(name, value, file, location) {
    const modal = new FileFuzzySuggester(this.plugin, file, this.field, value);
    modal.titleEl.setText("Select value");
    const action = () => modal.open();
    if (FileField.isMenu(location)) {
      location.addItem((item) => {
        item.setTitle(`Update ${name}`);
        item.setIcon(FieldIcon["File" /* File */]);
        item.onClick(action);
        item.setSection("metadata-menu.fields");
      });
    } else if (FileField.isSuggest(location)) {
      location.options.push({
        id: `update_${name}`,
        actionLabel: `<span>Update <b>${name}</b></span>`,
        action,
        icon: FieldIcon["File" /* File */]
      });
    } else if (FileField.isFieldOptions(location)) {
      location.addOption(FieldIcon["File" /* File */], action, `Update ${name}'s value`);
    }
    ;
  }
  createAndOpenFieldModal(file, selectedFieldName, value, lineNumber, after, asList, asComment) {
    const fieldModal = new FileFuzzySuggester(this.plugin, file, this.field, value, lineNumber, after, asList, asComment);
    fieldModal.titleEl.setText(`Enter value for ${selectedFieldName}`);
    fieldModal.open();
  }
  displayValue(container, file, fieldName, onClicked) {
    var _a;
    const dvApi = (_a = this.plugin.app.plugins.plugins.dataview) == null ? void 0 : _a.api;
    if (dvApi) {
      const value = dvApi.page(file.path)[fieldName];
      if (dvApi.value.isLink(value)) {
        const link = container.createEl("a", { text: value.path.split("/").last().replace(/(.*).md/, "$1") });
        link.onclick = () => {
          this.plugin.app.workspace.openLinkText(value.path, file.path, true);
          onClicked();
        };
      } else {
        container.createDiv({ text: value });
      }
    }
    container.createDiv();
  }
  createDvField(dv, p, fieldContainer, attrs = {}) {
    var _a;
    attrs.cls = "value-container";
    fieldContainer.appendChild(dv.el("span", p[this.field.name], attrs));
    const searchBtn = fieldContainer.createEl("button");
    (0, import_obsidian21.setIcon)(searchBtn, FieldIcon["File" /* File */]);
    const spacer = fieldContainer.createEl("div", { cls: "spacer" });
    const file = this.plugin.app.vault.getAbstractFileByPath(p["file"]["path"]);
    let fieldModal;
    if (file instanceof import_obsidian21.TFile && file.extension == "md") {
      fieldModal = new FileFuzzySuggester(this.plugin, file, this.field, p[this.field.name]);
    } else {
      throw Error("path doesn't correspond to a proper file");
    }
    searchBtn.onclick = () => {
      fieldModal.open();
    };
    if (!((_a = attrs == null ? void 0 : attrs.options) == null ? void 0 : _a.alwaysOn) || true) {
      searchBtn.hide();
      spacer.show();
      fieldContainer.onmouseover = () => {
        searchBtn.show();
        spacer.hide();
      };
      fieldContainer.onmouseout = () => {
        searchBtn.hide();
        spacer.show();
      };
    }
  }
  createFileContainer(container) {
    const dvQueryStringTopContainer = container.createDiv({ cls: "vstacked" });
    dvQueryStringTopContainer.createEl("span", { text: "Dataview Query (optional)" });
    const dvQueryStringContainer = dvQueryStringTopContainer.createDiv({ cls: "field-container" });
    this.dvQueryString = new import_obsidian21.TextAreaComponent(dvQueryStringContainer);
    this.dvQueryString.inputEl.cols = 50;
    this.dvQueryString.inputEl.rows = 4;
    this.dvQueryString.setValue(this.field.options.dvQueryString || "");
    this.dvQueryString.inputEl.addClass("full-width");
    this.dvQueryString.onChange((value) => {
      this.field.options.dvQueryString = value;
      FieldSettingsModal.removeValidationError(this.dvQueryString);
    });
    const customeRenderingTopContainer = container.createDiv({ cls: "vstacked" });
    customeRenderingTopContainer.createEl("span", { text: "Alias" });
    customeRenderingTopContainer.createEl("span", { text: "Personalise the rendering of your links' aliases with a function returning a string (<page> object is available)", cls: "sub-text" });
    customeRenderingTopContainer.createEl("code", {
      text: `function(page) { return <function using "page">; }`
    });
    const customeRenderingContainer = customeRenderingTopContainer.createDiv({ cls: "field-container" });
    const customRendering = new import_obsidian21.TextAreaComponent(customeRenderingContainer);
    customRendering.inputEl.cols = 50;
    customRendering.inputEl.rows = 4;
    customRendering.inputEl.addClass("full-width");
    customRendering.setValue(this.field.options.customRendering || "");
    customRendering.setPlaceholder('Javascript string, the "page" (dataview page type) variable is available\nexample 1: page.file.name\nexample 2: `${page.file.name} of gender ${page.gender}`');
    customRendering.onChange((value) => {
      this.field.options.customRendering = value;
      FieldSettingsModal.removeValidationError(customRendering);
    });
    const customSortingTopContainer = container.createDiv({ cls: "vstacked" });
    customSortingTopContainer.createEl("span", { text: "Sorting order" });
    customSortingTopContainer.createEl("span", { text: "Personalise the sorting order of your links with a instruction taking 2 files (a, b) and returning -1, 0 or 1", cls: "sub-text" });
    customSortingTopContainer.createEl("code", {
      text: `(a: TFile, b: TFile): number`
    });
    const customSortingContainer = customSortingTopContainer.createDiv({ cls: "field-container" });
    const customSorting = new import_obsidian21.TextAreaComponent(customSortingContainer);
    customSorting.inputEl.cols = 50;
    customSorting.inputEl.rows = 4;
    customSorting.inputEl.addClass("full-width");
    customSorting.setValue(this.field.options.customSorting || "");
    customSorting.setPlaceholder("Javascript instruction, (a: TFile, b: TFile): number\nexample 1 (alphabetical order): a.basename < b.basename ? 1 : -1 \nexample 2 (creation time newer to older): b.stat.ctime - b.stat.ctime");
    customSorting.onChange((value) => {
      this.field.options.customSorting = value;
      FieldSettingsModal.removeValidationError(customSorting);
    });
  }
  createSettingContainer(parentContainer, plugin, location) {
    this.createFileContainer(parentContainer);
  }
  getOptionsStr() {
    return this.field.options.dvQueryString || "";
  }
  validateOptions() {
    return true;
  }
  validateValue(value) {
    return true;
  }
};

// src/modals/fields/MultiSelectModal.ts
var MultiSuggestModal = class extends import_obsidian22.SuggestModal {
  constructor(plugin, file, field, initialOptions, lineNumber = -1, after = false, asList = false, asComment = false) {
    var _a;
    super(plugin.app);
    this.plugin = plugin;
    this.file = file;
    this.field = field;
    this.lineNumber = lineNumber;
    this.after = after;
    this.asList = asList;
    this.asComment = asComment;
    if (initialOptions) {
      if (Array.isArray(initialOptions)) {
        const dvApi = (_a = this.plugin.app.plugins.plugins.dataview) == null ? void 0 : _a.api;
        if (dvApi && initialOptions.some((o) => dvApi.value.isLink(o))) {
          this.selectedOptions = initialOptions.map((item) => {
            if (dvApi.value.isLink(item)) {
              return FileField.buildMarkDownLink(this.plugin, this.file, item.path);
            } else {
              return item.toString();
            }
          });
        }
        this.selectedOptions = initialOptions.map((item) => item.toString());
      } else if (typeof initialOptions === "string" && initialOptions.toString().startsWith("[[")) {
        this.selectedOptions = initialOptions.split(",").map((item) => item.trim());
      } else {
        if (Object.keys(initialOptions).includes("path")) {
          this.selectedOptions = [`[[${initialOptions.path.replace(".md", "")}]]`];
        } else if (typeof initialOptions === "string") {
          this.selectedOptions = initialOptions.toString().replace(/^\[(.*)\]$/, "$1").split(",").map((item) => item.trim());
        }
      }
    } else {
      this.selectedOptions = [];
    }
    this.containerEl.addClass("metadata-menu");
  }
  onOpen() {
    return __async(this, null, function* () {
      __superGet(MultiSuggestModal.prototype, this, "onOpen").call(this);
      this.containerEl.onkeydown = (e) => __async(this, null, function* () {
        if (e.key == "Enter" && e.altKey) {
          yield this.replaceValues();
          this.close();
        }
      });
      const updateSettingsInfoContainer = this.containerEl.createDiv({ cls: "value-add-notice" });
      const notice = updateSettingsInfoContainer.createDiv({ cls: "label" });
      updateSettingsInfoContainer.createDiv({ cls: "spacer" });
      updateSettingsInfoContainer.hide();
      this.containerEl.find(".prompt").prepend(updateSettingsInfoContainer);
      const inputContainer = this.containerEl.createDiv({ cls: "suggester-input" });
      inputContainer.appendChild(this.inputEl);
      this.containerEl.find(".prompt").prepend(inputContainer);
      const buttonContainer = this.containerEl.createDiv({ cls: "footer-actions" });
      buttonContainer.createDiv({ cls: "spacer" });
      const infoContainer = buttonContainer.createDiv({ cls: "info" });
      infoContainer.setText("Alt+Enter to save");
      this.addButton = new import_obsidian22.ButtonComponent(inputContainer);
      this.addButton.setIcon("plus");
      this.addButton.onClick(() => __async(this, null, function* () {
        yield this.addNewValueToSettings();
        notice.setText(`${this.inputEl.value} added to the field settings
click on reload`);
        this.addButton.buttonEl.hide();
        updateSettingsInfoContainer.show();
      }));
      this.addButton.setCta();
      this.addButton.setTooltip("Add this value to this field settings");
      this.addButton.buttonEl.hide();
      this.reloadButton = new import_obsidian22.ButtonComponent(updateSettingsInfoContainer);
      this.reloadButton.setIcon("refresh-cw");
      this.reloadButton.setCta();
      this.reloadButton.onClick(() => __async(this, null, function* () {
        this.inputEl.value = "";
        this.updateSuggestions();
        updateSettingsInfoContainer.hide();
        this.addButton.buttonEl.hide();
      }));
      const confirmButton = new import_obsidian22.ButtonComponent(buttonContainer);
      confirmButton.setIcon("checkmark");
      confirmButton.onClick(() => __async(this, null, function* () {
        yield this.replaceValues();
        this.close();
      }));
      const cancelButton = new import_obsidian22.ButtonComponent(buttonContainer);
      cancelButton.setIcon("cross");
      cancelButton.onClick(() => {
        this.close();
      });
      const clearButton = new import_obsidian22.ButtonComponent(buttonContainer);
      clearButton.setIcon("trash");
      clearButton.onClick(() => __async(this, null, function* () {
        yield this.clearValues();
        this.close();
      }));
      clearButton.buttonEl.addClass("danger");
      this.modalEl.appendChild(buttonContainer);
    });
  }
  addNewValueToSettings() {
    return __async(this, null, function* () {
      var _a, _b;
      const newValue = this.inputEl.value;
      const fileClassName = (_b = (_a = this.plugin.fieldIndex.filesFields.get(this.file.path)) == null ? void 0 : _a.find((field) => field.name === this.field.name)) == null ? void 0 : _b.fileClassName;
      if (fileClassName) {
        const fileClass = this.plugin.fieldIndex.fileClassesName.get(fileClassName);
        const fileClassAttribute = fileClass == null ? void 0 : fileClass.attributes.find((attr) => attr.name === this.field.name);
        if (fileClass && fileClassAttribute) {
          let newOptions;
          if (Array.isArray(fileClassAttribute.options)) {
            newOptions = [...fileClassAttribute.options, newValue];
            yield fileClass.updateAttribute(fileClassAttribute.type, fileClassAttribute.name, newOptions, fileClassAttribute);
          } else if (fileClassAttribute.options.sourceType === "ValuesList" /* ValuesList */) {
            newOptions = fileClassAttribute.options.valuesList;
            newOptions[`${Object.keys(fileClassAttribute.options.valuesList).length}`] = newValue;
            yield fileClass.updateAttribute(fileClassAttribute.type, fileClassAttribute.name, newOptions, fileClassAttribute);
          } else if (fileClassAttribute.options.sourceType === "ValuesListNotePath" /* ValuesListNotePath */) {
            const valuesFile = this.plugin.app.vault.getAbstractFileByPath(fileClassAttribute.options.valuesListNotePath);
            if (valuesFile instanceof import_obsidian22.TFile && valuesFile.extension == "md") {
              const result = yield this.plugin.app.vault.read(valuesFile);
              this.plugin.app.vault.modify(valuesFile, `${result}
${newValue}`);
            }
          } else {
            newOptions = fileClassAttribute.options;
            newOptions[`${Object.keys(fileClassAttribute.options).length + 1}`] = newValue;
            yield fileClass.updateAttribute(fileClassAttribute.type, fileClassAttribute.name, newOptions, fileClassAttribute);
          }
        }
      } else {
        const presetField = this.plugin.settings.presetFields.find((field) => field.name === this.field.name);
        if ((presetField == null ? void 0 : presetField.options.sourceType) === "ValuesListNotePath" /* ValuesListNotePath */) {
          const valuesFile = this.plugin.app.vault.getAbstractFileByPath(presetField.options.valuesListNotePath);
          if (valuesFile instanceof import_obsidian22.TFile && valuesFile.extension == "md") {
            const result = yield this.plugin.app.vault.read(valuesFile);
            this.plugin.app.vault.modify(valuesFile, `${result}
${newValue}`);
          }
        } else if ((presetField == null ? void 0 : presetField.options.sourceType) === "ValuesList" /* ValuesList */) {
          const currentExistingField = this.plugin.initialProperties.find((p) => p.id == this.field.id);
          if (currentExistingField) {
            const valuesList = currentExistingField.options.valuesList;
            valuesList[`${Object.keys(valuesList).length + 1}`] = newValue;
          }
          this.plugin.saveSettings();
        }
      }
      yield this.plugin.fieldIndex.fullIndex("valueAdd");
      this.selectedOptions.push(newValue);
    });
  }
  replaceValues() {
    return __async(this, null, function* () {
      const options2 = this.selectedOptions;
      yield postValues(this.plugin, [{ name: this.field.name, payload: { value: options2.join(", ") } }], this.file, this.lineNumber, this.after, this.asList, this.asComment);
      this.close();
    });
  }
  clearValues() {
    return __async(this, null, function* () {
      yield postValues(this.plugin, [{ name: this.field.name, payload: { value: "" } }], this.file, this.lineNumber, this.after, this.asList, this.asComment);
    });
  }
  renderSelected() {
    const chooser = this.chooser;
    const suggestions = chooser.suggestions;
    const values = chooser.values;
    suggestions.forEach((s, i) => {
      if (this.selectedOptions.includes(values[i].toString())) {
        s.addClass("value-checked");
        if (s.querySelectorAll(".icon-container").length == 0) {
          const iconContainer = s.createDiv({ cls: "icon-container" });
          (0, import_obsidian22.setIcon)(iconContainer, "check-circle");
        }
      } else {
        s.removeClass("value-checked");
        s.querySelectorAll(".icon-container").forEach((icon) => icon.remove());
      }
    });
  }
  getSuggestions(query) {
    var _a;
    const dvApi = (_a = this.plugin.app.plugins.plugins.dataview) == null ? void 0 : _a.api;
    let dvFile;
    if (dvApi)
      dvFile = dvApi.page(this.file.path);
    const fieldManager = new FieldManager[this.field.type](this.plugin, this.field);
    const values = fieldManager.getOptionsList(dvFile).filter((o) => o.toLowerCase().includes(query.toLowerCase()));
    if (this.addButton) {
      values.some((p) => p === query) || this.field.options.sourceType == "ValuesFromDVQuery" /* ValuesFromDVQuery */ || !query ? this.addButton.buttonEl.hide() : this.addButton.buttonEl.show();
    }
    ;
    return values;
  }
  renderSuggestion(value, el) {
    el.setText(value);
    el.addClass("value-container");
    const spacer = this.containerEl.createDiv({ cls: "spacer" });
    el.appendChild(spacer);
    if (this.selectedOptions.includes(value.toString())) {
      el.addClass("value-checked");
      const iconContainer = el.createDiv({ cls: "icon-container" });
      (0, import_obsidian22.setIcon)(iconContainer, "check-circle");
    }
    this.inputEl.focus();
  }
  selectSuggestion(value, evt) {
    if (this.selectedOptions.includes(value.toString())) {
      this.selectedOptions.remove(value.toString());
    } else {
      this.selectedOptions.push(value.toString());
    }
    this.renderSelected();
  }
  onChooseSuggestion(item, evt) {
  }
};

// src/fields/fieldManagers/MultiField.ts
var MultiField = class extends AbstractListBasedField {
  constructor(plugin, field) {
    super(plugin, field, "Multi" /* Multi */);
    this.valuesPromptComponents = [];
  }
  addFieldOption(name, value, file, location) {
    const modal = new MultiSuggestModal(this.plugin, file, this.field, value);
    modal.titleEl.setText("Select values");
    const action = () => modal.open();
    if (MultiField.isMenu(location)) {
      location.addItem((item) => {
        item.setTitle(`Update <${name}>`);
        item.setIcon(FieldIcon["Multi" /* Multi */]);
        item.onClick(action);
        item.setSection("metadata-menu.fields");
      });
    } else if (MultiField.isSuggest(location)) {
      location.options.push({
        id: `update_${name}`,
        actionLabel: `<span>Update <b>${name}</b></span>`,
        action,
        icon: FieldIcon["Multi" /* Multi */]
      });
    } else if (MultiField.isFieldOptions(location)) {
      location.addOption(FieldIcon["Multi" /* Multi */], action, `Update ${name}'s value`);
    }
    ;
  }
  createAndOpenFieldModal(file, selectedFieldName, value, lineNumber, after, asList, asComment) {
    const fieldModal = new MultiSuggestModal(this.plugin, file, this.field, value || "", lineNumber, after, asList, asComment);
    fieldModal.titleEl.setText(`Select options for ${selectedFieldName}`);
    fieldModal.open();
  }
  createDvField(dv, p, fieldContainer, attrs = {}) {
    var _a, _b;
    let valueHovered = false;
    let currentValues = [];
    if (p[this.field.name]) {
      if (Object.keys(p[this.field.name]).includes("path")) {
        currentValues = [`[[${p[this.field.name].path.replace(".md", "")}]]`];
      } else if (Array.isArray(p[this.field.name])) {
        p[this.field.name].forEach((item) => {
          if (Object.keys(item).includes("path")) {
            currentValues.push(`[[${item.path.replace(".md", "")}]]`);
          } else {
            currentValues.push(item.trim());
          }
        });
      } else {
        currentValues = p[this.field.name].split(",").map((v) => v.trim());
      }
    }
    const file = this.plugin.app.vault.getAbstractFileByPath(p["file"]["path"]);
    let fieldModal;
    if (file instanceof import_obsidian23.TFile && file.extension == "md") {
      fieldModal = new MultiSuggestModal(this.plugin, file, this.field, p[this.field.name]);
    } else {
      throw Error("path doesn't correspond to a proper file");
    }
    const valuesContainer = fieldContainer.createDiv({ cls: "values-container" });
    currentValues.forEach((v) => {
      const valueContainer = valuesContainer.createDiv({ cls: "item-container" });
      const valueRemoveBtn = valueContainer.createEl("button");
      const valueLabel = valueContainer.createDiv({ cls: "label", text: v });
      (0, import_obsidian23.setIcon)(valueRemoveBtn, "cross");
      valueRemoveBtn.hide();
      valueRemoveBtn.onclick = () => __async(this, null, function* () {
        const remainingValues = currentValues.filter((cV) => cV !== v).join(", ");
        MultiField.replaceValues(this.plugin, p.file.path, this.field.name, remainingValues);
      });
      valueContainer.onmouseover = () => {
        valueHovered = true;
        doubleSpacer.hide();
        singleSpacer.hide();
        valueRemoveBtn.show();
        valueLabel.addClass("hovered");
      };
      valueContainer.onmouseout = () => {
        valueHovered = false;
        valueRemoveBtn.hide();
        singleSpacer.show();
        doubleSpacer.hide();
        valueLabel.removeClass("hovered");
      };
    });
    const addBtn = valuesContainer.createEl("button");
    (0, import_obsidian23.setIcon)(addBtn, "list-plus");
    addBtn.onclick = () => fieldModal.open();
    const singleSpacer = valuesContainer.createDiv({ cls: "spacer-1" });
    const doubleSpacer = valuesContainer.createDiv({ cls: "spacer-2" });
    if (!((_a = attrs == null ? void 0 : attrs.options) == null ? void 0 : _a.alwaysOn)) {
      addBtn.hide();
      fieldContainer.onmouseover = () => {
        addBtn.show();
        doubleSpacer.hide();
        if (!valueHovered)
          singleSpacer.show();
      };
      fieldContainer.onmouseout = () => {
        addBtn.hide();
        singleSpacer.hide();
        doubleSpacer.show();
      };
    }
    if (!((_b = attrs == null ? void 0 : attrs.options) == null ? void 0 : _b.alwaysOn)) {
      singleSpacer.hide();
      doubleSpacer.show();
      addBtn.hide();
    } else {
      singleSpacer.show();
      doubleSpacer.hide();
      addBtn.show();
    }
  }
};

// src/fields/fieldManagers/DateField.ts
var import_obsidian26 = require("obsidian");

// src/modals/fields/DateModal.ts
var import_obsidian24 = require("obsidian");
var import_obsidian25 = require("obsidian");

// node_modules/flatpickr/dist/esm/types/options.js
var HOOKS = [
  "onChange",
  "onClose",
  "onDayCreate",
  "onDestroy",
  "onKeyDown",
  "onMonthChange",
  "onOpen",
  "onParseConfig",
  "onReady",
  "onValueUpdate",
  "onYearChange",
  "onPreCalendarPosition"
];
var defaults = {
  _disable: [],
  allowInput: false,
  allowInvalidPreload: false,
  altFormat: "F j, Y",
  altInput: false,
  altInputClass: "form-control input",
  animate: typeof window === "object" && window.navigator.userAgent.indexOf("MSIE") === -1,
  ariaDateFormat: "F j, Y",
  autoFillDefaultTime: true,
  clickOpens: true,
  closeOnSelect: true,
  conjunction: ", ",
  dateFormat: "Y-m-d",
  defaultHour: 12,
  defaultMinute: 0,
  defaultSeconds: 0,
  disable: [],
  disableMobile: false,
  enableSeconds: false,
  enableTime: false,
  errorHandler: function(err) {
    return typeof console !== "undefined" && console.warn(err);
  },
  getWeek: function(givenDate) {
    var date = new Date(givenDate.getTime());
    date.setHours(0, 0, 0, 0);
    date.setDate(date.getDate() + 3 - (date.getDay() + 6) % 7);
    var week1 = new Date(date.getFullYear(), 0, 4);
    return 1 + Math.round(((date.getTime() - week1.getTime()) / 864e5 - 3 + (week1.getDay() + 6) % 7) / 7);
  },
  hourIncrement: 1,
  ignoredFocusElements: [],
  inline: false,
  locale: "default",
  minuteIncrement: 5,
  mode: "single",
  monthSelectorType: "dropdown",
  nextArrow: "<svg version='1.1' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink' viewBox='0 0 17 17'><g></g><path d='M13.207 8.472l-7.854 7.854-0.707-0.707 7.146-7.146-7.146-7.148 0.707-0.707 7.854 7.854z' /></svg>",
  noCalendar: false,
  now: new Date(),
  onChange: [],
  onClose: [],
  onDayCreate: [],
  onDestroy: [],
  onKeyDown: [],
  onMonthChange: [],
  onOpen: [],
  onParseConfig: [],
  onReady: [],
  onValueUpdate: [],
  onYearChange: [],
  onPreCalendarPosition: [],
  plugins: [],
  position: "auto",
  positionElement: void 0,
  prevArrow: "<svg version='1.1' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink' viewBox='0 0 17 17'><g></g><path d='M5.207 8.471l7.146 7.147-0.707 0.707-7.853-7.854 7.854-7.853 0.707 0.707-7.147 7.146z' /></svg>",
  shorthandCurrentMonth: false,
  showMonths: 1,
  static: false,
  time_24hr: false,
  weekNumbers: false,
  wrap: false
};

// node_modules/flatpickr/dist/esm/l10n/default.js
var english = {
  weekdays: {
    shorthand: ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"],
    longhand: [
      "Sunday",
      "Monday",
      "Tuesday",
      "Wednesday",
      "Thursday",
      "Friday",
      "Saturday"
    ]
  },
  months: {
    shorthand: [
      "Jan",
      "Feb",
      "Mar",
      "Apr",
      "May",
      "Jun",
      "Jul",
      "Aug",
      "Sep",
      "Oct",
      "Nov",
      "Dec"
    ],
    longhand: [
      "January",
      "February",
      "March",
      "April",
      "May",
      "June",
      "July",
      "August",
      "September",
      "October",
      "November",
      "December"
    ]
  },
  daysInMonth: [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31],
  firstDayOfWeek: 0,
  ordinal: function(nth) {
    var s = nth % 100;
    if (s > 3 && s < 21)
      return "th";
    switch (s % 10) {
      case 1:
        return "st";
      case 2:
        return "nd";
      case 3:
        return "rd";
      default:
        return "th";
    }
  },
  rangeSeparator: " to ",
  weekAbbreviation: "Wk",
  scrollTitle: "Scroll to increment",
  toggleTitle: "Click to toggle",
  amPM: ["AM", "PM"],
  yearAriaLabel: "Year",
  monthAriaLabel: "Month",
  hourAriaLabel: "Hour",
  minuteAriaLabel: "Minute",
  time_24hr: false
};
var default_default = english;

// node_modules/flatpickr/dist/esm/utils/index.js
var pad = function(number, length) {
  if (length === void 0) {
    length = 2;
  }
  return ("000" + number).slice(length * -1);
};
var int = function(bool) {
  return bool === true ? 1 : 0;
};
function debounce2(fn2, wait) {
  var t;
  return function() {
    var _this = this;
    var args = arguments;
    clearTimeout(t);
    t = setTimeout(function() {
      return fn2.apply(_this, args);
    }, wait);
  };
}
var arrayify = function(obj) {
  return obj instanceof Array ? obj : [obj];
};

// node_modules/flatpickr/dist/esm/utils/dom.js
function toggleClass(elem, className, bool) {
  if (bool === true)
    return elem.classList.add(className);
  elem.classList.remove(className);
}
function createElement(tag, className, content) {
  var e = window.document.createElement(tag);
  className = className || "";
  content = content || "";
  e.className = className;
  if (content !== void 0)
    e.textContent = content;
  return e;
}
function clearNode(node) {
  while (node.firstChild)
    node.removeChild(node.firstChild);
}
function findParent(node, condition) {
  if (condition(node))
    return node;
  else if (node.parentNode)
    return findParent(node.parentNode, condition);
  return void 0;
}
function createNumberInput(inputClassName, opts) {
  var wrapper = createElement("div", "numInputWrapper"), numInput = createElement("input", "numInput " + inputClassName), arrowUp = createElement("span", "arrowUp"), arrowDown = createElement("span", "arrowDown");
  if (navigator.userAgent.indexOf("MSIE 9.0") === -1) {
    numInput.type = "number";
  } else {
    numInput.type = "text";
    numInput.pattern = "\\d*";
  }
  if (opts !== void 0)
    for (var key in opts)
      numInput.setAttribute(key, opts[key]);
  wrapper.appendChild(numInput);
  wrapper.appendChild(arrowUp);
  wrapper.appendChild(arrowDown);
  return wrapper;
}
function getEventTarget(event) {
  try {
    if (typeof event.composedPath === "function") {
      var path = event.composedPath();
      return path[0];
    }
    return event.target;
  } catch (error) {
    return event.target;
  }
}

// node_modules/flatpickr/dist/esm/utils/formatting.js
var doNothing = function() {
  return void 0;
};
var monthToStr = function(monthNumber, shorthand, locale) {
  return locale.months[shorthand ? "shorthand" : "longhand"][monthNumber];
};
var revFormat = {
  D: doNothing,
  F: function(dateObj, monthName, locale) {
    dateObj.setMonth(locale.months.longhand.indexOf(monthName));
  },
  G: function(dateObj, hour) {
    dateObj.setHours((dateObj.getHours() >= 12 ? 12 : 0) + parseFloat(hour));
  },
  H: function(dateObj, hour) {
    dateObj.setHours(parseFloat(hour));
  },
  J: function(dateObj, day) {
    dateObj.setDate(parseFloat(day));
  },
  K: function(dateObj, amPM, locale) {
    dateObj.setHours(dateObj.getHours() % 12 + 12 * int(new RegExp(locale.amPM[1], "i").test(amPM)));
  },
  M: function(dateObj, shortMonth, locale) {
    dateObj.setMonth(locale.months.shorthand.indexOf(shortMonth));
  },
  S: function(dateObj, seconds) {
    dateObj.setSeconds(parseFloat(seconds));
  },
  U: function(_, unixSeconds) {
    return new Date(parseFloat(unixSeconds) * 1e3);
  },
  W: function(dateObj, weekNum, locale) {
    var weekNumber = parseInt(weekNum);
    var date = new Date(dateObj.getFullYear(), 0, 2 + (weekNumber - 1) * 7, 0, 0, 0, 0);
    date.setDate(date.getDate() - date.getDay() + locale.firstDayOfWeek);
    return date;
  },
  Y: function(dateObj, year) {
    dateObj.setFullYear(parseFloat(year));
  },
  Z: function(_, ISODate) {
    return new Date(ISODate);
  },
  d: function(dateObj, day) {
    dateObj.setDate(parseFloat(day));
  },
  h: function(dateObj, hour) {
    dateObj.setHours((dateObj.getHours() >= 12 ? 12 : 0) + parseFloat(hour));
  },
  i: function(dateObj, minutes) {
    dateObj.setMinutes(parseFloat(minutes));
  },
  j: function(dateObj, day) {
    dateObj.setDate(parseFloat(day));
  },
  l: doNothing,
  m: function(dateObj, month) {
    dateObj.setMonth(parseFloat(month) - 1);
  },
  n: function(dateObj, month) {
    dateObj.setMonth(parseFloat(month) - 1);
  },
  s: function(dateObj, seconds) {
    dateObj.setSeconds(parseFloat(seconds));
  },
  u: function(_, unixMillSeconds) {
    return new Date(parseFloat(unixMillSeconds));
  },
  w: doNothing,
  y: function(dateObj, year) {
    dateObj.setFullYear(2e3 + parseFloat(year));
  }
};
var tokenRegex = {
  D: "",
  F: "",
  G: "(\\d\\d|\\d)",
  H: "(\\d\\d|\\d)",
  J: "(\\d\\d|\\d)\\w+",
  K: "",
  M: "",
  S: "(\\d\\d|\\d)",
  U: "(.+)",
  W: "(\\d\\d|\\d)",
  Y: "(\\d{4})",
  Z: "(.+)",
  d: "(\\d\\d|\\d)",
  h: "(\\d\\d|\\d)",
  i: "(\\d\\d|\\d)",
  j: "(\\d\\d|\\d)",
  l: "",
  m: "(\\d\\d|\\d)",
  n: "(\\d\\d|\\d)",
  s: "(\\d\\d|\\d)",
  u: "(.+)",
  w: "(\\d\\d|\\d)",
  y: "(\\d{2})"
};
var formats = {
  Z: function(date) {
    return date.toISOString();
  },
  D: function(date, locale, options2) {
    return locale.weekdays.shorthand[formats.w(date, locale, options2)];
  },
  F: function(date, locale, options2) {
    return monthToStr(formats.n(date, locale, options2) - 1, false, locale);
  },
  G: function(date, locale, options2) {
    return pad(formats.h(date, locale, options2));
  },
  H: function(date) {
    return pad(date.getHours());
  },
  J: function(date, locale) {
    return locale.ordinal !== void 0 ? date.getDate() + locale.ordinal(date.getDate()) : date.getDate();
  },
  K: function(date, locale) {
    return locale.amPM[int(date.getHours() > 11)];
  },
  M: function(date, locale) {
    return monthToStr(date.getMonth(), true, locale);
  },
  S: function(date) {
    return pad(date.getSeconds());
  },
  U: function(date) {
    return date.getTime() / 1e3;
  },
  W: function(date, _, options2) {
    return options2.getWeek(date);
  },
  Y: function(date) {
    return pad(date.getFullYear(), 4);
  },
  d: function(date) {
    return pad(date.getDate());
  },
  h: function(date) {
    return date.getHours() % 12 ? date.getHours() % 12 : 12;
  },
  i: function(date) {
    return pad(date.getMinutes());
  },
  j: function(date) {
    return date.getDate();
  },
  l: function(date, locale) {
    return locale.weekdays.longhand[date.getDay()];
  },
  m: function(date) {
    return pad(date.getMonth() + 1);
  },
  n: function(date) {
    return date.getMonth() + 1;
  },
  s: function(date) {
    return date.getSeconds();
  },
  u: function(date) {
    return date.getTime();
  },
  w: function(date) {
    return date.getDay();
  },
  y: function(date) {
    return String(date.getFullYear()).substring(2);
  }
};

// node_modules/flatpickr/dist/esm/utils/dates.js
var createDateFormatter = function(_a) {
  var _b = _a.config, config = _b === void 0 ? defaults : _b, _c = _a.l10n, l10n = _c === void 0 ? english : _c, _d = _a.isMobile, isMobile = _d === void 0 ? false : _d;
  return function(dateObj, frmt, overrideLocale) {
    var locale = overrideLocale || l10n;
    if (config.formatDate !== void 0 && !isMobile) {
      return config.formatDate(dateObj, frmt, locale);
    }
    return frmt.split("").map(function(c, i, arr) {
      return formats[c] && arr[i - 1] !== "\\" ? formats[c](dateObj, locale, config) : c !== "\\" ? c : "";
    }).join("");
  };
};
var createDateParser = function(_a) {
  var _b = _a.config, config = _b === void 0 ? defaults : _b, _c = _a.l10n, l10n = _c === void 0 ? english : _c;
  return function(date, givenFormat, timeless, customLocale) {
    if (date !== 0 && !date)
      return void 0;
    var locale = customLocale || l10n;
    var parsedDate;
    var dateOrig = date;
    if (date instanceof Date)
      parsedDate = new Date(date.getTime());
    else if (typeof date !== "string" && date.toFixed !== void 0)
      parsedDate = new Date(date);
    else if (typeof date === "string") {
      var format2 = givenFormat || (config || defaults).dateFormat;
      var datestr = String(date).trim();
      if (datestr === "today") {
        parsedDate = new Date();
        timeless = true;
      } else if (config && config.parseDate) {
        parsedDate = config.parseDate(date, format2);
      } else if (/Z$/.test(datestr) || /GMT$/.test(datestr)) {
        parsedDate = new Date(date);
      } else {
        var matched = void 0, ops = [];
        for (var i = 0, matchIndex = 0, regexStr = ""; i < format2.length; i++) {
          var token = format2[i];
          var isBackSlash = token === "\\";
          var escaped = format2[i - 1] === "\\" || isBackSlash;
          if (tokenRegex[token] && !escaped) {
            regexStr += tokenRegex[token];
            var match = new RegExp(regexStr).exec(date);
            if (match && (matched = true)) {
              ops[token !== "Y" ? "push" : "unshift"]({
                fn: revFormat[token],
                val: match[++matchIndex]
              });
            }
          } else if (!isBackSlash)
            regexStr += ".";
        }
        parsedDate = !config || !config.noCalendar ? new Date(new Date().getFullYear(), 0, 1, 0, 0, 0, 0) : new Date(new Date().setHours(0, 0, 0, 0));
        ops.forEach(function(_a2) {
          var fn2 = _a2.fn, val = _a2.val;
          return parsedDate = fn2(parsedDate, val, locale) || parsedDate;
        });
        parsedDate = matched ? parsedDate : void 0;
      }
    }
    if (!(parsedDate instanceof Date && !isNaN(parsedDate.getTime()))) {
      config.errorHandler(new Error("Invalid date provided: " + dateOrig));
      return void 0;
    }
    if (timeless === true)
      parsedDate.setHours(0, 0, 0, 0);
    return parsedDate;
  };
};
function compareDates(date1, date2, timeless) {
  if (timeless === void 0) {
    timeless = true;
  }
  if (timeless !== false) {
    return new Date(date1.getTime()).setHours(0, 0, 0, 0) - new Date(date2.getTime()).setHours(0, 0, 0, 0);
  }
  return date1.getTime() - date2.getTime();
}
var isBetween = function(ts, ts1, ts2) {
  return ts > Math.min(ts1, ts2) && ts < Math.max(ts1, ts2);
};
var calculateSecondsSinceMidnight = function(hours, minutes, seconds) {
  return hours * 3600 + minutes * 60 + seconds;
};
var parseSeconds = function(secondsSinceMidnight) {
  var hours = Math.floor(secondsSinceMidnight / 3600), minutes = (secondsSinceMidnight - hours * 3600) / 60;
  return [hours, minutes, secondsSinceMidnight - hours * 3600 - minutes * 60];
};
var duration = {
  DAY: 864e5
};
function getDefaultHours(config) {
  var hours = config.defaultHour;
  var minutes = config.defaultMinute;
  var seconds = config.defaultSeconds;
  if (config.minDate !== void 0) {
    var minHour = config.minDate.getHours();
    var minMinutes = config.minDate.getMinutes();
    var minSeconds = config.minDate.getSeconds();
    if (hours < minHour) {
      hours = minHour;
    }
    if (hours === minHour && minutes < minMinutes) {
      minutes = minMinutes;
    }
    if (hours === minHour && minutes === minMinutes && seconds < minSeconds)
      seconds = config.minDate.getSeconds();
  }
  if (config.maxDate !== void 0) {
    var maxHr = config.maxDate.getHours();
    var maxMinutes = config.maxDate.getMinutes();
    hours = Math.min(hours, maxHr);
    if (hours === maxHr)
      minutes = Math.min(maxMinutes, minutes);
    if (hours === maxHr && minutes === maxMinutes)
      seconds = config.maxDate.getSeconds();
  }
  return { hours, minutes, seconds };
}

// node_modules/flatpickr/dist/esm/utils/polyfills.js
if (typeof Object.assign !== "function") {
  Object.assign = function(target) {
    var args = [];
    for (var _i = 1; _i < arguments.length; _i++) {
      args[_i - 1] = arguments[_i];
    }
    if (!target) {
      throw TypeError("Cannot convert undefined or null to object");
    }
    var _loop_1 = function(source2) {
      if (source2) {
        Object.keys(source2).forEach(function(key) {
          return target[key] = source2[key];
        });
      }
    };
    for (var _a = 0, args_1 = args; _a < args_1.length; _a++) {
      var source = args_1[_a];
      _loop_1(source);
    }
    return target;
  };
}

// node_modules/flatpickr/dist/esm/index.js
var __assign = function() {
  __assign = Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];
      for (var p in s)
        if (Object.prototype.hasOwnProperty.call(s, p))
          t[p] = s[p];
    }
    return t;
  };
  return __assign.apply(this, arguments);
};
var __spreadArrays = function() {
  for (var s = 0, i = 0, il = arguments.length; i < il; i++)
    s += arguments[i].length;
  for (var r = Array(s), k = 0, i = 0; i < il; i++)
    for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
      r[k] = a[j];
  return r;
};
var DEBOUNCED_CHANGE_MS = 300;
function FlatpickrInstance(element, instanceConfig) {
  var self = {
    config: __assign(__assign({}, defaults), flatpickr.defaultConfig),
    l10n: default_default
  };
  self.parseDate = createDateParser({ config: self.config, l10n: self.l10n });
  self._handlers = [];
  self.pluginElements = [];
  self.loadedPlugins = [];
  self._bind = bind;
  self._setHoursFromDate = setHoursFromDate;
  self._positionCalendar = positionCalendar;
  self.changeMonth = changeMonth;
  self.changeYear = changeYear;
  self.clear = clear;
  self.close = close;
  self.onMouseOver = onMouseOver;
  self._createElement = createElement;
  self.createDay = createDay;
  self.destroy = destroy;
  self.isEnabled = isEnabled;
  self.jumpToDate = jumpToDate;
  self.updateValue = updateValue;
  self.open = open;
  self.redraw = redraw;
  self.set = set;
  self.setDate = setDate;
  self.toggle = toggle;
  function setupHelperFunctions() {
    self.utils = {
      getDaysInMonth: function(month, yr) {
        if (month === void 0) {
          month = self.currentMonth;
        }
        if (yr === void 0) {
          yr = self.currentYear;
        }
        if (month === 1 && (yr % 4 === 0 && yr % 100 !== 0 || yr % 400 === 0))
          return 29;
        return self.l10n.daysInMonth[month];
      }
    };
  }
  function init() {
    self.element = self.input = element;
    self.isOpen = false;
    parseConfig();
    setupLocale();
    setupInputs();
    setupDates();
    setupHelperFunctions();
    if (!self.isMobile)
      build();
    bindEvents();
    if (self.selectedDates.length || self.config.noCalendar) {
      if (self.config.enableTime) {
        setHoursFromDate(self.config.noCalendar ? self.latestSelectedDateObj : void 0);
      }
      updateValue(false);
    }
    setCalendarWidth();
    var isSafari = /^((?!chrome|android).)*safari/i.test(navigator.userAgent);
    if (!self.isMobile && isSafari) {
      positionCalendar();
    }
    triggerEvent("onReady");
  }
  function getClosestActiveElement() {
    var _a;
    return ((_a = self.calendarContainer) === null || _a === void 0 ? void 0 : _a.getRootNode()).activeElement || document.activeElement;
  }
  function bindToInstance(fn2) {
    return fn2.bind(self);
  }
  function setCalendarWidth() {
    var config = self.config;
    if (config.weekNumbers === false && config.showMonths === 1) {
      return;
    } else if (config.noCalendar !== true) {
      window.requestAnimationFrame(function() {
        if (self.calendarContainer !== void 0) {
          self.calendarContainer.style.visibility = "hidden";
          self.calendarContainer.style.display = "block";
        }
        if (self.daysContainer !== void 0) {
          var daysWidth = (self.days.offsetWidth + 1) * config.showMonths;
          self.daysContainer.style.width = daysWidth + "px";
          self.calendarContainer.style.width = daysWidth + (self.weekWrapper !== void 0 ? self.weekWrapper.offsetWidth : 0) + "px";
          self.calendarContainer.style.removeProperty("visibility");
          self.calendarContainer.style.removeProperty("display");
        }
      });
    }
  }
  function updateTime(e) {
    if (self.selectedDates.length === 0) {
      var defaultDate = self.config.minDate === void 0 || compareDates(new Date(), self.config.minDate) >= 0 ? new Date() : new Date(self.config.minDate.getTime());
      var defaults2 = getDefaultHours(self.config);
      defaultDate.setHours(defaults2.hours, defaults2.minutes, defaults2.seconds, defaultDate.getMilliseconds());
      self.selectedDates = [defaultDate];
      self.latestSelectedDateObj = defaultDate;
    }
    if (e !== void 0 && e.type !== "blur") {
      timeWrapper(e);
    }
    var prevValue = self._input.value;
    setHoursFromInputs();
    updateValue();
    if (self._input.value !== prevValue) {
      self._debouncedChange();
    }
  }
  function ampm2military(hour, amPM) {
    return hour % 12 + 12 * int(amPM === self.l10n.amPM[1]);
  }
  function military2ampm(hour) {
    switch (hour % 24) {
      case 0:
      case 12:
        return 12;
      default:
        return hour % 12;
    }
  }
  function setHoursFromInputs() {
    if (self.hourElement === void 0 || self.minuteElement === void 0)
      return;
    var hours = (parseInt(self.hourElement.value.slice(-2), 10) || 0) % 24, minutes = (parseInt(self.minuteElement.value, 10) || 0) % 60, seconds = self.secondElement !== void 0 ? (parseInt(self.secondElement.value, 10) || 0) % 60 : 0;
    if (self.amPM !== void 0) {
      hours = ampm2military(hours, self.amPM.textContent);
    }
    var limitMinHours = self.config.minTime !== void 0 || self.config.minDate && self.minDateHasTime && self.latestSelectedDateObj && compareDates(self.latestSelectedDateObj, self.config.minDate, true) === 0;
    var limitMaxHours = self.config.maxTime !== void 0 || self.config.maxDate && self.maxDateHasTime && self.latestSelectedDateObj && compareDates(self.latestSelectedDateObj, self.config.maxDate, true) === 0;
    if (self.config.maxTime !== void 0 && self.config.minTime !== void 0 && self.config.minTime > self.config.maxTime) {
      var minBound = calculateSecondsSinceMidnight(self.config.minTime.getHours(), self.config.minTime.getMinutes(), self.config.minTime.getSeconds());
      var maxBound = calculateSecondsSinceMidnight(self.config.maxTime.getHours(), self.config.maxTime.getMinutes(), self.config.maxTime.getSeconds());
      var currentTime = calculateSecondsSinceMidnight(hours, minutes, seconds);
      if (currentTime > maxBound && currentTime < minBound) {
        var result = parseSeconds(minBound);
        hours = result[0];
        minutes = result[1];
        seconds = result[2];
      }
    } else {
      if (limitMaxHours) {
        var maxTime = self.config.maxTime !== void 0 ? self.config.maxTime : self.config.maxDate;
        hours = Math.min(hours, maxTime.getHours());
        if (hours === maxTime.getHours())
          minutes = Math.min(minutes, maxTime.getMinutes());
        if (minutes === maxTime.getMinutes())
          seconds = Math.min(seconds, maxTime.getSeconds());
      }
      if (limitMinHours) {
        var minTime = self.config.minTime !== void 0 ? self.config.minTime : self.config.minDate;
        hours = Math.max(hours, minTime.getHours());
        if (hours === minTime.getHours() && minutes < minTime.getMinutes())
          minutes = minTime.getMinutes();
        if (minutes === minTime.getMinutes())
          seconds = Math.max(seconds, minTime.getSeconds());
      }
    }
    setHours(hours, minutes, seconds);
  }
  function setHoursFromDate(dateObj) {
    var date = dateObj || self.latestSelectedDateObj;
    if (date && date instanceof Date) {
      setHours(date.getHours(), date.getMinutes(), date.getSeconds());
    }
  }
  function setHours(hours, minutes, seconds) {
    if (self.latestSelectedDateObj !== void 0) {
      self.latestSelectedDateObj.setHours(hours % 24, minutes, seconds || 0, 0);
    }
    if (!self.hourElement || !self.minuteElement || self.isMobile)
      return;
    self.hourElement.value = pad(!self.config.time_24hr ? (12 + hours) % 12 + 12 * int(hours % 12 === 0) : hours);
    self.minuteElement.value = pad(minutes);
    if (self.amPM !== void 0)
      self.amPM.textContent = self.l10n.amPM[int(hours >= 12)];
    if (self.secondElement !== void 0)
      self.secondElement.value = pad(seconds);
  }
  function onYearInput(event) {
    var eventTarget = getEventTarget(event);
    var year = parseInt(eventTarget.value) + (event.delta || 0);
    if (year / 1e3 > 1 || event.key === "Enter" && !/[^\d]/.test(year.toString())) {
      changeYear(year);
    }
  }
  function bind(element2, event, handler, options2) {
    if (event instanceof Array)
      return event.forEach(function(ev) {
        return bind(element2, ev, handler, options2);
      });
    if (element2 instanceof Array)
      return element2.forEach(function(el) {
        return bind(el, event, handler, options2);
      });
    element2.addEventListener(event, handler, options2);
    self._handlers.push({
      remove: function() {
        return element2.removeEventListener(event, handler, options2);
      }
    });
  }
  function triggerChange() {
    triggerEvent("onChange");
  }
  function bindEvents() {
    if (self.config.wrap) {
      ["open", "close", "toggle", "clear"].forEach(function(evt) {
        Array.prototype.forEach.call(self.element.querySelectorAll("[data-" + evt + "]"), function(el) {
          return bind(el, "click", self[evt]);
        });
      });
    }
    if (self.isMobile) {
      setupMobile();
      return;
    }
    var debouncedResize = debounce2(onResize, 50);
    self._debouncedChange = debounce2(triggerChange, DEBOUNCED_CHANGE_MS);
    if (self.daysContainer && !/iPhone|iPad|iPod/i.test(navigator.userAgent))
      bind(self.daysContainer, "mouseover", function(e) {
        if (self.config.mode === "range")
          onMouseOver(getEventTarget(e));
      });
    bind(self._input, "keydown", onKeyDown);
    if (self.calendarContainer !== void 0) {
      bind(self.calendarContainer, "keydown", onKeyDown);
    }
    if (!self.config.inline && !self.config.static)
      bind(window, "resize", debouncedResize);
    if (window.ontouchstart !== void 0)
      bind(window.document, "touchstart", documentClick);
    else
      bind(window.document, "mousedown", documentClick);
    bind(window.document, "focus", documentClick, { capture: true });
    if (self.config.clickOpens === true) {
      bind(self._input, "focus", self.open);
      bind(self._input, "click", self.open);
    }
    if (self.daysContainer !== void 0) {
      bind(self.monthNav, "click", onMonthNavClick);
      bind(self.monthNav, ["keyup", "increment"], onYearInput);
      bind(self.daysContainer, "click", selectDate);
    }
    if (self.timeContainer !== void 0 && self.minuteElement !== void 0 && self.hourElement !== void 0) {
      var selText = function(e) {
        return getEventTarget(e).select();
      };
      bind(self.timeContainer, ["increment"], updateTime);
      bind(self.timeContainer, "blur", updateTime, { capture: true });
      bind(self.timeContainer, "click", timeIncrement);
      bind([self.hourElement, self.minuteElement], ["focus", "click"], selText);
      if (self.secondElement !== void 0)
        bind(self.secondElement, "focus", function() {
          return self.secondElement && self.secondElement.select();
        });
      if (self.amPM !== void 0) {
        bind(self.amPM, "click", function(e) {
          updateTime(e);
        });
      }
    }
    if (self.config.allowInput) {
      bind(self._input, "blur", onBlur);
    }
  }
  function jumpToDate(jumpDate, triggerChange2) {
    var jumpTo = jumpDate !== void 0 ? self.parseDate(jumpDate) : self.latestSelectedDateObj || (self.config.minDate && self.config.minDate > self.now ? self.config.minDate : self.config.maxDate && self.config.maxDate < self.now ? self.config.maxDate : self.now);
    var oldYear = self.currentYear;
    var oldMonth = self.currentMonth;
    try {
      if (jumpTo !== void 0) {
        self.currentYear = jumpTo.getFullYear();
        self.currentMonth = jumpTo.getMonth();
      }
    } catch (e) {
      e.message = "Invalid date supplied: " + jumpTo;
      self.config.errorHandler(e);
    }
    if (triggerChange2 && self.currentYear !== oldYear) {
      triggerEvent("onYearChange");
      buildMonthSwitch();
    }
    if (triggerChange2 && (self.currentYear !== oldYear || self.currentMonth !== oldMonth)) {
      triggerEvent("onMonthChange");
    }
    self.redraw();
  }
  function timeIncrement(e) {
    var eventTarget = getEventTarget(e);
    if (~eventTarget.className.indexOf("arrow"))
      incrementNumInput(e, eventTarget.classList.contains("arrowUp") ? 1 : -1);
  }
  function incrementNumInput(e, delta, inputElem) {
    var target = e && getEventTarget(e);
    var input = inputElem || target && target.parentNode && target.parentNode.firstChild;
    var event = createEvent("increment");
    event.delta = delta;
    input && input.dispatchEvent(event);
  }
  function build() {
    var fragment = window.document.createDocumentFragment();
    self.calendarContainer = createElement("div", "flatpickr-calendar");
    self.calendarContainer.tabIndex = -1;
    if (!self.config.noCalendar) {
      fragment.appendChild(buildMonthNav());
      self.innerContainer = createElement("div", "flatpickr-innerContainer");
      if (self.config.weekNumbers) {
        var _a = buildWeeks(), weekWrapper = _a.weekWrapper, weekNumbers = _a.weekNumbers;
        self.innerContainer.appendChild(weekWrapper);
        self.weekNumbers = weekNumbers;
        self.weekWrapper = weekWrapper;
      }
      self.rContainer = createElement("div", "flatpickr-rContainer");
      self.rContainer.appendChild(buildWeekdays());
      if (!self.daysContainer) {
        self.daysContainer = createElement("div", "flatpickr-days");
        self.daysContainer.tabIndex = -1;
      }
      buildDays();
      self.rContainer.appendChild(self.daysContainer);
      self.innerContainer.appendChild(self.rContainer);
      fragment.appendChild(self.innerContainer);
    }
    if (self.config.enableTime) {
      fragment.appendChild(buildTime());
    }
    toggleClass(self.calendarContainer, "rangeMode", self.config.mode === "range");
    toggleClass(self.calendarContainer, "animate", self.config.animate === true);
    toggleClass(self.calendarContainer, "multiMonth", self.config.showMonths > 1);
    self.calendarContainer.appendChild(fragment);
    var customAppend = self.config.appendTo !== void 0 && self.config.appendTo.nodeType !== void 0;
    if (self.config.inline || self.config.static) {
      self.calendarContainer.classList.add(self.config.inline ? "inline" : "static");
      if (self.config.inline) {
        if (!customAppend && self.element.parentNode)
          self.element.parentNode.insertBefore(self.calendarContainer, self._input.nextSibling);
        else if (self.config.appendTo !== void 0)
          self.config.appendTo.appendChild(self.calendarContainer);
      }
      if (self.config.static) {
        var wrapper = createElement("div", "flatpickr-wrapper");
        if (self.element.parentNode)
          self.element.parentNode.insertBefore(wrapper, self.element);
        wrapper.appendChild(self.element);
        if (self.altInput)
          wrapper.appendChild(self.altInput);
        wrapper.appendChild(self.calendarContainer);
      }
    }
    if (!self.config.static && !self.config.inline)
      (self.config.appendTo !== void 0 ? self.config.appendTo : window.document.body).appendChild(self.calendarContainer);
  }
  function createDay(className, date, _dayNumber, i) {
    var dateIsEnabled = isEnabled(date, true), dayElement = createElement("span", className, date.getDate().toString());
    dayElement.dateObj = date;
    dayElement.$i = i;
    dayElement.setAttribute("aria-label", self.formatDate(date, self.config.ariaDateFormat));
    if (className.indexOf("hidden") === -1 && compareDates(date, self.now) === 0) {
      self.todayDateElem = dayElement;
      dayElement.classList.add("today");
      dayElement.setAttribute("aria-current", "date");
    }
    if (dateIsEnabled) {
      dayElement.tabIndex = -1;
      if (isDateSelected(date)) {
        dayElement.classList.add("selected");
        self.selectedDateElem = dayElement;
        if (self.config.mode === "range") {
          toggleClass(dayElement, "startRange", self.selectedDates[0] && compareDates(date, self.selectedDates[0], true) === 0);
          toggleClass(dayElement, "endRange", self.selectedDates[1] && compareDates(date, self.selectedDates[1], true) === 0);
          if (className === "nextMonthDay")
            dayElement.classList.add("inRange");
        }
      }
    } else {
      dayElement.classList.add("flatpickr-disabled");
    }
    if (self.config.mode === "range") {
      if (isDateInRange(date) && !isDateSelected(date))
        dayElement.classList.add("inRange");
    }
    if (self.weekNumbers && self.config.showMonths === 1 && className !== "prevMonthDay" && i % 7 === 6) {
      self.weekNumbers.insertAdjacentHTML("beforeend", "<span class='flatpickr-day'>" + self.config.getWeek(date) + "</span>");
    }
    triggerEvent("onDayCreate", dayElement);
    return dayElement;
  }
  function focusOnDayElem(targetNode) {
    targetNode.focus();
    if (self.config.mode === "range")
      onMouseOver(targetNode);
  }
  function getFirstAvailableDay(delta) {
    var startMonth = delta > 0 ? 0 : self.config.showMonths - 1;
    var endMonth = delta > 0 ? self.config.showMonths : -1;
    for (var m = startMonth; m != endMonth; m += delta) {
      var month = self.daysContainer.children[m];
      var startIndex = delta > 0 ? 0 : month.children.length - 1;
      var endIndex = delta > 0 ? month.children.length : -1;
      for (var i = startIndex; i != endIndex; i += delta) {
        var c = month.children[i];
        if (c.className.indexOf("hidden") === -1 && isEnabled(c.dateObj))
          return c;
      }
    }
    return void 0;
  }
  function getNextAvailableDay(current, delta) {
    var givenMonth = current.className.indexOf("Month") === -1 ? current.dateObj.getMonth() : self.currentMonth;
    var endMonth = delta > 0 ? self.config.showMonths : -1;
    var loopDelta = delta > 0 ? 1 : -1;
    for (var m = givenMonth - self.currentMonth; m != endMonth; m += loopDelta) {
      var month = self.daysContainer.children[m];
      var startIndex = givenMonth - self.currentMonth === m ? current.$i + delta : delta < 0 ? month.children.length - 1 : 0;
      var numMonthDays = month.children.length;
      for (var i = startIndex; i >= 0 && i < numMonthDays && i != (delta > 0 ? numMonthDays : -1); i += loopDelta) {
        var c = month.children[i];
        if (c.className.indexOf("hidden") === -1 && isEnabled(c.dateObj) && Math.abs(current.$i - i) >= Math.abs(delta))
          return focusOnDayElem(c);
      }
    }
    self.changeMonth(loopDelta);
    focusOnDay(getFirstAvailableDay(loopDelta), 0);
    return void 0;
  }
  function focusOnDay(current, offset2) {
    var activeElement = getClosestActiveElement();
    var dayFocused = isInView(activeElement || document.body);
    var startElem = current !== void 0 ? current : dayFocused ? activeElement : self.selectedDateElem !== void 0 && isInView(self.selectedDateElem) ? self.selectedDateElem : self.todayDateElem !== void 0 && isInView(self.todayDateElem) ? self.todayDateElem : getFirstAvailableDay(offset2 > 0 ? 1 : -1);
    if (startElem === void 0) {
      self._input.focus();
    } else if (!dayFocused) {
      focusOnDayElem(startElem);
    } else {
      getNextAvailableDay(startElem, offset2);
    }
  }
  function buildMonthDays(year, month) {
    var firstOfMonth = (new Date(year, month, 1).getDay() - self.l10n.firstDayOfWeek + 7) % 7;
    var prevMonthDays = self.utils.getDaysInMonth((month - 1 + 12) % 12, year);
    var daysInMonth = self.utils.getDaysInMonth(month, year), days = window.document.createDocumentFragment(), isMultiMonth = self.config.showMonths > 1, prevMonthDayClass = isMultiMonth ? "prevMonthDay hidden" : "prevMonthDay", nextMonthDayClass = isMultiMonth ? "nextMonthDay hidden" : "nextMonthDay";
    var dayNumber = prevMonthDays + 1 - firstOfMonth, dayIndex = 0;
    for (; dayNumber <= prevMonthDays; dayNumber++, dayIndex++) {
      days.appendChild(createDay("flatpickr-day " + prevMonthDayClass, new Date(year, month - 1, dayNumber), dayNumber, dayIndex));
    }
    for (dayNumber = 1; dayNumber <= daysInMonth; dayNumber++, dayIndex++) {
      days.appendChild(createDay("flatpickr-day", new Date(year, month, dayNumber), dayNumber, dayIndex));
    }
    for (var dayNum = daysInMonth + 1; dayNum <= 42 - firstOfMonth && (self.config.showMonths === 1 || dayIndex % 7 !== 0); dayNum++, dayIndex++) {
      days.appendChild(createDay("flatpickr-day " + nextMonthDayClass, new Date(year, month + 1, dayNum % daysInMonth), dayNum, dayIndex));
    }
    var dayContainer = createElement("div", "dayContainer");
    dayContainer.appendChild(days);
    return dayContainer;
  }
  function buildDays() {
    if (self.daysContainer === void 0) {
      return;
    }
    clearNode(self.daysContainer);
    if (self.weekNumbers)
      clearNode(self.weekNumbers);
    var frag = document.createDocumentFragment();
    for (var i = 0; i < self.config.showMonths; i++) {
      var d = new Date(self.currentYear, self.currentMonth, 1);
      d.setMonth(self.currentMonth + i);
      frag.appendChild(buildMonthDays(d.getFullYear(), d.getMonth()));
    }
    self.daysContainer.appendChild(frag);
    self.days = self.daysContainer.firstChild;
    if (self.config.mode === "range" && self.selectedDates.length === 1) {
      onMouseOver();
    }
  }
  function buildMonthSwitch() {
    if (self.config.showMonths > 1 || self.config.monthSelectorType !== "dropdown")
      return;
    var shouldBuildMonth = function(month2) {
      if (self.config.minDate !== void 0 && self.currentYear === self.config.minDate.getFullYear() && month2 < self.config.minDate.getMonth()) {
        return false;
      }
      return !(self.config.maxDate !== void 0 && self.currentYear === self.config.maxDate.getFullYear() && month2 > self.config.maxDate.getMonth());
    };
    self.monthsDropdownContainer.tabIndex = -1;
    self.monthsDropdownContainer.innerHTML = "";
    for (var i = 0; i < 12; i++) {
      if (!shouldBuildMonth(i))
        continue;
      var month = createElement("option", "flatpickr-monthDropdown-month");
      month.value = new Date(self.currentYear, i).getMonth().toString();
      month.textContent = monthToStr(i, self.config.shorthandCurrentMonth, self.l10n);
      month.tabIndex = -1;
      if (self.currentMonth === i) {
        month.selected = true;
      }
      self.monthsDropdownContainer.appendChild(month);
    }
  }
  function buildMonth() {
    var container = createElement("div", "flatpickr-month");
    var monthNavFragment = window.document.createDocumentFragment();
    var monthElement;
    if (self.config.showMonths > 1 || self.config.monthSelectorType === "static") {
      monthElement = createElement("span", "cur-month");
    } else {
      self.monthsDropdownContainer = createElement("select", "flatpickr-monthDropdown-months");
      self.monthsDropdownContainer.setAttribute("aria-label", self.l10n.monthAriaLabel);
      bind(self.monthsDropdownContainer, "change", function(e) {
        var target = getEventTarget(e);
        var selectedMonth = parseInt(target.value, 10);
        self.changeMonth(selectedMonth - self.currentMonth);
        triggerEvent("onMonthChange");
      });
      buildMonthSwitch();
      monthElement = self.monthsDropdownContainer;
    }
    var yearInput = createNumberInput("cur-year", { tabindex: "-1" });
    var yearElement = yearInput.getElementsByTagName("input")[0];
    yearElement.setAttribute("aria-label", self.l10n.yearAriaLabel);
    if (self.config.minDate) {
      yearElement.setAttribute("min", self.config.minDate.getFullYear().toString());
    }
    if (self.config.maxDate) {
      yearElement.setAttribute("max", self.config.maxDate.getFullYear().toString());
      yearElement.disabled = !!self.config.minDate && self.config.minDate.getFullYear() === self.config.maxDate.getFullYear();
    }
    var currentMonth = createElement("div", "flatpickr-current-month");
    currentMonth.appendChild(monthElement);
    currentMonth.appendChild(yearInput);
    monthNavFragment.appendChild(currentMonth);
    container.appendChild(monthNavFragment);
    return {
      container,
      yearElement,
      monthElement
    };
  }
  function buildMonths() {
    clearNode(self.monthNav);
    self.monthNav.appendChild(self.prevMonthNav);
    if (self.config.showMonths) {
      self.yearElements = [];
      self.monthElements = [];
    }
    for (var m = self.config.showMonths; m--; ) {
      var month = buildMonth();
      self.yearElements.push(month.yearElement);
      self.monthElements.push(month.monthElement);
      self.monthNav.appendChild(month.container);
    }
    self.monthNav.appendChild(self.nextMonthNav);
  }
  function buildMonthNav() {
    self.monthNav = createElement("div", "flatpickr-months");
    self.yearElements = [];
    self.monthElements = [];
    self.prevMonthNav = createElement("span", "flatpickr-prev-month");
    self.prevMonthNav.innerHTML = self.config.prevArrow;
    self.nextMonthNav = createElement("span", "flatpickr-next-month");
    self.nextMonthNav.innerHTML = self.config.nextArrow;
    buildMonths();
    Object.defineProperty(self, "_hidePrevMonthArrow", {
      get: function() {
        return self.__hidePrevMonthArrow;
      },
      set: function(bool) {
        if (self.__hidePrevMonthArrow !== bool) {
          toggleClass(self.prevMonthNav, "flatpickr-disabled", bool);
          self.__hidePrevMonthArrow = bool;
        }
      }
    });
    Object.defineProperty(self, "_hideNextMonthArrow", {
      get: function() {
        return self.__hideNextMonthArrow;
      },
      set: function(bool) {
        if (self.__hideNextMonthArrow !== bool) {
          toggleClass(self.nextMonthNav, "flatpickr-disabled", bool);
          self.__hideNextMonthArrow = bool;
        }
      }
    });
    self.currentYearElement = self.yearElements[0];
    updateNavigationCurrentMonth();
    return self.monthNav;
  }
  function buildTime() {
    self.calendarContainer.classList.add("hasTime");
    if (self.config.noCalendar)
      self.calendarContainer.classList.add("noCalendar");
    var defaults2 = getDefaultHours(self.config);
    self.timeContainer = createElement("div", "flatpickr-time");
    self.timeContainer.tabIndex = -1;
    var separator = createElement("span", "flatpickr-time-separator", ":");
    var hourInput = createNumberInput("flatpickr-hour", {
      "aria-label": self.l10n.hourAriaLabel
    });
    self.hourElement = hourInput.getElementsByTagName("input")[0];
    var minuteInput = createNumberInput("flatpickr-minute", {
      "aria-label": self.l10n.minuteAriaLabel
    });
    self.minuteElement = minuteInput.getElementsByTagName("input")[0];
    self.hourElement.tabIndex = self.minuteElement.tabIndex = -1;
    self.hourElement.value = pad(self.latestSelectedDateObj ? self.latestSelectedDateObj.getHours() : self.config.time_24hr ? defaults2.hours : military2ampm(defaults2.hours));
    self.minuteElement.value = pad(self.latestSelectedDateObj ? self.latestSelectedDateObj.getMinutes() : defaults2.minutes);
    self.hourElement.setAttribute("step", self.config.hourIncrement.toString());
    self.minuteElement.setAttribute("step", self.config.minuteIncrement.toString());
    self.hourElement.setAttribute("min", self.config.time_24hr ? "0" : "1");
    self.hourElement.setAttribute("max", self.config.time_24hr ? "23" : "12");
    self.hourElement.setAttribute("maxlength", "2");
    self.minuteElement.setAttribute("min", "0");
    self.minuteElement.setAttribute("max", "59");
    self.minuteElement.setAttribute("maxlength", "2");
    self.timeContainer.appendChild(hourInput);
    self.timeContainer.appendChild(separator);
    self.timeContainer.appendChild(minuteInput);
    if (self.config.time_24hr)
      self.timeContainer.classList.add("time24hr");
    if (self.config.enableSeconds) {
      self.timeContainer.classList.add("hasSeconds");
      var secondInput = createNumberInput("flatpickr-second");
      self.secondElement = secondInput.getElementsByTagName("input")[0];
      self.secondElement.value = pad(self.latestSelectedDateObj ? self.latestSelectedDateObj.getSeconds() : defaults2.seconds);
      self.secondElement.setAttribute("step", self.minuteElement.getAttribute("step"));
      self.secondElement.setAttribute("min", "0");
      self.secondElement.setAttribute("max", "59");
      self.secondElement.setAttribute("maxlength", "2");
      self.timeContainer.appendChild(createElement("span", "flatpickr-time-separator", ":"));
      self.timeContainer.appendChild(secondInput);
    }
    if (!self.config.time_24hr) {
      self.amPM = createElement("span", "flatpickr-am-pm", self.l10n.amPM[int((self.latestSelectedDateObj ? self.hourElement.value : self.config.defaultHour) > 11)]);
      self.amPM.title = self.l10n.toggleTitle;
      self.amPM.tabIndex = -1;
      self.timeContainer.appendChild(self.amPM);
    }
    return self.timeContainer;
  }
  function buildWeekdays() {
    if (!self.weekdayContainer)
      self.weekdayContainer = createElement("div", "flatpickr-weekdays");
    else
      clearNode(self.weekdayContainer);
    for (var i = self.config.showMonths; i--; ) {
      var container = createElement("div", "flatpickr-weekdaycontainer");
      self.weekdayContainer.appendChild(container);
    }
    updateWeekdays();
    return self.weekdayContainer;
  }
  function updateWeekdays() {
    if (!self.weekdayContainer) {
      return;
    }
    var firstDayOfWeek = self.l10n.firstDayOfWeek;
    var weekdays = __spreadArrays(self.l10n.weekdays.shorthand);
    if (firstDayOfWeek > 0 && firstDayOfWeek < weekdays.length) {
      weekdays = __spreadArrays(weekdays.splice(firstDayOfWeek, weekdays.length), weekdays.splice(0, firstDayOfWeek));
    }
    for (var i = self.config.showMonths; i--; ) {
      self.weekdayContainer.children[i].innerHTML = "\n      <span class='flatpickr-weekday'>\n        " + weekdays.join("</span><span class='flatpickr-weekday'>") + "\n      </span>\n      ";
    }
  }
  function buildWeeks() {
    self.calendarContainer.classList.add("hasWeeks");
    var weekWrapper = createElement("div", "flatpickr-weekwrapper");
    weekWrapper.appendChild(createElement("span", "flatpickr-weekday", self.l10n.weekAbbreviation));
    var weekNumbers = createElement("div", "flatpickr-weeks");
    weekWrapper.appendChild(weekNumbers);
    return {
      weekWrapper,
      weekNumbers
    };
  }
  function changeMonth(value, isOffset) {
    if (isOffset === void 0) {
      isOffset = true;
    }
    var delta = isOffset ? value : value - self.currentMonth;
    if (delta < 0 && self._hidePrevMonthArrow === true || delta > 0 && self._hideNextMonthArrow === true)
      return;
    self.currentMonth += delta;
    if (self.currentMonth < 0 || self.currentMonth > 11) {
      self.currentYear += self.currentMonth > 11 ? 1 : -1;
      self.currentMonth = (self.currentMonth + 12) % 12;
      triggerEvent("onYearChange");
      buildMonthSwitch();
    }
    buildDays();
    triggerEvent("onMonthChange");
    updateNavigationCurrentMonth();
  }
  function clear(triggerChangeEvent, toInitial) {
    if (triggerChangeEvent === void 0) {
      triggerChangeEvent = true;
    }
    if (toInitial === void 0) {
      toInitial = true;
    }
    self.input.value = "";
    if (self.altInput !== void 0)
      self.altInput.value = "";
    if (self.mobileInput !== void 0)
      self.mobileInput.value = "";
    self.selectedDates = [];
    self.latestSelectedDateObj = void 0;
    if (toInitial === true) {
      self.currentYear = self._initialDate.getFullYear();
      self.currentMonth = self._initialDate.getMonth();
    }
    if (self.config.enableTime === true) {
      var _a = getDefaultHours(self.config), hours = _a.hours, minutes = _a.minutes, seconds = _a.seconds;
      setHours(hours, minutes, seconds);
    }
    self.redraw();
    if (triggerChangeEvent)
      triggerEvent("onChange");
  }
  function close() {
    self.isOpen = false;
    if (!self.isMobile) {
      if (self.calendarContainer !== void 0) {
        self.calendarContainer.classList.remove("open");
      }
      if (self._input !== void 0) {
        self._input.classList.remove("active");
      }
    }
    triggerEvent("onClose");
  }
  function destroy() {
    if (self.config !== void 0)
      triggerEvent("onDestroy");
    for (var i = self._handlers.length; i--; ) {
      self._handlers[i].remove();
    }
    self._handlers = [];
    if (self.mobileInput) {
      if (self.mobileInput.parentNode)
        self.mobileInput.parentNode.removeChild(self.mobileInput);
      self.mobileInput = void 0;
    } else if (self.calendarContainer && self.calendarContainer.parentNode) {
      if (self.config.static && self.calendarContainer.parentNode) {
        var wrapper = self.calendarContainer.parentNode;
        wrapper.lastChild && wrapper.removeChild(wrapper.lastChild);
        if (wrapper.parentNode) {
          while (wrapper.firstChild)
            wrapper.parentNode.insertBefore(wrapper.firstChild, wrapper);
          wrapper.parentNode.removeChild(wrapper);
        }
      } else
        self.calendarContainer.parentNode.removeChild(self.calendarContainer);
    }
    if (self.altInput) {
      self.input.type = "text";
      if (self.altInput.parentNode)
        self.altInput.parentNode.removeChild(self.altInput);
      delete self.altInput;
    }
    if (self.input) {
      self.input.type = self.input._type;
      self.input.classList.remove("flatpickr-input");
      self.input.removeAttribute("readonly");
    }
    [
      "_showTimeInput",
      "latestSelectedDateObj",
      "_hideNextMonthArrow",
      "_hidePrevMonthArrow",
      "__hideNextMonthArrow",
      "__hidePrevMonthArrow",
      "isMobile",
      "isOpen",
      "selectedDateElem",
      "minDateHasTime",
      "maxDateHasTime",
      "days",
      "daysContainer",
      "_input",
      "_positionElement",
      "innerContainer",
      "rContainer",
      "monthNav",
      "todayDateElem",
      "calendarContainer",
      "weekdayContainer",
      "prevMonthNav",
      "nextMonthNav",
      "monthsDropdownContainer",
      "currentMonthElement",
      "currentYearElement",
      "navigationCurrentMonth",
      "selectedDateElem",
      "config"
    ].forEach(function(k) {
      try {
        delete self[k];
      } catch (_) {
      }
    });
  }
  function isCalendarElem(elem) {
    return self.calendarContainer.contains(elem);
  }
  function documentClick(e) {
    if (self.isOpen && !self.config.inline) {
      var eventTarget_1 = getEventTarget(e);
      var isCalendarElement = isCalendarElem(eventTarget_1);
      var isInput = eventTarget_1 === self.input || eventTarget_1 === self.altInput || self.element.contains(eventTarget_1) || e.path && e.path.indexOf && (~e.path.indexOf(self.input) || ~e.path.indexOf(self.altInput));
      var lostFocus = !isInput && !isCalendarElement && !isCalendarElem(e.relatedTarget);
      var isIgnored = !self.config.ignoredFocusElements.some(function(elem) {
        return elem.contains(eventTarget_1);
      });
      if (lostFocus && isIgnored) {
        if (self.config.allowInput) {
          self.setDate(self._input.value, false, self.config.altInput ? self.config.altFormat : self.config.dateFormat);
        }
        if (self.timeContainer !== void 0 && self.minuteElement !== void 0 && self.hourElement !== void 0 && self.input.value !== "" && self.input.value !== void 0) {
          updateTime();
        }
        self.close();
        if (self.config && self.config.mode === "range" && self.selectedDates.length === 1)
          self.clear(false);
      }
    }
  }
  function changeYear(newYear) {
    if (!newYear || self.config.minDate && newYear < self.config.minDate.getFullYear() || self.config.maxDate && newYear > self.config.maxDate.getFullYear())
      return;
    var newYearNum = newYear, isNewYear = self.currentYear !== newYearNum;
    self.currentYear = newYearNum || self.currentYear;
    if (self.config.maxDate && self.currentYear === self.config.maxDate.getFullYear()) {
      self.currentMonth = Math.min(self.config.maxDate.getMonth(), self.currentMonth);
    } else if (self.config.minDate && self.currentYear === self.config.minDate.getFullYear()) {
      self.currentMonth = Math.max(self.config.minDate.getMonth(), self.currentMonth);
    }
    if (isNewYear) {
      self.redraw();
      triggerEvent("onYearChange");
      buildMonthSwitch();
    }
  }
  function isEnabled(date, timeless) {
    var _a;
    if (timeless === void 0) {
      timeless = true;
    }
    var dateToCheck = self.parseDate(date, void 0, timeless);
    if (self.config.minDate && dateToCheck && compareDates(dateToCheck, self.config.minDate, timeless !== void 0 ? timeless : !self.minDateHasTime) < 0 || self.config.maxDate && dateToCheck && compareDates(dateToCheck, self.config.maxDate, timeless !== void 0 ? timeless : !self.maxDateHasTime) > 0)
      return false;
    if (!self.config.enable && self.config.disable.length === 0)
      return true;
    if (dateToCheck === void 0)
      return false;
    var bool = !!self.config.enable, array = (_a = self.config.enable) !== null && _a !== void 0 ? _a : self.config.disable;
    for (var i = 0, d = void 0; i < array.length; i++) {
      d = array[i];
      if (typeof d === "function" && d(dateToCheck))
        return bool;
      else if (d instanceof Date && dateToCheck !== void 0 && d.getTime() === dateToCheck.getTime())
        return bool;
      else if (typeof d === "string") {
        var parsed = self.parseDate(d, void 0, true);
        return parsed && parsed.getTime() === dateToCheck.getTime() ? bool : !bool;
      } else if (typeof d === "object" && dateToCheck !== void 0 && d.from && d.to && dateToCheck.getTime() >= d.from.getTime() && dateToCheck.getTime() <= d.to.getTime())
        return bool;
    }
    return !bool;
  }
  function isInView(elem) {
    if (self.daysContainer !== void 0)
      return elem.className.indexOf("hidden") === -1 && elem.className.indexOf("flatpickr-disabled") === -1 && self.daysContainer.contains(elem);
    return false;
  }
  function onBlur(e) {
    var isInput = e.target === self._input;
    var valueChanged = self._input.value.trimEnd() !== getDateStr();
    if (isInput && valueChanged && !(e.relatedTarget && isCalendarElem(e.relatedTarget))) {
      self.setDate(self._input.value, true, e.target === self.altInput ? self.config.altFormat : self.config.dateFormat);
    }
  }
  function onKeyDown(e) {
    var eventTarget = getEventTarget(e);
    var isInput = self.config.wrap ? element.contains(eventTarget) : eventTarget === self._input;
    var allowInput = self.config.allowInput;
    var allowKeydown = self.isOpen && (!allowInput || !isInput);
    var allowInlineKeydown = self.config.inline && isInput && !allowInput;
    if (e.keyCode === 13 && isInput) {
      if (allowInput) {
        self.setDate(self._input.value, true, eventTarget === self.altInput ? self.config.altFormat : self.config.dateFormat);
        self.close();
        return eventTarget.blur();
      } else {
        self.open();
      }
    } else if (isCalendarElem(eventTarget) || allowKeydown || allowInlineKeydown) {
      var isTimeObj = !!self.timeContainer && self.timeContainer.contains(eventTarget);
      switch (e.keyCode) {
        case 13:
          if (isTimeObj) {
            e.preventDefault();
            updateTime();
            focusAndClose();
          } else
            selectDate(e);
          break;
        case 27:
          e.preventDefault();
          focusAndClose();
          break;
        case 8:
        case 46:
          if (isInput && !self.config.allowInput) {
            e.preventDefault();
            self.clear();
          }
          break;
        case 37:
        case 39:
          if (!isTimeObj && !isInput) {
            e.preventDefault();
            var activeElement = getClosestActiveElement();
            if (self.daysContainer !== void 0 && (allowInput === false || activeElement && isInView(activeElement))) {
              var delta_1 = e.keyCode === 39 ? 1 : -1;
              if (!e.ctrlKey)
                focusOnDay(void 0, delta_1);
              else {
                e.stopPropagation();
                changeMonth(delta_1);
                focusOnDay(getFirstAvailableDay(1), 0);
              }
            }
          } else if (self.hourElement)
            self.hourElement.focus();
          break;
        case 38:
        case 40:
          e.preventDefault();
          var delta = e.keyCode === 40 ? 1 : -1;
          if (self.daysContainer && eventTarget.$i !== void 0 || eventTarget === self.input || eventTarget === self.altInput) {
            if (e.ctrlKey) {
              e.stopPropagation();
              changeYear(self.currentYear - delta);
              focusOnDay(getFirstAvailableDay(1), 0);
            } else if (!isTimeObj)
              focusOnDay(void 0, delta * 7);
          } else if (eventTarget === self.currentYearElement) {
            changeYear(self.currentYear - delta);
          } else if (self.config.enableTime) {
            if (!isTimeObj && self.hourElement)
              self.hourElement.focus();
            updateTime(e);
            self._debouncedChange();
          }
          break;
        case 9:
          if (isTimeObj) {
            var elems = [
              self.hourElement,
              self.minuteElement,
              self.secondElement,
              self.amPM
            ].concat(self.pluginElements).filter(function(x) {
              return x;
            });
            var i = elems.indexOf(eventTarget);
            if (i !== -1) {
              var target = elems[i + (e.shiftKey ? -1 : 1)];
              e.preventDefault();
              (target || self._input).focus();
            }
          } else if (!self.config.noCalendar && self.daysContainer && self.daysContainer.contains(eventTarget) && e.shiftKey) {
            e.preventDefault();
            self._input.focus();
          }
          break;
        default:
          break;
      }
    }
    if (self.amPM !== void 0 && eventTarget === self.amPM) {
      switch (e.key) {
        case self.l10n.amPM[0].charAt(0):
        case self.l10n.amPM[0].charAt(0).toLowerCase():
          self.amPM.textContent = self.l10n.amPM[0];
          setHoursFromInputs();
          updateValue();
          break;
        case self.l10n.amPM[1].charAt(0):
        case self.l10n.amPM[1].charAt(0).toLowerCase():
          self.amPM.textContent = self.l10n.amPM[1];
          setHoursFromInputs();
          updateValue();
          break;
      }
    }
    if (isInput || isCalendarElem(eventTarget)) {
      triggerEvent("onKeyDown", e);
    }
  }
  function onMouseOver(elem, cellClass) {
    if (cellClass === void 0) {
      cellClass = "flatpickr-day";
    }
    if (self.selectedDates.length !== 1 || elem && (!elem.classList.contains(cellClass) || elem.classList.contains("flatpickr-disabled")))
      return;
    var hoverDate = elem ? elem.dateObj.getTime() : self.days.firstElementChild.dateObj.getTime(), initialDate = self.parseDate(self.selectedDates[0], void 0, true).getTime(), rangeStartDate = Math.min(hoverDate, self.selectedDates[0].getTime()), rangeEndDate = Math.max(hoverDate, self.selectedDates[0].getTime());
    var containsDisabled = false;
    var minRange = 0, maxRange = 0;
    for (var t = rangeStartDate; t < rangeEndDate; t += duration.DAY) {
      if (!isEnabled(new Date(t), true)) {
        containsDisabled = containsDisabled || t > rangeStartDate && t < rangeEndDate;
        if (t < initialDate && (!minRange || t > minRange))
          minRange = t;
        else if (t > initialDate && (!maxRange || t < maxRange))
          maxRange = t;
      }
    }
    var hoverableCells = Array.from(self.rContainer.querySelectorAll("*:nth-child(-n+" + self.config.showMonths + ") > ." + cellClass));
    hoverableCells.forEach(function(dayElem) {
      var date = dayElem.dateObj;
      var timestamp = date.getTime();
      var outOfRange = minRange > 0 && timestamp < minRange || maxRange > 0 && timestamp > maxRange;
      if (outOfRange) {
        dayElem.classList.add("notAllowed");
        ["inRange", "startRange", "endRange"].forEach(function(c) {
          dayElem.classList.remove(c);
        });
        return;
      } else if (containsDisabled && !outOfRange)
        return;
      ["startRange", "inRange", "endRange", "notAllowed"].forEach(function(c) {
        dayElem.classList.remove(c);
      });
      if (elem !== void 0) {
        elem.classList.add(hoverDate <= self.selectedDates[0].getTime() ? "startRange" : "endRange");
        if (initialDate < hoverDate && timestamp === initialDate)
          dayElem.classList.add("startRange");
        else if (initialDate > hoverDate && timestamp === initialDate)
          dayElem.classList.add("endRange");
        if (timestamp >= minRange && (maxRange === 0 || timestamp <= maxRange) && isBetween(timestamp, initialDate, hoverDate))
          dayElem.classList.add("inRange");
      }
    });
  }
  function onResize() {
    if (self.isOpen && !self.config.static && !self.config.inline)
      positionCalendar();
  }
  function open(e, positionElement) {
    if (positionElement === void 0) {
      positionElement = self._positionElement;
    }
    if (self.isMobile === true) {
      if (e) {
        e.preventDefault();
        var eventTarget = getEventTarget(e);
        if (eventTarget) {
          eventTarget.blur();
        }
      }
      if (self.mobileInput !== void 0) {
        self.mobileInput.focus();
        self.mobileInput.click();
      }
      triggerEvent("onOpen");
      return;
    } else if (self._input.disabled || self.config.inline) {
      return;
    }
    var wasOpen = self.isOpen;
    self.isOpen = true;
    if (!wasOpen) {
      self.calendarContainer.classList.add("open");
      self._input.classList.add("active");
      triggerEvent("onOpen");
      positionCalendar(positionElement);
    }
    if (self.config.enableTime === true && self.config.noCalendar === true) {
      if (self.config.allowInput === false && (e === void 0 || !self.timeContainer.contains(e.relatedTarget))) {
        setTimeout(function() {
          return self.hourElement.select();
        }, 50);
      }
    }
  }
  function minMaxDateSetter(type) {
    return function(date) {
      var dateObj = self.config["_" + type + "Date"] = self.parseDate(date, self.config.dateFormat);
      var inverseDateObj = self.config["_" + (type === "min" ? "max" : "min") + "Date"];
      if (dateObj !== void 0) {
        self[type === "min" ? "minDateHasTime" : "maxDateHasTime"] = dateObj.getHours() > 0 || dateObj.getMinutes() > 0 || dateObj.getSeconds() > 0;
      }
      if (self.selectedDates) {
        self.selectedDates = self.selectedDates.filter(function(d) {
          return isEnabled(d);
        });
        if (!self.selectedDates.length && type === "min")
          setHoursFromDate(dateObj);
        updateValue();
      }
      if (self.daysContainer) {
        redraw();
        if (dateObj !== void 0)
          self.currentYearElement[type] = dateObj.getFullYear().toString();
        else
          self.currentYearElement.removeAttribute(type);
        self.currentYearElement.disabled = !!inverseDateObj && dateObj !== void 0 && inverseDateObj.getFullYear() === dateObj.getFullYear();
      }
    };
  }
  function parseConfig() {
    var boolOpts = [
      "wrap",
      "weekNumbers",
      "allowInput",
      "allowInvalidPreload",
      "clickOpens",
      "time_24hr",
      "enableTime",
      "noCalendar",
      "altInput",
      "shorthandCurrentMonth",
      "inline",
      "static",
      "enableSeconds",
      "disableMobile"
    ];
    var userConfig = __assign(__assign({}, JSON.parse(JSON.stringify(element.dataset || {}))), instanceConfig);
    var formats2 = {};
    self.config.parseDate = userConfig.parseDate;
    self.config.formatDate = userConfig.formatDate;
    Object.defineProperty(self.config, "enable", {
      get: function() {
        return self.config._enable;
      },
      set: function(dates) {
        self.config._enable = parseDateRules(dates);
      }
    });
    Object.defineProperty(self.config, "disable", {
      get: function() {
        return self.config._disable;
      },
      set: function(dates) {
        self.config._disable = parseDateRules(dates);
      }
    });
    var timeMode = userConfig.mode === "time";
    if (!userConfig.dateFormat && (userConfig.enableTime || timeMode)) {
      var defaultDateFormat = flatpickr.defaultConfig.dateFormat || defaults.dateFormat;
      formats2.dateFormat = userConfig.noCalendar || timeMode ? "H:i" + (userConfig.enableSeconds ? ":S" : "") : defaultDateFormat + " H:i" + (userConfig.enableSeconds ? ":S" : "");
    }
    if (userConfig.altInput && (userConfig.enableTime || timeMode) && !userConfig.altFormat) {
      var defaultAltFormat = flatpickr.defaultConfig.altFormat || defaults.altFormat;
      formats2.altFormat = userConfig.noCalendar || timeMode ? "h:i" + (userConfig.enableSeconds ? ":S K" : " K") : defaultAltFormat + (" h:i" + (userConfig.enableSeconds ? ":S" : "") + " K");
    }
    Object.defineProperty(self.config, "minDate", {
      get: function() {
        return self.config._minDate;
      },
      set: minMaxDateSetter("min")
    });
    Object.defineProperty(self.config, "maxDate", {
      get: function() {
        return self.config._maxDate;
      },
      set: minMaxDateSetter("max")
    });
    var minMaxTimeSetter = function(type) {
      return function(val) {
        self.config[type === "min" ? "_minTime" : "_maxTime"] = self.parseDate(val, "H:i:S");
      };
    };
    Object.defineProperty(self.config, "minTime", {
      get: function() {
        return self.config._minTime;
      },
      set: minMaxTimeSetter("min")
    });
    Object.defineProperty(self.config, "maxTime", {
      get: function() {
        return self.config._maxTime;
      },
      set: minMaxTimeSetter("max")
    });
    if (userConfig.mode === "time") {
      self.config.noCalendar = true;
      self.config.enableTime = true;
    }
    Object.assign(self.config, formats2, userConfig);
    for (var i = 0; i < boolOpts.length; i++)
      self.config[boolOpts[i]] = self.config[boolOpts[i]] === true || self.config[boolOpts[i]] === "true";
    HOOKS.filter(function(hook) {
      return self.config[hook] !== void 0;
    }).forEach(function(hook) {
      self.config[hook] = arrayify(self.config[hook] || []).map(bindToInstance);
    });
    self.isMobile = !self.config.disableMobile && !self.config.inline && self.config.mode === "single" && !self.config.disable.length && !self.config.enable && !self.config.weekNumbers && /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent);
    for (var i = 0; i < self.config.plugins.length; i++) {
      var pluginConf = self.config.plugins[i](self) || {};
      for (var key in pluginConf) {
        if (HOOKS.indexOf(key) > -1) {
          self.config[key] = arrayify(pluginConf[key]).map(bindToInstance).concat(self.config[key]);
        } else if (typeof userConfig[key] === "undefined")
          self.config[key] = pluginConf[key];
      }
    }
    if (!userConfig.altInputClass) {
      self.config.altInputClass = getInputElem().className + " " + self.config.altInputClass;
    }
    triggerEvent("onParseConfig");
  }
  function getInputElem() {
    return self.config.wrap ? element.querySelector("[data-input]") : element;
  }
  function setupLocale() {
    if (typeof self.config.locale !== "object" && typeof flatpickr.l10ns[self.config.locale] === "undefined")
      self.config.errorHandler(new Error("flatpickr: invalid locale " + self.config.locale));
    self.l10n = __assign(__assign({}, flatpickr.l10ns.default), typeof self.config.locale === "object" ? self.config.locale : self.config.locale !== "default" ? flatpickr.l10ns[self.config.locale] : void 0);
    tokenRegex.D = "(" + self.l10n.weekdays.shorthand.join("|") + ")";
    tokenRegex.l = "(" + self.l10n.weekdays.longhand.join("|") + ")";
    tokenRegex.M = "(" + self.l10n.months.shorthand.join("|") + ")";
    tokenRegex.F = "(" + self.l10n.months.longhand.join("|") + ")";
    tokenRegex.K = "(" + self.l10n.amPM[0] + "|" + self.l10n.amPM[1] + "|" + self.l10n.amPM[0].toLowerCase() + "|" + self.l10n.amPM[1].toLowerCase() + ")";
    var userConfig = __assign(__assign({}, instanceConfig), JSON.parse(JSON.stringify(element.dataset || {})));
    if (userConfig.time_24hr === void 0 && flatpickr.defaultConfig.time_24hr === void 0) {
      self.config.time_24hr = self.l10n.time_24hr;
    }
    self.formatDate = createDateFormatter(self);
    self.parseDate = createDateParser({ config: self.config, l10n: self.l10n });
  }
  function positionCalendar(customPositionElement) {
    if (typeof self.config.position === "function") {
      return void self.config.position(self, customPositionElement);
    }
    if (self.calendarContainer === void 0)
      return;
    triggerEvent("onPreCalendarPosition");
    var positionElement = customPositionElement || self._positionElement;
    var calendarHeight = Array.prototype.reduce.call(self.calendarContainer.children, function(acc, child) {
      return acc + child.offsetHeight;
    }, 0), calendarWidth = self.calendarContainer.offsetWidth, configPos = self.config.position.split(" "), configPosVertical = configPos[0], configPosHorizontal = configPos.length > 1 ? configPos[1] : null, inputBounds = positionElement.getBoundingClientRect(), distanceFromBottom = window.innerHeight - inputBounds.bottom, showOnTop = configPosVertical === "above" || configPosVertical !== "below" && distanceFromBottom < calendarHeight && inputBounds.top > calendarHeight;
    var top2 = window.pageYOffset + inputBounds.top + (!showOnTop ? positionElement.offsetHeight + 2 : -calendarHeight - 2);
    toggleClass(self.calendarContainer, "arrowTop", !showOnTop);
    toggleClass(self.calendarContainer, "arrowBottom", showOnTop);
    if (self.config.inline)
      return;
    var left2 = window.pageXOffset + inputBounds.left;
    var isCenter = false;
    var isRight = false;
    if (configPosHorizontal === "center") {
      left2 -= (calendarWidth - inputBounds.width) / 2;
      isCenter = true;
    } else if (configPosHorizontal === "right") {
      left2 -= calendarWidth - inputBounds.width;
      isRight = true;
    }
    toggleClass(self.calendarContainer, "arrowLeft", !isCenter && !isRight);
    toggleClass(self.calendarContainer, "arrowCenter", isCenter);
    toggleClass(self.calendarContainer, "arrowRight", isRight);
    var right2 = window.document.body.offsetWidth - (window.pageXOffset + inputBounds.right);
    var rightMost = left2 + calendarWidth > window.document.body.offsetWidth;
    var centerMost = right2 + calendarWidth > window.document.body.offsetWidth;
    toggleClass(self.calendarContainer, "rightMost", rightMost);
    if (self.config.static)
      return;
    self.calendarContainer.style.top = top2 + "px";
    if (!rightMost) {
      self.calendarContainer.style.left = left2 + "px";
      self.calendarContainer.style.right = "auto";
    } else if (!centerMost) {
      self.calendarContainer.style.left = "auto";
      self.calendarContainer.style.right = right2 + "px";
    } else {
      var doc = getDocumentStyleSheet();
      if (doc === void 0)
        return;
      var bodyWidth = window.document.body.offsetWidth;
      var centerLeft = Math.max(0, bodyWidth / 2 - calendarWidth / 2);
      var centerBefore = ".flatpickr-calendar.centerMost:before";
      var centerAfter = ".flatpickr-calendar.centerMost:after";
      var centerIndex = doc.cssRules.length;
      var centerStyle = "{left:" + inputBounds.left + "px;right:auto;}";
      toggleClass(self.calendarContainer, "rightMost", false);
      toggleClass(self.calendarContainer, "centerMost", true);
      doc.insertRule(centerBefore + "," + centerAfter + centerStyle, centerIndex);
      self.calendarContainer.style.left = centerLeft + "px";
      self.calendarContainer.style.right = "auto";
    }
  }
  function getDocumentStyleSheet() {
    var editableSheet = null;
    for (var i = 0; i < document.styleSheets.length; i++) {
      var sheet = document.styleSheets[i];
      if (!sheet.cssRules)
        continue;
      try {
        sheet.cssRules;
      } catch (err) {
        continue;
      }
      editableSheet = sheet;
      break;
    }
    return editableSheet != null ? editableSheet : createStyleSheet();
  }
  function createStyleSheet() {
    var style = document.createElement("style");
    document.head.appendChild(style);
    return style.sheet;
  }
  function redraw() {
    if (self.config.noCalendar || self.isMobile)
      return;
    buildMonthSwitch();
    updateNavigationCurrentMonth();
    buildDays();
  }
  function focusAndClose() {
    self._input.focus();
    if (window.navigator.userAgent.indexOf("MSIE") !== -1 || navigator.msMaxTouchPoints !== void 0) {
      setTimeout(self.close, 0);
    } else {
      self.close();
    }
  }
  function selectDate(e) {
    e.preventDefault();
    e.stopPropagation();
    var isSelectable = function(day) {
      return day.classList && day.classList.contains("flatpickr-day") && !day.classList.contains("flatpickr-disabled") && !day.classList.contains("notAllowed");
    };
    var t = findParent(getEventTarget(e), isSelectable);
    if (t === void 0)
      return;
    var target = t;
    var selectedDate = self.latestSelectedDateObj = new Date(target.dateObj.getTime());
    var shouldChangeMonth = (selectedDate.getMonth() < self.currentMonth || selectedDate.getMonth() > self.currentMonth + self.config.showMonths - 1) && self.config.mode !== "range";
    self.selectedDateElem = target;
    if (self.config.mode === "single")
      self.selectedDates = [selectedDate];
    else if (self.config.mode === "multiple") {
      var selectedIndex = isDateSelected(selectedDate);
      if (selectedIndex)
        self.selectedDates.splice(parseInt(selectedIndex), 1);
      else
        self.selectedDates.push(selectedDate);
    } else if (self.config.mode === "range") {
      if (self.selectedDates.length === 2) {
        self.clear(false, false);
      }
      self.latestSelectedDateObj = selectedDate;
      self.selectedDates.push(selectedDate);
      if (compareDates(selectedDate, self.selectedDates[0], true) !== 0)
        self.selectedDates.sort(function(a, b) {
          return a.getTime() - b.getTime();
        });
    }
    setHoursFromInputs();
    if (shouldChangeMonth) {
      var isNewYear = self.currentYear !== selectedDate.getFullYear();
      self.currentYear = selectedDate.getFullYear();
      self.currentMonth = selectedDate.getMonth();
      if (isNewYear) {
        triggerEvent("onYearChange");
        buildMonthSwitch();
      }
      triggerEvent("onMonthChange");
    }
    updateNavigationCurrentMonth();
    buildDays();
    updateValue();
    if (!shouldChangeMonth && self.config.mode !== "range" && self.config.showMonths === 1)
      focusOnDayElem(target);
    else if (self.selectedDateElem !== void 0 && self.hourElement === void 0) {
      self.selectedDateElem && self.selectedDateElem.focus();
    }
    if (self.hourElement !== void 0)
      self.hourElement !== void 0 && self.hourElement.focus();
    if (self.config.closeOnSelect) {
      var single = self.config.mode === "single" && !self.config.enableTime;
      var range = self.config.mode === "range" && self.selectedDates.length === 2 && !self.config.enableTime;
      if (single || range) {
        focusAndClose();
      }
    }
    triggerChange();
  }
  var CALLBACKS = {
    locale: [setupLocale, updateWeekdays],
    showMonths: [buildMonths, setCalendarWidth, buildWeekdays],
    minDate: [jumpToDate],
    maxDate: [jumpToDate],
    positionElement: [updatePositionElement],
    clickOpens: [
      function() {
        if (self.config.clickOpens === true) {
          bind(self._input, "focus", self.open);
          bind(self._input, "click", self.open);
        } else {
          self._input.removeEventListener("focus", self.open);
          self._input.removeEventListener("click", self.open);
        }
      }
    ]
  };
  function set(option, value) {
    if (option !== null && typeof option === "object") {
      Object.assign(self.config, option);
      for (var key in option) {
        if (CALLBACKS[key] !== void 0)
          CALLBACKS[key].forEach(function(x) {
            return x();
          });
      }
    } else {
      self.config[option] = value;
      if (CALLBACKS[option] !== void 0)
        CALLBACKS[option].forEach(function(x) {
          return x();
        });
      else if (HOOKS.indexOf(option) > -1)
        self.config[option] = arrayify(value);
    }
    self.redraw();
    updateValue(true);
  }
  function setSelectedDate(inputDate, format2) {
    var dates = [];
    if (inputDate instanceof Array)
      dates = inputDate.map(function(d) {
        return self.parseDate(d, format2);
      });
    else if (inputDate instanceof Date || typeof inputDate === "number")
      dates = [self.parseDate(inputDate, format2)];
    else if (typeof inputDate === "string") {
      switch (self.config.mode) {
        case "single":
        case "time":
          dates = [self.parseDate(inputDate, format2)];
          break;
        case "multiple":
          dates = inputDate.split(self.config.conjunction).map(function(date) {
            return self.parseDate(date, format2);
          });
          break;
        case "range":
          dates = inputDate.split(self.l10n.rangeSeparator).map(function(date) {
            return self.parseDate(date, format2);
          });
          break;
        default:
          break;
      }
    } else
      self.config.errorHandler(new Error("Invalid date supplied: " + JSON.stringify(inputDate)));
    self.selectedDates = self.config.allowInvalidPreload ? dates : dates.filter(function(d) {
      return d instanceof Date && isEnabled(d, false);
    });
    if (self.config.mode === "range")
      self.selectedDates.sort(function(a, b) {
        return a.getTime() - b.getTime();
      });
  }
  function setDate(date, triggerChange2, format2) {
    if (triggerChange2 === void 0) {
      triggerChange2 = false;
    }
    if (format2 === void 0) {
      format2 = self.config.dateFormat;
    }
    if (date !== 0 && !date || date instanceof Array && date.length === 0)
      return self.clear(triggerChange2);
    setSelectedDate(date, format2);
    self.latestSelectedDateObj = self.selectedDates[self.selectedDates.length - 1];
    self.redraw();
    jumpToDate(void 0, triggerChange2);
    setHoursFromDate();
    if (self.selectedDates.length === 0) {
      self.clear(false);
    }
    updateValue(triggerChange2);
    if (triggerChange2)
      triggerEvent("onChange");
  }
  function parseDateRules(arr) {
    return arr.slice().map(function(rule) {
      if (typeof rule === "string" || typeof rule === "number" || rule instanceof Date) {
        return self.parseDate(rule, void 0, true);
      } else if (rule && typeof rule === "object" && rule.from && rule.to)
        return {
          from: self.parseDate(rule.from, void 0),
          to: self.parseDate(rule.to, void 0)
        };
      return rule;
    }).filter(function(x) {
      return x;
    });
  }
  function setupDates() {
    self.selectedDates = [];
    self.now = self.parseDate(self.config.now) || new Date();
    var preloadedDate = self.config.defaultDate || ((self.input.nodeName === "INPUT" || self.input.nodeName === "TEXTAREA") && self.input.placeholder && self.input.value === self.input.placeholder ? null : self.input.value);
    if (preloadedDate)
      setSelectedDate(preloadedDate, self.config.dateFormat);
    self._initialDate = self.selectedDates.length > 0 ? self.selectedDates[0] : self.config.minDate && self.config.minDate.getTime() > self.now.getTime() ? self.config.minDate : self.config.maxDate && self.config.maxDate.getTime() < self.now.getTime() ? self.config.maxDate : self.now;
    self.currentYear = self._initialDate.getFullYear();
    self.currentMonth = self._initialDate.getMonth();
    if (self.selectedDates.length > 0)
      self.latestSelectedDateObj = self.selectedDates[0];
    if (self.config.minTime !== void 0)
      self.config.minTime = self.parseDate(self.config.minTime, "H:i");
    if (self.config.maxTime !== void 0)
      self.config.maxTime = self.parseDate(self.config.maxTime, "H:i");
    self.minDateHasTime = !!self.config.minDate && (self.config.minDate.getHours() > 0 || self.config.minDate.getMinutes() > 0 || self.config.minDate.getSeconds() > 0);
    self.maxDateHasTime = !!self.config.maxDate && (self.config.maxDate.getHours() > 0 || self.config.maxDate.getMinutes() > 0 || self.config.maxDate.getSeconds() > 0);
  }
  function setupInputs() {
    self.input = getInputElem();
    if (!self.input) {
      self.config.errorHandler(new Error("Invalid input element specified"));
      return;
    }
    self.input._type = self.input.type;
    self.input.type = "text";
    self.input.classList.add("flatpickr-input");
    self._input = self.input;
    if (self.config.altInput) {
      self.altInput = createElement(self.input.nodeName, self.config.altInputClass);
      self._input = self.altInput;
      self.altInput.placeholder = self.input.placeholder;
      self.altInput.disabled = self.input.disabled;
      self.altInput.required = self.input.required;
      self.altInput.tabIndex = self.input.tabIndex;
      self.altInput.type = "text";
      self.input.setAttribute("type", "hidden");
      if (!self.config.static && self.input.parentNode)
        self.input.parentNode.insertBefore(self.altInput, self.input.nextSibling);
    }
    if (!self.config.allowInput)
      self._input.setAttribute("readonly", "readonly");
    updatePositionElement();
  }
  function updatePositionElement() {
    self._positionElement = self.config.positionElement || self._input;
  }
  function setupMobile() {
    var inputType = self.config.enableTime ? self.config.noCalendar ? "time" : "datetime-local" : "date";
    self.mobileInput = createElement("input", self.input.className + " flatpickr-mobile");
    self.mobileInput.tabIndex = 1;
    self.mobileInput.type = inputType;
    self.mobileInput.disabled = self.input.disabled;
    self.mobileInput.required = self.input.required;
    self.mobileInput.placeholder = self.input.placeholder;
    self.mobileFormatStr = inputType === "datetime-local" ? "Y-m-d\\TH:i:S" : inputType === "date" ? "Y-m-d" : "H:i:S";
    if (self.selectedDates.length > 0) {
      self.mobileInput.defaultValue = self.mobileInput.value = self.formatDate(self.selectedDates[0], self.mobileFormatStr);
    }
    if (self.config.minDate)
      self.mobileInput.min = self.formatDate(self.config.minDate, "Y-m-d");
    if (self.config.maxDate)
      self.mobileInput.max = self.formatDate(self.config.maxDate, "Y-m-d");
    if (self.input.getAttribute("step"))
      self.mobileInput.step = String(self.input.getAttribute("step"));
    self.input.type = "hidden";
    if (self.altInput !== void 0)
      self.altInput.type = "hidden";
    try {
      if (self.input.parentNode)
        self.input.parentNode.insertBefore(self.mobileInput, self.input.nextSibling);
    } catch (_a) {
    }
    bind(self.mobileInput, "change", function(e) {
      self.setDate(getEventTarget(e).value, false, self.mobileFormatStr);
      triggerEvent("onChange");
      triggerEvent("onClose");
    });
  }
  function toggle(e) {
    if (self.isOpen === true)
      return self.close();
    self.open(e);
  }
  function triggerEvent(event, data) {
    if (self.config === void 0)
      return;
    var hooks = self.config[event];
    if (hooks !== void 0 && hooks.length > 0) {
      for (var i = 0; hooks[i] && i < hooks.length; i++)
        hooks[i](self.selectedDates, self.input.value, self, data);
    }
    if (event === "onChange") {
      self.input.dispatchEvent(createEvent("change"));
      self.input.dispatchEvent(createEvent("input"));
    }
  }
  function createEvent(name) {
    var e = document.createEvent("Event");
    e.initEvent(name, true, true);
    return e;
  }
  function isDateSelected(date) {
    for (var i = 0; i < self.selectedDates.length; i++) {
      var selectedDate = self.selectedDates[i];
      if (selectedDate instanceof Date && compareDates(selectedDate, date) === 0)
        return "" + i;
    }
    return false;
  }
  function isDateInRange(date) {
    if (self.config.mode !== "range" || self.selectedDates.length < 2)
      return false;
    return compareDates(date, self.selectedDates[0]) >= 0 && compareDates(date, self.selectedDates[1]) <= 0;
  }
  function updateNavigationCurrentMonth() {
    if (self.config.noCalendar || self.isMobile || !self.monthNav)
      return;
    self.yearElements.forEach(function(yearElement, i) {
      var d = new Date(self.currentYear, self.currentMonth, 1);
      d.setMonth(self.currentMonth + i);
      if (self.config.showMonths > 1 || self.config.monthSelectorType === "static") {
        self.monthElements[i].textContent = monthToStr(d.getMonth(), self.config.shorthandCurrentMonth, self.l10n) + " ";
      } else {
        self.monthsDropdownContainer.value = d.getMonth().toString();
      }
      yearElement.value = d.getFullYear().toString();
    });
    self._hidePrevMonthArrow = self.config.minDate !== void 0 && (self.currentYear === self.config.minDate.getFullYear() ? self.currentMonth <= self.config.minDate.getMonth() : self.currentYear < self.config.minDate.getFullYear());
    self._hideNextMonthArrow = self.config.maxDate !== void 0 && (self.currentYear === self.config.maxDate.getFullYear() ? self.currentMonth + 1 > self.config.maxDate.getMonth() : self.currentYear > self.config.maxDate.getFullYear());
  }
  function getDateStr(specificFormat) {
    var format2 = specificFormat || (self.config.altInput ? self.config.altFormat : self.config.dateFormat);
    return self.selectedDates.map(function(dObj) {
      return self.formatDate(dObj, format2);
    }).filter(function(d, i, arr) {
      return self.config.mode !== "range" || self.config.enableTime || arr.indexOf(d) === i;
    }).join(self.config.mode !== "range" ? self.config.conjunction : self.l10n.rangeSeparator);
  }
  function updateValue(triggerChange2) {
    if (triggerChange2 === void 0) {
      triggerChange2 = true;
    }
    if (self.mobileInput !== void 0 && self.mobileFormatStr) {
      self.mobileInput.value = self.latestSelectedDateObj !== void 0 ? self.formatDate(self.latestSelectedDateObj, self.mobileFormatStr) : "";
    }
    self.input.value = getDateStr(self.config.dateFormat);
    if (self.altInput !== void 0) {
      self.altInput.value = getDateStr(self.config.altFormat);
    }
    if (triggerChange2 !== false)
      triggerEvent("onValueUpdate");
  }
  function onMonthNavClick(e) {
    var eventTarget = getEventTarget(e);
    var isPrevMonth = self.prevMonthNav.contains(eventTarget);
    var isNextMonth = self.nextMonthNav.contains(eventTarget);
    if (isPrevMonth || isNextMonth) {
      changeMonth(isPrevMonth ? -1 : 1);
    } else if (self.yearElements.indexOf(eventTarget) >= 0) {
      eventTarget.select();
    } else if (eventTarget.classList.contains("arrowUp")) {
      self.changeYear(self.currentYear + 1);
    } else if (eventTarget.classList.contains("arrowDown")) {
      self.changeYear(self.currentYear - 1);
    }
  }
  function timeWrapper(e) {
    e.preventDefault();
    var isKeyDown = e.type === "keydown", eventTarget = getEventTarget(e), input = eventTarget;
    if (self.amPM !== void 0 && eventTarget === self.amPM) {
      self.amPM.textContent = self.l10n.amPM[int(self.amPM.textContent === self.l10n.amPM[0])];
    }
    var min2 = parseFloat(input.getAttribute("min")), max2 = parseFloat(input.getAttribute("max")), step = parseFloat(input.getAttribute("step")), curValue = parseInt(input.value, 10), delta = e.delta || (isKeyDown ? e.which === 38 ? 1 : -1 : 0);
    var newValue = curValue + step * delta;
    if (typeof input.value !== "undefined" && input.value.length === 2) {
      var isHourElem = input === self.hourElement, isMinuteElem = input === self.minuteElement;
      if (newValue < min2) {
        newValue = max2 + newValue + int(!isHourElem) + (int(isHourElem) && int(!self.amPM));
        if (isMinuteElem)
          incrementNumInput(void 0, -1, self.hourElement);
      } else if (newValue > max2) {
        newValue = input === self.hourElement ? newValue - max2 - int(!self.amPM) : min2;
        if (isMinuteElem)
          incrementNumInput(void 0, 1, self.hourElement);
      }
      if (self.amPM && isHourElem && (step === 1 ? newValue + curValue === 23 : Math.abs(newValue - curValue) > step)) {
        self.amPM.textContent = self.l10n.amPM[int(self.amPM.textContent === self.l10n.amPM[0])];
      }
      input.value = pad(newValue);
    }
  }
  init();
  return self;
}
function _flatpickr(nodeList, config) {
  var nodes = Array.prototype.slice.call(nodeList).filter(function(x) {
    return x instanceof HTMLElement;
  });
  var instances = [];
  for (var i = 0; i < nodes.length; i++) {
    var node = nodes[i];
    try {
      if (node.getAttribute("data-fp-omit") !== null)
        continue;
      if (node._flatpickr !== void 0) {
        node._flatpickr.destroy();
        node._flatpickr = void 0;
      }
      node._flatpickr = FlatpickrInstance(node, config || {});
      instances.push(node._flatpickr);
    } catch (e) {
      console.error(e);
    }
  }
  return instances.length === 1 ? instances[0] : instances;
}
if (typeof HTMLElement !== "undefined" && typeof HTMLCollection !== "undefined" && typeof NodeList !== "undefined") {
  HTMLCollection.prototype.flatpickr = NodeList.prototype.flatpickr = function(config) {
    return _flatpickr(this, config);
  };
  HTMLElement.prototype.flatpickr = function(config) {
    return _flatpickr([this], config);
  };
}
var flatpickr = function(selector, config) {
  if (typeof selector === "string") {
    return _flatpickr(window.document.querySelectorAll(selector), config);
  } else if (selector instanceof Node) {
    return _flatpickr([selector], config);
  } else {
    return _flatpickr(selector, config);
  }
};
flatpickr.defaultConfig = {};
flatpickr.l10ns = {
  en: __assign({}, default_default),
  default: __assign({}, default_default)
};
flatpickr.localize = function(l10n) {
  flatpickr.l10ns.default = __assign(__assign({}, flatpickr.l10ns.default), l10n);
};
flatpickr.setDefaults = function(config) {
  flatpickr.defaultConfig = __assign(__assign({}, flatpickr.defaultConfig), config);
};
flatpickr.parseDate = createDateParser({});
flatpickr.formatDate = createDateFormatter({});
flatpickr.compareDates = compareDates;
if (typeof jQuery !== "undefined" && typeof jQuery.fn !== "undefined") {
  jQuery.fn.flatpickr = function(config) {
    return _flatpickr(this, config);
  };
}
Date.prototype.fp_incr = function(days) {
  return new Date(this.getFullYear(), this.getMonth(), this.getDate() + (typeof days === "string" ? parseInt(days, 10) : days));
};
if (typeof window !== "undefined") {
  window.flatpickr = flatpickr;
}
var esm_default = flatpickr;

// src/modals/fields/DateModal.ts
var DateModal = class extends BaseModal {
  constructor(plugin, file, field, initialValue, lineNumber = -1, after = false, asList = false, asComment = false) {
    var _a, _b;
    super(plugin);
    this.plugin = plugin;
    this.file = file;
    this.field = field;
    this.initialValue = initialValue;
    this.lineNumber = lineNumber;
    this.after = after;
    this.asList = asList;
    this.asComment = asComment;
    this.pushNextInterval = false;
    this.initialValue = initialValue ? ((_a = initialValue.toString().replace(/^\[\[/g, "").replace(/\]\]$/g, "").split("|").first()) == null ? void 0 : _a.split("/").last()) || "" : "";
    this.insertAsLink = FieldManager2.stringToBoolean(this.field.options.defaultInsertAsLink || "false") || false;
    this.format = this.field.options.dateFormat || this.field.options.defaultDateFormat;
    this.dvApi = (_b = this.plugin.app.plugins.plugins["dataview"]) == null ? void 0 : _b.api;
    if (this.dvApi)
      this.dateManager = new FieldManager[this.field.type](this.plugin, this.field);
    this.value = this.initialValue;
  }
  onOpen() {
    super.onOpen();
    this.containerEl.addClass("metadata-menu");
    const fieldContainer = this.contentEl.createDiv({ cls: "field-container" });
    this.buildFields(fieldContainer);
    this.errorField = this.contentEl.createEl("div", { cls: "field-error" });
    this.errorField.hide();
  }
  save(e) {
    return __async(this, null, function* () {
      let newValue;
      if (this.plugin.app.plugins.enabledPlugins.has("nldates-obsidian")) {
        try {
          const nldates = this.plugin.app.plugins.plugins["nldates-obsidian"];
          newValue = nldates.parseDate(this.value).moment;
        } catch (error) {
          newValue = (0, import_obsidian25.moment)(this.value, this.format);
        }
      } else {
        newValue = (0, import_obsidian25.moment)(this.value, this.format);
      }
      if (newValue.isValid()) {
        const linkPath = this.plugin.app.metadataCache.getFirstLinkpathDest(this.field.options.linkPath || "" + newValue.format(this.format), this.file.path);
        const formattedValue = this.insertAsLink ? `[[${this.field.options.linkPath || ""}${newValue.format(this.format)}${linkPath ? "|" + linkPath.basename : ""}]]` : newValue.format(this.format);
        yield postValues(this.plugin, [{ name: this.field.name, payload: { value: formattedValue } }], this.file, this.lineNumber, this.after, this.asList, this.asComment);
        if (this.nextIntervalField && this.pushNextInterval && this.nextShift) {
          yield postValues(this.plugin, [{ name: this.nextIntervalField.name, payload: { value: this.nextShift } }], this.file.path);
        }
        this.close();
      } else if (!this.value) {
        yield postValues(this.plugin, [{ name: this.field.name, payload: { value: "" } }], this.file, this.lineNumber, this.after, this.asList, this.asComment);
        this.close();
      } else {
        this.errorField.show();
        this.errorField.setText(`value must be a valid date`);
        this.inputEl.inputEl.addClass("is-invalid");
        return;
      }
    });
  }
  buildFields(dateFieldsContainer) {
    this.buildInputEl(dateFieldsContainer);
    this.buildInsertAsLinkButton(dateFieldsContainer);
    this.buildSaveBtn(dateFieldsContainer);
  }
  buildInsertAsLinkButton(container) {
    const insertAsLinkBtn = new import_obsidian24.ButtonComponent(container);
    const setLinkBtnIcon = () => {
      insertAsLinkBtn.setIcon(this.insertAsLink ? "link" : "unlink");
      insertAsLinkBtn.setTooltip(this.insertAsLink ? "Click to insert date as text" : "Click to insert date as link");
    };
    setLinkBtnIcon();
    insertAsLinkBtn.onClick(() => {
      this.insertAsLink = !this.insertAsLink;
      setLinkBtnIcon();
    });
  }
  toggleButton(button, value) {
    button.setDisabled(!!value);
    if (value) {
      button.buttonEl.addClass("disabled");
    } else {
      button.buttonEl.removeClass("disabled");
    }
  }
  buildInputEl(container) {
    if (this.dateManager)
      [this.currentShift, this.nextIntervalField, this.nextShift] = this.dateManager.shiftDuration(this.file);
    this.inputEl = new import_obsidian24.TextComponent(container);
    this.inputEl.inputEl.focus();
    this.inputEl.setPlaceholder(this.initialValue ? (0, import_obsidian25.moment)(this.initialValue, this.field.options.dateFormat).format(this.field.options.dateFormat) : "");
    this.inputEl.onChange((value) => {
      this.inputEl.inputEl.removeClass("is-invalid");
      this.errorField.hide();
      this.errorField.setText("");
      this.value = value;
      this.toggleButton(shiftFromTodayBtn, value);
    });
    const calendarDisplayBtn = new import_obsidian24.ButtonComponent(container);
    calendarDisplayBtn.setIcon(FieldIcon["Date" /* Date */]);
    calendarDisplayBtn.setTooltip("open date picker");
    const shiftFromTodayBtn = new import_obsidian24.ButtonComponent(container);
    shiftFromTodayBtn.setIcon("skip-forward");
    shiftFromTodayBtn.setTooltip(`Shift ${this.field.name} ${this.currentShift || "1 day"} ahead`);
    const datePickerContainer = container.createDiv();
    const datePicker = esm_default(datePickerContainer, {
      locale: {
        firstDayOfWeek: this.plugin.settings.firstDayOfWeek
      },
      defaultDate: (0, import_obsidian25.moment)(Date.now()).format("YYYY-MM-DD")
    });
    datePicker.config.onChange.push((value) => {
      const newDate = (0, import_obsidian25.moment)(value.toString()).format(this.format);
      this.inputEl.setValue(newDate);
      this.value = newDate;
      this.toggleButton(shiftFromTodayBtn, this.value);
    });
    calendarDisplayBtn.onClick((e) => {
      e.preventDefault();
      datePicker.setDate(datePicker.parseDate(this.inputEl.getValue()) || new Date());
      datePicker.open();
    });
    shiftFromTodayBtn.onClick((e) => __async(this, null, function* () {
      const currentDvDate = this.dvApi.date((0, import_obsidian25.moment)(this.initialValue, this.format).toISOString());
      const newDate = currentDvDate.plus(this.dvApi.duration(this.currentShift || "1 day"));
      const newValue = (0, import_obsidian25.moment)(newDate.toString()).format(this.format);
      this.inputEl.setValue(newValue);
      this.value = newValue;
      this.pushNextInterval = true;
      this.toggleButton(shiftFromTodayBtn, this.inputEl.getValue());
    }));
    if (!this.dvApi) {
      shiftFromTodayBtn.buttonEl.hide();
      shiftFromTodayBtn.setDisabled(true);
    }
  }
};

// src/fields/fieldManagers/DateField.ts
var DateField = class extends FieldManager2 {
  constructor(plugin, field) {
    super(plugin, field, "Date" /* Date */);
    this.defaultDateFormat = "YYYY-MM-DD";
    this.showModalOption = false;
  }
  addFieldOption(name, value, file, location) {
    var _a;
    const modal = new DateModal(this.plugin, file, this.field, value);
    modal.titleEl.setText(`Change date for <${name}>`);
    const dvApi = (_a = this.plugin.app.plugins.plugins.dataview) == null ? void 0 : _a.api;
    const dateIconName = FieldIcon["Date" /* Date */];
    const dateModalAction = () => modal.open();
    const p = dvApi.page(file.path);
    const shiftDateAction = () => this.shiftDate(dvApi, p, file);
    const fieldManager = new FieldManager[this.field.type](this.plugin, this.field);
    const [currentShift] = fieldManager.shiftDuration(file);
    if (DateField.isMenu(location)) {
      location.addItem((item) => {
        item.setTitle(`Update <${name}>`);
        item.setIcon(dateIconName);
        item.onClick(dateModalAction);
        item.setSection("metadata-menu.fields");
      });
      if (this.field.options.dateShiftInterval || this.field.options.nextShiftIntervalField && dvApi) {
        location.addItem((item) => {
          item.setTitle(`Shift <${name}> ${currentShift} ahead`);
          item.setIcon("skip-forward");
          item.onClick(shiftDateAction);
          item.setSection("metadata-menu.fields");
        });
      }
    } else if (DateField.isSuggest(location)) {
      location.options.push({
        id: `update_${name}`,
        actionLabel: `<span>Update <b>${name}</b></span>`,
        action: dateModalAction,
        icon: dateIconName
      });
      if (this.field.options.dateShiftInterval || this.field.options.nextShiftIntervalField && dvApi) {
        location.options.push({
          id: `update_${name}`,
          actionLabel: `<span>Shift <b>${name}</b> ${currentShift} ahead</span>`,
          action: shiftDateAction,
          icon: "skip-forward"
        });
      }
    } else if (DateField.isFieldOptions(location)) {
      location.addOption("skip-forward", shiftDateAction, `Shift ${name} ahead by ${currentShift}`);
      location.addOption(dateIconName, dateModalAction, `Set ${name}'s date`);
    }
    ;
  }
  createAndOpenFieldModal(file, selectedFieldName, value, lineNumber, after, asList, asComment) {
    const fieldModal = new DateModal(this.plugin, file, this.field, value || "", lineNumber, after, asList, asComment);
    fieldModal.titleEl.setText(`Enter date for ${selectedFieldName}`);
    fieldModal.open();
  }
  createDateContainer(container) {
    if (!this.field.options.dateFormat)
      this.field.options.dateFormat = this.defaultDateFormat;
    if (!this.field.options.defaultInsertAsLink)
      this.field.options.defaultInsertAsLink = "false";
    const dateFormatContainer = container.createDiv({ cls: "field-container" });
    dateFormatContainer.createEl("span", { text: "Date format", cls: "label" });
    const dateExample = dateFormatContainer.createEl("span", { cls: "more-info" });
    dateFormatContainer.createDiv({ cls: "spacer" });
    const dateFormatInput = new import_obsidian26.TextComponent(dateFormatContainer);
    dateFormatInput.setValue(this.field.options.dateFormat);
    dateExample.setText(`${(0, import_obsidian26.moment)().format(dateFormatInput.getValue())}`);
    dateFormatInput.onChange((value) => {
      this.field.options.dateFormat = value;
      dateExample.setText(`${(0, import_obsidian26.moment)().format(value)}`);
    });
    const defaultInsertAsLinkContainer = container.createDiv({ cls: "field-container" });
    defaultInsertAsLinkContainer.createEl("span", { text: "Insert as link by default", cls: "label" });
    defaultInsertAsLinkContainer.createDiv({ cls: "spacer" });
    const defaultInsertAsLink = new import_obsidian26.ToggleComponent(defaultInsertAsLinkContainer);
    defaultInsertAsLink.setValue(DateField.stringToBoolean(this.field.options.defaultInsertAsLink));
    defaultInsertAsLink.onChange((value) => {
      this.field.options.defaultInsertAsLink = value.toString();
    });
    const dateLinkPathContainer = container.createDiv({ cls: "field-container" });
    dateLinkPathContainer.createEl("span", { text: "Link path (optional)", cls: "label" });
    dateLinkPathContainer.createDiv({ cls: "spacer" });
    const dateLinkPathInput = new import_obsidian26.TextComponent(dateLinkPathContainer);
    dateLinkPathInput.setValue(this.field.options.linkPath);
    dateLinkPathInput.onChange((value) => {
      this.field.options.linkPath = value + (!value.endsWith("/") && !!value.length ? "/" : "");
    });
    const dateShiftIntervalContainer = container.createDiv({ cls: "field-container" });
    dateShiftIntervalContainer.createEl("span", { text: "Define a shift interval", cls: "label" });
    dateShiftIntervalContainer.createDiv({ cls: "spacer" });
    const dateShiftInterval = new import_obsidian26.TextComponent(dateShiftIntervalContainer);
    dateShiftInterval.setPlaceholder("ex: 1 month 2 days");
    dateShiftInterval.setValue(this.field.options.dateShiftInterval);
    dateShiftInterval.onChange((value) => {
      if (!value) {
        delete this.field.options.dateShiftInterval;
      } else {
        this.field.options.dateShiftInterval = value.toString();
      }
    });
    const nextShiftIntervalFieldContainer = container.createDiv({ cls: "field-container" });
    nextShiftIntervalFieldContainer.createEl("span", {
      text: "Field containing shift intervals",
      cls: "label"
    });
    nextShiftIntervalFieldContainer.createDiv({ cls: "spacer" });
    const nextShiftIntervalField = new import_obsidian26.TextComponent(nextShiftIntervalFieldContainer);
    nextShiftIntervalField.setValue(this.field.options.nextShiftIntervalField);
    nextShiftIntervalField.onChange((value) => {
      if (!value) {
        delete this.field.options.nextShiftIntervalField;
      } else {
        this.field.options.nextShiftIntervalField = value.toString();
      }
    });
  }
  createSettingContainer(container, plugin, location) {
    this.createDateContainer(container);
  }
  shiftDate(dv, p, file) {
    return __async(this, null, function* () {
      const { dateFormat, defaultInsertAsLink, linkPath } = this.field.options;
      const fieldManager = new FieldManager[this.field.type](this.plugin, this.field);
      const [currentShift, nextIntervalField, nextShift] = fieldManager.shiftDuration(file);
      const dvDate = p[this.field.name];
      const currentDateValue = dv.value.isLink(dvDate) ? dvDate.path.split("/").last() : dv.value.isDate(dvDate) ? (0, import_obsidian26.moment)(dvDate.toJSDate()).format(dateFormat) : dvDate;
      const currentDvDate = dv.date((0, import_obsidian26.moment)(currentDateValue, dateFormat).toISOString());
      const newDate = currentDvDate.plus(dv.duration(currentShift || "1 day"));
      const newValue = (0, import_obsidian26.moment)(newDate.toString()).format(dateFormat);
      if (nextIntervalField && nextShift) {
        yield postValues(this.plugin, [{ name: nextIntervalField.name, payload: { value: nextShift } }], file.path);
      }
      const linkFile = this.plugin.app.metadataCache.getFirstLinkpathDest(linkPath || "" + newValue.format(dateFormat), file.path);
      const formattedValue = DateField.stringToBoolean(defaultInsertAsLink) ? `[[${linkPath || ""}${newValue}${linkFile ? "|" + linkFile.basename : ""}]]` : newValue;
      yield postValues(this.plugin, [{ name: this.field.name, payload: { value: formattedValue } }], file);
    });
  }
  createDvField(dv, p, fieldContainer, attrs) {
    var _a;
    const fieldValue = dv.el("span", p[this.field.name], attrs);
    const dateBtn = fieldContainer.createEl("button");
    (0, import_obsidian26.setIcon)(dateBtn, FieldIcon["Date" /* Date */]);
    const spacer = fieldContainer.createDiv({ cls: "spacer-1" });
    if (this.field.options.dateShiftInterval || this.field.options.nextShiftIntervalField) {
      this.shiftBtn = fieldContainer.createEl("button");
      (0, import_obsidian26.setIcon)(this.shiftBtn, "skip-forward");
      spacer.setAttr("class", "spacer-2");
    } else {
      spacer.setAttr("class", "spacer-1");
    }
    const file = this.plugin.app.vault.getAbstractFileByPath(p.file.path);
    let fieldModal;
    if (file instanceof import_obsidian26.TFile && file.extension == "md") {
      if (p[this.field.name] && p[this.field.name].hasOwnProperty("path")) {
        const dateFile = this.plugin.app.vault.getAbstractFileByPath(p[this.field.name]);
        if (dateFile instanceof import_obsidian26.TFile && dateFile.extension == "md") {
          fieldModal = new DateModal(this.plugin, file, this.field, dateFile.name);
        } else {
          fieldModal = new DateModal(this.plugin, file, this.field, p[this.field.name].path.split("/").last().replace(".md", ""));
        }
      } else if (p[this.field.name]) {
        fieldModal = new DateModal(this.plugin, file, this.field, p[this.field.name]);
      } else {
        fieldModal = new DateModal(this.plugin, file, this.field, "");
      }
      if (this.shiftBtn)
        this.shiftBtn.onclick = () => {
          this.shiftDate(dv, p, file);
        };
    } else {
      throw Error("path doesn't correspond to a proper file");
    }
    fieldModal.onClose = () => {
      fieldModal.contentEl.innerHTML = "";
    };
    dateBtn.onclick = () => {
      fieldModal.open();
    };
    if (!((_a = attrs == null ? void 0 : attrs.options) == null ? void 0 : _a.alwaysOn)) {
      dateBtn.hide();
      if (this.shiftBtn)
        this.shiftBtn.hide();
      spacer.show();
      fieldContainer.onmouseover = () => {
        dateBtn.show();
        if (this.shiftBtn)
          this.shiftBtn.show();
        spacer.hide();
      };
      fieldContainer.onmouseout = () => {
        dateBtn.hide();
        if (this.shiftBtn)
          this.shiftBtn.hide();
        spacer.show();
      };
    }
    fieldContainer.appendChild(fieldValue);
    fieldContainer.appendChild(dateBtn);
    if (this.shiftBtn)
      fieldContainer.appendChild(this.shiftBtn);
    fieldContainer.appendChild(spacer);
  }
  getOptionsStr() {
    return this.field.options.dateFormat;
  }
  validateOptions() {
    return true;
  }
  displayValue(container, file, fieldName, onClicked) {
    var _a;
    const dvApi = (_a = this.plugin.app.plugins.plugins.dataview) == null ? void 0 : _a.api;
    if (dvApi) {
      const value = dvApi.page(file.path)[fieldName];
      if (dvApi.value.isDate(value)) {
        container.createDiv({ text: value.display });
      } else if (dvApi.value.isLink(value)) {
        const link = container.createEl("a", { text: value.path.split("/").last().replace(/(.*).md/, "$1") });
        link.onclick = () => {
          this.plugin.app.workspace.openLinkText(value.path, file.path, true);
          onClicked();
        };
      } else {
        container.createDiv({ text: value });
      }
    }
    container.createDiv({});
  }
  validateValue(value) {
    var _a, _b;
    if (!value) {
      return true;
    } else {
      if (typeof value == "string") {
        return (0, import_obsidian26.moment)((_a = value.replace(/^\[\[/g, "").replace(/\]\]$/g, "").split("|").first()) == null ? void 0 : _a.split("/").last(), this.field.options.dateFormat).isValid();
      } else {
        return (0, import_obsidian26.moment)((_b = value.path.replace(/^\[\[/g, "").replace(/\]\]$/g, "").split("|").first()) == null ? void 0 : _b.split("/").last(), this.field.options.dateFormat).isValid();
      }
    }
  }
  shiftDuration(file) {
    var _a, _b;
    const dvApi = (_a = this.plugin.app.plugins.plugins.dataview) == null ? void 0 : _a.api;
    if (dvApi) {
      const interval = this.field.options.dateShiftInterval;
      const cycleIntervalField = this.field.options.nextShiftIntervalField;
      const cycle = (_b = this.plugin.fieldIndex.filesFields.get(file.path)) == null ? void 0 : _b.find((field) => field.name === cycleIntervalField);
      if (cycle) {
        const cycleManager = new FieldManager[cycle.type](this.plugin, cycle);
        const options2 = cycleManager.getOptionsList(file);
        const currentValue = dvApi.page(file.path)[cycle.name];
        if (currentValue) {
          const currentValueString = options2.filter((o) => dvApi.duration(o) !== null).find((o) => compareDuration(dvApi.duration(o), currentValue));
          if (currentValueString) {
            const nextValue = cycleManager.nextOption(currentValueString);
            return [currentValueString, cycle, nextValue];
          }
        }
        return [options2[0], cycle, options2[1] || options2[0]];
      } else if (interval && dvApi.duration(interval)) {
        return [interval, void 0, void 0];
      }
    }
    return [void 0, void 0, void 0];
  }
};

// src/fields/fieldManagers/MultiFileField.ts
var import_obsidian28 = require("obsidian");

// src/modals/fields/MultiFileModal.ts
var import_obsidian27 = require("obsidian");
var MultiFileFuzzySuggester = class extends import_obsidian27.FuzzySuggestModal {
  constructor(plugin, file, field, initialValueObject, lineNumber = -1, after = false, asList = false, asComment = false) {
    var _a;
    super(plugin.app);
    this.plugin = plugin;
    this.file = file;
    this.field = field;
    this.lineNumber = lineNumber;
    this.after = after;
    this.asList = asList;
    this.asComment = asComment;
    this.selectedFiles = [];
    const dvApi = (_a = this.plugin.app.plugins.plugins["dataview"]) == null ? void 0 : _a.api;
    if (dvApi) {
      const selectedValues = Array.isArray(initialValueObject) ? initialValueObject : [initialValueObject];
      selectedValues.forEach((value) => {
        if (dvApi.value.isLink(value)) {
          const file2 = this.plugin.app.vault.getAbstractFileByPath(value.path);
          if (file2 instanceof import_obsidian27.TFile)
            this.selectedFiles.push(file2);
        }
      });
    }
    this.containerEl.addClass("metadata-menu");
  }
  onOpen() {
    super.onOpen();
    this.containerEl.onkeydown = (e) => __async(this, null, function* () {
      if (e.key == "Enter" && e.altKey) {
        e.preventDefault();
        yield this.replaceValues();
        this.close();
      }
    });
    const buttonContainer = this.containerEl.createDiv({ cls: "footer-actions" });
    buttonContainer.createDiv({ cls: "spacer" });
    const infoContainer = buttonContainer.createDiv({ cls: "info" });
    infoContainer.setText("Alt+Enter to save");
    const confirmButton = new import_obsidian27.ButtonComponent(buttonContainer);
    confirmButton.setIcon("checkmark");
    confirmButton.onClick(() => __async(this, null, function* () {
      yield this.replaceValues();
      this.close();
    }));
    const cancelButton = new import_obsidian27.ButtonComponent(buttonContainer);
    cancelButton.setIcon("cross");
    cancelButton.onClick(() => {
      this.close();
    });
    const clearButton = new import_obsidian27.ButtonComponent(buttonContainer);
    clearButton.setIcon("trash");
    clearButton.onClick(() => __async(this, null, function* () {
      yield this.clearValues();
      this.close();
    }));
    clearButton.buttonEl.addClass("danger");
    this.modalEl.appendChild(buttonContainer);
  }
  getItems() {
    const sortingMethod = new Function("a", "b", `return ${this.field.options.customSorting}`) || function(a, b) {
      return a.basename < b.basename ? -1 : 1;
    };
    try {
      const fileManager = new FieldManager[this.field.type](this.plugin, this.field);
      return fileManager.getFiles(this.file).sort(sortingMethod);
    } catch (error) {
      this.close();
      throw error;
    }
  }
  getItemText(item) {
    return item.basename;
  }
  replaceValues() {
    return __async(this, null, function* () {
      const result = this.selectedFiles.map((file) => {
        var _a;
        const dvApi = (_a = this.plugin.app.plugins.plugins.dataview) == null ? void 0 : _a.api;
        let alias = void 0;
        if (dvApi && this.field.options.customRendering) {
          alias = new Function("page", `return ${this.field.options.customRendering}`)(dvApi.page(file.path));
        }
        return FieldManager2.buildMarkDownLink(this.plugin, this.file, file.basename, alias);
      });
      yield postValues(this.plugin, [{ name: this.field.name, payload: { value: result.join(", ") } }], this.file, this.lineNumber, this.after, this.asList, this.asComment);
    });
  }
  clearValues() {
    return __async(this, null, function* () {
      yield postValues(this.plugin, [{ name: this.field.name, payload: { value: "" } }], this.file);
    });
  }
  renderSuggestion(value, el) {
    var _a;
    const dvApi = (_a = this.plugin.app.plugins.plugins.dataview) == null ? void 0 : _a.api;
    if (dvApi && this.field.options.customRendering) {
      const suggestionContainer = el.createDiv({ cls: "item-with-add-on" });
      suggestionContainer.createDiv({
        text: new Function("page", `return ${this.field.options.customRendering}`)(dvApi.page(value.item.path))
      });
      const filePath = suggestionContainer.createDiv({ cls: "add-on" });
      filePath.setText(value.item.path);
    } else {
      el.setText(value.item.basename);
    }
    el.addClass("value-container");
    const spacer = this.containerEl.createDiv({ cls: "spacer" });
    el.appendChild(spacer);
    if (this.selectedFiles.some((file) => file.path === value.item.path)) {
      el.addClass("value-checked");
      const iconContainer = el.createDiv({ cls: "icon-container" });
      (0, import_obsidian27.setIcon)(iconContainer, "check-circle");
    }
  }
  renderSelected() {
    const chooser = this.chooser;
    const suggestions = chooser.suggestions;
    const values = chooser.values;
    suggestions.forEach((s, i) => {
      if (this.selectedFiles.some((file) => file.path === values[i].item.path)) {
        s.addClass("value-checked");
        if (s.querySelectorAll(".icon-container").length == 0) {
          const iconContainer = s.createDiv({ cls: "icon-container" });
          (0, import_obsidian27.setIcon)(iconContainer, "check-circle");
        }
      } else {
        s.removeClass("value-checked");
        s.querySelectorAll(".icon-container").forEach((icon) => icon.remove());
      }
    });
  }
  selectSuggestion(value, evt) {
    if (this.selectedFiles.includes(value.item)) {
      this.selectedFiles.remove(value.item);
    } else {
      this.selectedFiles.push(value.item);
    }
    this.renderSelected();
  }
  onChooseItem(item) {
    return __async(this, null, function* () {
    });
  }
};

// src/fields/fieldManagers/MultiFileField.ts
var MultiFileField = class extends FieldManager2 {
  constructor(plugin, field) {
    super(plugin, field, "MultiFile" /* MultiFile */);
    this.getFiles = (currentFile) => {
      const getResults = (api) => {
        try {
          return new Function("dv", "current", `return ${this.field.options.dvQueryString}`)(api, api.page(currentFile == null ? void 0 : currentFile.path));
        } catch (error) {
          new import_obsidian28.Notice(`Wrong query for field <${this.field.name}>
check your settings`, 3e3);
        }
      };
      const dataview = this.plugin.app.plugins.plugins["dataview"];
      if (this.field.options.dvQueryString && (dataview == null ? void 0 : dataview.settings.enableDataviewJs) && (dataview == null ? void 0 : dataview.settings.enableInlineDataviewJs)) {
        try {
          const filesPath = getResults(dataview.api).values.map((v) => v.file.path);
          return this.plugin.app.vault.getMarkdownFiles().filter((f) => filesPath.includes(f.path));
        } catch (error) {
          throw error;
        }
      } else {
        return this.plugin.app.vault.getMarkdownFiles();
      }
    };
  }
  static buildMarkDownLink(plugin, file, path) {
    const destFile = plugin.app.metadataCache.getFirstLinkpathDest(path, file.path);
    if (destFile) {
      return plugin.app.fileManager.generateMarkdownLink(destFile, file.path, void 0, destFile.basename);
    }
    return "";
  }
  addFieldOption(name, value, file, location) {
    const modal = new MultiFileFuzzySuggester(this.plugin, file, this.field, value);
    const action = () => modal.open();
    if (MultiFileField.isMenu(location)) {
      location.addItem((item) => {
        item.setTitle(`Update ${name}`);
        item.setIcon(FieldIcon["File" /* File */]);
        item.onClick(action);
        item.setSection("metadata-menu.fields");
      });
    } else if (MultiFileField.isSuggest(location)) {
      location.options.push({
        id: `update_${name}`,
        actionLabel: `<span>Update <b>${name}</b></span>`,
        action,
        icon: FieldIcon["File" /* File */]
      });
    } else if (MultiFileField.isFieldOptions(location)) {
      location.addOption(FieldIcon["File" /* File */], action, `Update ${name}'s value`);
    }
    ;
  }
  createAndOpenFieldModal(file, selectedFieldName, value, lineNumber, after, asList, asComment) {
    const fieldModal = new MultiFileFuzzySuggester(this.plugin, file, this.field, value, lineNumber, after, asList, asComment);
    fieldModal.titleEl.setText(`Enter value for ${selectedFieldName}`);
    fieldModal.open();
  }
  createDvField(dv, p, fieldContainer, attrs = {}) {
    var _a;
    attrs.cls = "value-container";
    fieldContainer.appendChild(dv.el("span", p[this.field.name], attrs));
    const searchBtn = fieldContainer.createEl("button");
    (0, import_obsidian28.setIcon)(searchBtn, FieldIcon["File" /* File */]);
    const spacer = fieldContainer.createEl("div", { cls: "spacer" });
    const file = this.plugin.app.vault.getAbstractFileByPath(p["file"]["path"]);
    let fieldModal;
    if (file instanceof import_obsidian28.TFile && file.extension == "md") {
      fieldModal = new MultiFileFuzzySuggester(this.plugin, file, this.field, p[this.field.name]);
    } else {
      throw Error("path doesn't correspond to a proper file");
    }
    searchBtn.onclick = () => {
      fieldModal.open();
    };
    if (!((_a = attrs == null ? void 0 : attrs.options) == null ? void 0 : _a.alwaysOn)) {
      searchBtn.hide();
      spacer.show();
      fieldContainer.onmouseover = () => {
        searchBtn.show();
        spacer.hide();
      };
      fieldContainer.onmouseout = () => {
        searchBtn.hide();
        spacer.show();
      };
    }
  }
  createFileContainer(container) {
    const dvQueryStringTopContainer = container.createDiv({ cls: "vstacked" });
    dvQueryStringTopContainer.createEl("span", { text: "Dataview Query (optional)", cls: "field-option" });
    const dvQueryStringContainer = dvQueryStringTopContainer.createDiv({ cls: "field-container" });
    this.dvQueryString = new import_obsidian28.TextAreaComponent(dvQueryStringContainer);
    this.dvQueryString.inputEl.cols = 50;
    this.dvQueryString.inputEl.rows = 4;
    this.dvQueryString.setValue(this.field.options.dvQueryString || "");
    this.dvQueryString.inputEl.addClass("full-width");
    this.dvQueryString.onChange((value) => {
      this.field.options.dvQueryString = value;
      FieldSettingsModal.removeValidationError(this.dvQueryString);
    });
    const customeRenderingTopContainer = container.createDiv({ cls: "vstacked" });
    customeRenderingTopContainer.createEl("span", { text: "Alias" });
    customeRenderingTopContainer.createEl("span", { text: "Personalise the rendering of your links' aliases with a function returning a string (<page> object is available)", cls: "sub-text" });
    customeRenderingTopContainer.createEl("code", {
      text: `function(page) { return <function using "page">; }`
    });
    const customeRenderingContainer = customeRenderingTopContainer.createDiv({ cls: "field-container" });
    const customRendering = new import_obsidian28.TextAreaComponent(customeRenderingContainer);
    customRendering.inputEl.cols = 50;
    customRendering.inputEl.rows = 4;
    customRendering.inputEl.addClass("full-width");
    customRendering.setValue(this.field.options.customRendering || "");
    customRendering.setPlaceholder('Javascript string, the "page" (dataview page type) variable is available\nexample 1: page.file.name\nexample 2: `${page.file.name} of gender ${page.gender}`');
    customRendering.onChange((value) => {
      this.field.options.customRendering = value;
      FieldSettingsModal.removeValidationError(customRendering);
    });
    const customSortingTopContainer = container.createDiv({ cls: "vstacked" });
    customSortingTopContainer.createEl("span", { text: "Sorting order" });
    customSortingTopContainer.createEl("span", { text: "Personalise the sorting order of your links with a instruction taking 2 files (a, b) and returning -1, 0 or 1", cls: "sub-text" });
    customSortingTopContainer.createEl("code", {
      text: `(a: TFile, b: TFile): number`
    });
    const customSortingContainer = customSortingTopContainer.createDiv({ cls: "field-container" });
    const customSorting = new import_obsidian28.TextAreaComponent(customSortingContainer);
    customSorting.inputEl.cols = 50;
    customSorting.inputEl.rows = 4;
    customSorting.inputEl.addClass("full-width");
    customSorting.setValue(this.field.options.customSorting || "");
    customSorting.setPlaceholder("Javascript instruction, (a: TFile, b: TFile): number\nexample 1 (alphabetical order): a.basename < b.basename ? 1 : -1 \nexample 2 (creation time newer to older): b.stat.ctime - b.stat.ctime");
    customSorting.onChange((value) => {
      this.field.options.customSorting = value;
      FieldSettingsModal.removeValidationError(customSorting);
    });
  }
  createSettingContainer(parentContainer, plugin, location) {
    this.createFileContainer(parentContainer);
  }
  getOptionsStr() {
    return this.field.options.dvQueryString || "";
  }
  validateOptions() {
    return true;
  }
  validateValue(value) {
    return true;
  }
  displayValue(container, file, fieldName, onClick) {
    var _a;
    const dvApi = (_a = this.plugin.app.plugins.plugins.dataview) == null ? void 0 : _a.api;
    if (dvApi) {
      const dvValue = dvApi.page(file.path)[fieldName];
      const values = Array.isArray(dvValue) ? dvValue : [dvValue];
      values.forEach((value, i) => {
        if (dvApi.value.isLink(value)) {
          const link = container.createEl("a", { text: value.path.split("/").last().replace(/(.*).md/, "$1") });
          link.onclick = () => {
            this.plugin.app.workspace.openLinkText(value.path, file.path, true);
            onClick();
          };
        } else {
          container.createDiv({ text: value });
        }
        if (i < values.length - 1) {
          container.createEl("span", { text: " | " });
        }
      });
    }
    container.createDiv();
  }
};

// src/fields/fieldManagers/LookupField.ts
var import_obsidian31 = require("obsidian");

// src/commands/updateLookups.ts
var import_obsidian30 = require("obsidian");

// src/commands/getValues.ts
var import_obsidian29 = require("obsidian");
function getValues(plugin, fileOrfilePath, attribute) {
  return __async(this, null, function* () {
    var _a;
    let file;
    if (fileOrfilePath instanceof import_obsidian29.TFile) {
      file = fileOrfilePath;
    } else {
      const _file = plugin.app.vault.getAbstractFileByPath(fileOrfilePath);
      if (_file instanceof import_obsidian29.TFile && _file.extension == "md") {
        file = _file;
      } else {
        throw Error("path doesn't correspond to a proper file");
      }
    }
    const content = (yield plugin.app.vault.read(file)).split("\n");
    const frontmatter = (_a = plugin.app.metadataCache.getFileCache(file)) == null ? void 0 : _a.frontmatter;
    const { position: { start: start2, end: end2 } } = frontmatter ? frontmatter : { position: { start: void 0, end: void 0 } };
    const result = [];
    content.map((line, i) => {
      if (start2 && end2 && i >= start2.line && i <= end2.line) {
        const regex = new RegExp(`${attribute}:(.*)`, "u");
        const r = line.match(regex);
        if (r && r.length > 0)
          result.push(r[1]);
      } else {
        const fullLineRegex2 = new RegExp(`^${inlineFieldRegex(attribute)}(?<values>[^\\]]*)`, "u");
        const fR = encodeLink(line).match(fullLineRegex2);
        if (fR == null ? void 0 : fR.groups) {
          result.push(decodeLink(fR.groups.values));
        }
        ;
        const inSentenceRegexBrackets2 = new RegExp(`\\[${inlineFieldRegex(attribute)}(?<values>[^\\]]+)?\\]`, "gu");
        const sRB = encodeLink(line).matchAll(inSentenceRegexBrackets2);
        let next = sRB.next();
        while (!next.done) {
          if (next.value.groups) {
            result.push(decodeLink(next.value.groups.values));
          }
          next = sRB.next();
        }
        const inSentenceRegexPar2 = new RegExp(`\\(${inlineFieldRegex(attribute)}(?<values>[^\\)]+)?\\)`, "gu");
        const sRP = encodeLink(line).matchAll(inSentenceRegexPar2);
        next = sRP.next();
        while (!next.done) {
          if (next.value.groups) {
            result.push(decodeLink(next.value.groups.values));
          }
          next = sRP.next();
        }
      }
    });
    return result;
  });
}

// src/commands/updateLookups.ts
function arraysAsStringAreEqual(a, b) {
  const aAsArray = a.split(",").map((v) => v.trim());
  const bAsArray = b.split(",").map((v) => v.trim());
  return aAsArray.every((item) => bAsArray.includes(item)) && bAsArray.every((item) => aAsArray.includes(item));
}
function parseFieldValues(plugin, file, fieldName) {
  return __async(this, null, function* () {
    var _a;
    const rawValue = (_a = yield getValues(plugin, file, fieldName)) == null ? void 0 : _a[0];
    const regex = new RegExp(`<div hidden id="${fieldName}_values">(?<values>.*)</div>`);
    const fR = rawValue.match(regex);
    return (fR == null ? void 0 : fR.groups) && "values" in (fR == null ? void 0 : fR.groups) ? fR.groups.values : rawValue;
  });
}
function updateLookups(plugin, source = "", forceUpdateOne, forceUpdateAll = false) {
  return __async(this, null, function* () {
    var _a, _b, _c;
    const start2 = Date.now();
    const f = plugin.fieldIndex;
    let renderingErrors = [];
    const payloads = {};
    const updatedFields = [];
    for (let id of f.fileLookupFiles.keys()) {
      const matchRegex = new RegExp("(?<filePath>.*)__related__(?<fileClassName>.*)___(?<fieldName>.*)");
      const { filePath, fileClassName, fieldName } = ((_a = id.match(matchRegex)) == null ? void 0 : _a.groups) || {};
      const tFile = plugin.app.vault.getAbstractFileByPath(filePath);
      const dvApi = (_b = plugin.app.plugins.plugins.dataview) == null ? void 0 : _b.api;
      const dvFile = dvApi && dvApi.page(tFile.path);
      if (tFile && dvFile) {
        payloads[filePath] = payloads[filePath] || [];
        let newValue = "";
        const pages = f.fileLookupFiles.get(id);
        const field = (_c = f.filesFields.get(filePath)) == null ? void 0 : _c.find((field2) => field2.name == fieldName);
        if (field) {
          const outputType = field.options.outputType;
          if (!f.fileLookupFieldLastOutputType.get(id))
            f.fileLookupFieldLastOutputType.set(id, outputType);
          switch (outputType) {
            case "LinksList" /* LinksList */:
            case "LinksBulletList" /* LinksBulletList */:
              {
                const newValuesArray = pages == null ? void 0 : pages.map((dvFile2) => {
                  return FieldManager2.buildMarkDownLink(plugin, tFile, dvFile2.file.path);
                });
                newValue = (newValuesArray || []).join(", ");
              }
              break;
            case "CustomList" /* CustomList */:
            case "CustomBulletList" /* CustomBulletList */:
              {
                const renderingFunction = new Function("page", `return ${field.options.customListFunction}`);
                const newValuesArray = pages == null ? void 0 : pages.map((dvFile2) => {
                  try {
                    return renderingFunction(dvFile2);
                  } catch (e) {
                    if (!renderingErrors.includes(field.name))
                      renderingErrors.push(field.name);
                    return "";
                  }
                });
                newValue = (newValuesArray || []).join(", ");
              }
              break;
            case "CustomSummarizing" /* CustomSummarizing */:
              {
                const customSummarizingFunction = field.options.customSummarizingFunction;
                const summarizingFunction = new Function("pages", customSummarizingFunction.replace(/\{\{summarizedFieldName\}\}/g, field.options.summarizedFieldName));
                try {
                  newValue = summarizingFunction(pages).toString();
                } catch (e) {
                  if (!renderingErrors.includes(field.name))
                    renderingErrors.push(field.name);
                  newValue = "";
                }
              }
              break;
            case "BuiltinSummarizing" /* BuiltinSummarizing */:
              {
                const builtinFunction = field.options.builtinSummarizingFunction;
                const summarizingFunction = new Function("pages", BuiltinSummarizingFunction[builtinFunction].replace(/\{\{summarizedFieldName\}\}/g, field.options.summarizedFieldName));
                try {
                  newValue = summarizingFunction(pages).toString();
                } catch (e) {
                  if (!renderingErrors.includes(field.name))
                    renderingErrors.push(field.name);
                  newValue = "";
                }
              }
              break;
            default:
              break;
          }
          const currentValue = f.fileLookupFieldLastValue.get(id) || (yield parseFieldValues(plugin, tFile, field.name)) || "";
          const shouldCheckForUpdate = field.options.autoUpdate || field.options.autoUpdate === void 0 || forceUpdateAll || (forceUpdateOne == null ? void 0 : forceUpdateOne.file.path) === tFile.path && (forceUpdateOne == null ? void 0 : forceUpdateOne.fieldName) === field.name;
          const valueHasChanged = !currentValue && newValue !== "" || !arraysAsStringAreEqual(currentValue, newValue);
          const formatHasChanged = outputType !== f.fileLookupFieldLastOutputType.get(id);
          if (shouldCheckForUpdate) {
            f.fileLookupFieldLastValue.set(id, newValue);
            f.fileLookupFieldLastOutputType.set(id, outputType);
          }
          if (shouldCheckForUpdate && (valueHasChanged || formatHasChanged)) {
            const previousValuesCount = plugin.fieldIndex.previousFileLookupFilesValues.get(id) || 0;
            payloads[filePath].push({ name: fieldName, payload: { value: newValue, previousItemsCount: previousValuesCount } });
            updatedFields.push(`${filePath}__${fieldName}`);
          } else if (source !== "full Index") {
            plugin.fieldIndex.fileChanged = false;
          }
          if (!valueHasChanged && !formatHasChanged) {
            f.fileLookupFieldsStatus.set(`${filePath}__${fieldName}`, "upToDate" /* upToDate */);
          }
        }
      }
    }
    Object.entries(payloads).forEach((_0) => __async(this, [_0], function* ([filePath, payload]) {
      if (payload.length)
        yield postValues(plugin, payload, filePath);
    }));
    updatedFields.forEach((field) => f.fileLookupFieldsStatus.set(field, "upToDate" /* upToDate */));
    if (renderingErrors.length)
      new import_obsidian30.Notice(`Those fields have incorrect output rendering functions:
${renderingErrors.join(",\n")}`);
  });
}

// src/fields/fieldManagers/LookupField.ts
var LookupField = class extends FieldManager2 {
  constructor(plugin, field) {
    super(plugin, field, "Lookup" /* Lookup */);
    this.showModalOption = false;
  }
  addFieldOption(name, value, file, location) {
    if (!this.field.options.autoUpdate && this.field.options.autoUpdate !== void 0) {
      const f = this.plugin.fieldIndex;
      const id = `${file.path}__${this.field.name}`;
      let status;
      status = f.fileLookupFieldsStatus.get(id) || "changed" /* changed */;
      if (f.fileLookupFieldLastOutputType.get(`${file.path}__related__${this.field.fileClassName}___${this.field.name}`) !== this.field.options.outputType)
        status = "changed" /* changed */;
      const icon = status === "changed" /* changed */ ? "refresh-ccw" : "file-check";
      const action = () => {
        updateLookups(this.plugin, "single_command", { file, fieldName: this.field.name });
      };
      if (LookupField.isMenu(location) && status === "changed" /* changed */) {
        location.addItem((item) => {
          item.setTitle(`Update <${name}>`);
          item.setIcon(icon);
          item.onClick(action);
          item.setSection("metadata-menu.fields");
        });
      } else if (LookupField.isSuggest(location) && status === "changed" /* changed */) {
        location.options.push({
          id: `update_${name}`,
          actionLabel: `<span>Update <b>${name}</b></span>`,
          action,
          icon
        });
      } else if (LookupField.isFieldOptions(location) && status === "changed" /* changed */) {
        location.addOption(icon, action, `Update ${name}'s value`);
      } else if (LookupField.isFieldOptions(location) && status === "upToDate" /* upToDate */) {
        location.addOption(icon, () => {
        }, `${name} is up to date`);
      }
    } else if (LookupField.isFieldOptions(location)) {
      location.addOption("server-cog", () => {
      }, `${name} is auto-updated`, "disabled");
    }
  }
  createAndOpenFieldModal(file, selectedFieldName, value, lineNumber, after, asList, asComment) {
    return __async(this, null, function* () {
      yield postValues(this.plugin, [{ name: this.field.name, payload: { value: "" } }], file, lineNumber, after, asList, asComment);
    });
  }
  createDvField(dv, p, fieldContainer, attrs) {
    var _a, _b;
    const file = p.file;
    const fieldName = this.field.name;
    const fileClassName = ((_b = (_a = this.plugin.fieldIndex.filesFields.get(file.path)) == null ? void 0 : _a.find((f) => f.name === fieldName)) == null ? void 0 : _b.fileClassName) || "presetField";
    const fieldValue = dv.el("span", this.plugin.fieldIndex.fileLookupFieldLastValue.get(`${file.path}__related__${fileClassName}___${fieldName}`), attrs);
    fieldContainer.appendChild(fieldValue);
  }
  displaySelectedOutputOptionContainer(optionContainers, value) {
    optionContainers.forEach((options_set) => {
      var _a, _b;
      if (options_set[0].includes(value)) {
        (_a = options_set[1]) == null ? void 0 : _a.show();
      } else {
        (_b = options_set[1]) == null ? void 0 : _b.hide();
      }
    });
  }
  displayValue(container, file, fieldName, onClicked = () => {
  }) {
    var _a, _b;
    const fileClassName = ((_b = (_a = this.plugin.fieldIndex.filesFields.get(file.path)) == null ? void 0 : _a.find((f) => f.name === fieldName)) == null ? void 0 : _b.fileClassName) || "presetField";
    container.createDiv({ text: this.plugin.fieldIndex.fileLookupFieldLastValue.get(`${file.path}__related__${fileClassName}___${fieldName}`) });
  }
  displaySelectedOutputWarningContainer(optionWarningContainer, value) {
    ["LinksBulletList" /* LinksBulletList */.toString(), "CustomBulletList" /* CustomBulletList */.toString()].includes(value) ? optionWarningContainer.show() : optionWarningContainer.hide();
  }
  createLookupContainer(container) {
    const autoUpdateTopContainer = container.createDiv({ cls: "vstacked" });
    const autoUpdateContainer = autoUpdateTopContainer.createDiv({ cls: "field-container" });
    autoUpdateContainer.createEl("span", { text: "Auto update this field ", cls: "label" });
    autoUpdateContainer.createDiv({ cls: "spacer" });
    const autoUpdate = new import_obsidian31.ToggleComponent(autoUpdateContainer);
    autoUpdateTopContainer.createEl("span", { text: "This could lead to latencies depending on the queries", cls: "sub-text warning" });
    if (this.field.options.autoUpdate === void 0)
      this.field.options.autoUpdate = false;
    autoUpdate.setValue(this.field.options.autoUpdate);
    autoUpdate.onChange((value) => {
      this.field.options.autoUpdate = value;
    });
    const dvQueryStringTopContainer = container.createDiv({ cls: "vstacked" });
    dvQueryStringTopContainer.createEl("span", { text: "Pages to look for in your vault (DataviewJS Query)", cls: "label" });
    dvQueryStringTopContainer.createEl("span", { text: "DataviewJS query of the form `dv.pages(...)`", cls: "sub-text" });
    const dvQueryStringContainer = dvQueryStringTopContainer.createDiv({ cls: "field-container" });
    const dvQueryString = new import_obsidian31.TextAreaComponent(dvQueryStringContainer);
    dvQueryString.inputEl.addClass("full-width");
    dvQueryString.inputEl.cols = 50;
    dvQueryString.inputEl.rows = 4;
    dvQueryString.setValue(this.field.options.dvQueryString || "");
    dvQueryString.setPlaceholder("exampe: dv.pages('#student')");
    dvQueryString.onChange((value) => {
      this.field.options.dvQueryString = value;
      FieldSettingsModal.removeValidationError(dvQueryString);
    });
    const targetFieldTopContainer = container.createDiv({ cls: "vstacked" });
    const targetFieldContainer = targetFieldTopContainer.createDiv({ cls: "field-container" });
    targetFieldContainer.createEl("span", { text: "Name of the related field", cls: "label" });
    const targetFieldName = new import_obsidian31.TextComponent(targetFieldContainer);
    targetFieldName.inputEl.addClass("full-width");
    targetFieldName.inputEl.addClass("with-label");
    targetFieldTopContainer.createEl("span", { text: "field in the target pages that contains a link to the page where this lookup field is", cls: "sub-text" });
    targetFieldName.setValue(this.field.options.targetFieldName || "");
    targetFieldName.onChange((value) => {
      this.field.options.targetFieldName = value;
      FieldSettingsModal.removeValidationError(targetFieldName);
    });
    const outputTypeContainer = container.createDiv({ cls: "field-container" });
    this.field.options.outputType = this.field.options.outputType || "LinksList" /* LinksList */;
    outputTypeContainer.createEl("span", { text: "Type of output", cls: "label" });
    outputTypeContainer.createDiv({ cls: "spacer" });
    const outputTypeList = new import_obsidian31.DropdownComponent(outputTypeContainer);
    Object.keys(Type).forEach((outputType) => {
      outputTypeList.addOption(outputType, Description[outputType]);
    });
    outputTypeList.setValue(this.field.options.outputType);
    const outputWarningContainer = container.createDiv();
    outputWarningContainer.createEl("p", {
      text: "Warning: this may override some lines under your list. There shouldn't be an extra manual item in the list that is automatically rendered by this field: it would be overriden after each field indexing",
      cls: "field-warning"
    });
    const builtinOptionsContainer = container.createDiv();
    const builtinSummarizeFunctionTopContainer = builtinOptionsContainer.createDiv({ cls: "vstacked" });
    const builtinSummarizeFunctionContainer = builtinSummarizeFunctionTopContainer.createDiv({ cls: "field-container" });
    this.field.options.builtinSummarizingFunction = this.field.options.builtinSummarizingFunction || Default.BuiltinSummarizing;
    builtinSummarizeFunctionContainer.createEl("span", { text: OptionLabel.BuiltinSummarizing, cls: "label" });
    builtinSummarizeFunctionContainer.createDiv({ cls: "spacer" });
    const builtinSummarizeFunctionList = new import_obsidian31.DropdownComponent(builtinSummarizeFunctionContainer);
    Object.keys(BuiltinSummarizing).forEach((builtinFunction2) => {
      builtinSummarizeFunctionList.addOption(builtinFunction2, BuiltinSummarizing[builtinFunction2]);
    });
    const builtinOptionsDescriptionContainer = builtinSummarizeFunctionTopContainer.createDiv({ cls: "sub-text" });
    const builtinFunction = this.field.options.builtinSummarizingFunction;
    builtinOptionsDescriptionContainer.setText(BuiltinSummarizingFunctionDescription[builtinFunction].replace("{{summarizedFieldName}}", this.field.options.summarizedFieldName));
    builtinSummarizeFunctionList.setValue(this.field.options.builtinSummarizingFunction);
    builtinSummarizeFunctionList.onChange((value) => {
      this.field.options.builtinSummarizingFunction = value;
      builtinOptionsDescriptionContainer.setText(BuiltinSummarizingFunctionDescription[value].replace("{{summarizedFieldName}}", this.field.options.summarizedFieldName));
    });
    const summarizedFieldNameTopContainer = builtinOptionsContainer.createDiv({ cls: "vstacked" });
    this.field.options.summarizedFieldName = this.field.options.summarizedFieldName;
    const summarizedFieldNameContainer = summarizedFieldNameTopContainer.createDiv({ cls: "field-container" });
    summarizedFieldNameContainer.createEl("span", { text: "Summarized field name", cls: "label" });
    const summarizedFieldName = new import_obsidian31.TextComponent(summarizedFieldNameContainer);
    summarizedFieldName.inputEl.addClass("full-width");
    summarizedFieldName.inputEl.addClass("with-label");
    summarizedFieldNameTopContainer.createEl("span", { text: "Name of the field containing summarized value used for the summarizing function", cls: "sub-text" });
    summarizedFieldName.setValue(this.field.options.summarizedFieldName);
    summarizedFieldName.onChange((value) => {
      this.field.options.summarizedFieldName = value;
    });
    const outputRenderingFunctionTopContainer = container.createDiv({ cls: "vstacked" });
    this.field.options.customListFunction = this.field.options.customListFunction || Default.CustomList;
    outputRenderingFunctionTopContainer.createEl("span", { text: OptionLabel.CustomList, cls: "label" });
    outputRenderingFunctionTopContainer.createEl("code", { text: OptionSubLabel.CustomList });
    const outputRenderingFunctionContainer = outputRenderingFunctionTopContainer.createDiv({ cls: "field-container" });
    const outputRenderingFunction = new import_obsidian31.TextAreaComponent(outputRenderingFunctionContainer);
    outputRenderingFunction.inputEl.addClass("full-width");
    outputRenderingFunction.setPlaceholder(Helper.CustomList);
    outputRenderingFunction.setValue(this.field.options.customListFunction);
    outputRenderingFunction.inputEl.cols = 65;
    outputRenderingFunction.inputEl.rows = 4;
    outputRenderingFunction.onChange((value) => {
      this.field.options.customListFunction = value;
    });
    const outputSummarizingFunctionTopContainer = container.createDiv({ cls: "vstacked" });
    this.field.options.customSummarizingFunction = this.field.options.customSummarizingFunction || Default.CustomSummarizing;
    outputSummarizingFunctionTopContainer.createEl("span", { text: OptionLabel.CustomSummarizing, cls: "label" });
    outputSummarizingFunctionTopContainer.createEl("code", { text: OptionSubLabel.CustomSummarizing });
    const outputSummarizingFunctionContainer = outputSummarizingFunctionTopContainer.createDiv({ cls: "field-container" });
    const outputSummarizingFunction = new import_obsidian31.TextAreaComponent(outputSummarizingFunctionContainer);
    outputSummarizingFunction.inputEl.addClass("full-width");
    outputSummarizingFunction.setPlaceholder(Helper.CustomSummarizing);
    outputSummarizingFunction.setValue(this.field.options.customSummarizingFunction);
    outputSummarizingFunction.inputEl.cols = 65;
    outputSummarizingFunction.inputEl.rows = 8;
    outputSummarizingFunction.onChange((value) => {
      this.field.options.customSummarizingFunction = value;
    });
    const optionContainers = [
      [["LinksList", "LinksBulletList"], void 0],
      [["BuiltinSummarizing"], builtinOptionsContainer],
      [["CustomList", "CustomBulletList"], outputRenderingFunctionTopContainer],
      [["CustomSummarizing"], outputSummarizingFunctionTopContainer]
    ];
    this.displaySelectedOutputOptionContainer(optionContainers, outputTypeList.getValue());
    this.displaySelectedOutputWarningContainer(outputWarningContainer, outputTypeList.getValue());
    outputTypeList.onChange((value) => {
      this.field.options.outputType = value;
      this.displaySelectedOutputOptionContainer(optionContainers, value);
      this.displaySelectedOutputWarningContainer(outputWarningContainer, value);
    });
  }
  createSettingContainer(container, plugin, location) {
    this.createLookupContainer(container);
  }
  getOptionsStr() {
    const shortDescription = ShortDescription[this.field.options.outputType];
    let complement = "";
    if (this.field.options.outputType === "BuiltinSummarizing" /* BuiltinSummarizing */) {
      complement = ` ${this.field.options.builtinSummarizingFunction}${this.field.options.builtinSummarizingFunction !== "CountAll" /* CountAll */ ? " " + this.field.options.summarizedFieldName : ""}`;
    }
    return shortDescription + complement;
  }
  validateOptions() {
    return true;
  }
};

// src/fields/fieldManagers/FormulaField.ts
var import_obsidian33 = require("obsidian");

// src/commands/updateFormulas.ts
var import_obsidian32 = require("obsidian");
function cleanRemovedFormulasFromIndex(plugin) {
  var _a, _b;
  const f = plugin.fieldIndex;
  for (let id of f.fileFormulaFieldLastValue.keys()) {
    const matchRegex = new RegExp("(?<filePath>.*)__calculated__(?<fileClassName>.*)___(?<fieldName>.*)");
    const { filePath, fileClassName, fieldName } = ((_a = id.match(matchRegex)) == null ? void 0 : _a.groups) || {};
    const existingFormulaFieldWithNameAndFileClassName = (_b = f.filesFields.get(filePath)) == null ? void 0 : _b.find((field) => field.name === fieldName && (field.fileClassName === void 0 && fileClassName === "presetField" || field.fileClassName === fileClassName));
    const dvPage = f.dv.api.page(filePath);
    if (dvPage === void 0 || dvPage[fieldName] === void 0 || !existingFormulaFieldWithNameAndFileClassName) {
      f.fileFormulaFieldLastValue.delete(id);
    }
  }
}
function updateFormulas(plugin, forceUpdateOne, forceUpdateAll = false) {
  return __async(this, null, function* () {
    const start2 = Date.now();
    const f = plugin.fieldIndex;
    let renderingErrors = [];
    const fileFormulasFields = /* @__PURE__ */ new Map();
    [...f.filesFieldsExists].forEach(([filePath, fields]) => {
      fields.filter((field) => field.type === "Formula" /* Formula */).forEach((field) => {
        fileFormulasFields.set(`${filePath}__calculated__${field.fileClassName || "presetField"}___${field.name}`, field);
      });
    });
    [...fileFormulasFields].forEach((_0) => __async(this, [_0], function* ([id, field]) {
      var _a;
      const matchRegex = new RegExp("(?<filePath>.*)__calculated__(?<fileClassName>.*)___(?<fieldName>.*)");
      const { filePath, fileClassName, fieldName } = ((_a = id.match(matchRegex)) == null ? void 0 : _a.groups) || {};
      const shouldUpdate = forceUpdateAll || (forceUpdateOne == null ? void 0 : forceUpdateOne.file.path) === filePath && (forceUpdateOne == null ? void 0 : forceUpdateOne.fieldName) === fieldName || field.options.autoUpdate === true;
      const dvFile = f.dv.api.page(filePath);
      const currentdvValue = dvFile && dvFile[field.name];
      const currentValue = currentdvValue ? currentdvValue.toString() : "";
      f.fileFormulaFieldLastValue.set(id, currentValue);
      try {
        const newValue = new Function("current, dv", `return ${field.options.formula}`)(dvFile, f.dv.api).toString();
        const valueHasChanged = !currentValue && newValue !== "" || !arraysAsStringAreEqual(currentValue, newValue) || currentValue !== newValue;
        if (!valueHasChanged) {
          f.fileFormulaFieldsStatus.set(`${filePath}__${fieldName}`, "upToDate" /* upToDate */);
          return;
        } else {
          if (!shouldUpdate) {
            f.fileFormulaFieldsStatus.set(`${filePath}__${field.name}`, "changed" /* changed */);
          } else {
            yield postValues(plugin, [{ name: field.name, payload: { value: newValue } }], filePath);
            f.fileFormulaFieldLastValue.set(id, newValue);
            f.fileFormulaFieldsStatus.set(`${filePath}__${field.name}`, "upToDate" /* upToDate */);
          }
        }
      } catch (e) {
        if (renderingErrors.includes(field.name))
          renderingErrors.push(field.name);
      }
    }));
    if (renderingErrors.length)
      new import_obsidian32.Notice(`Those fields have incorrect output rendering functions:
${renderingErrors.join(",\n")}`);
    cleanRemovedFormulasFromIndex(plugin);
  });
}

// src/fields/fieldManagers/FormulaField.ts
var FormulaField = class extends FieldManager2 {
  constructor(plugin, field) {
    super(plugin, field, "Formula" /* Formula */);
    this.showModalOption = false;
  }
  addFieldOption(name, value, file, location) {
    const f = this.plugin.fieldIndex;
    const id = `${file.path}__${this.field.name}`;
    let status;
    status = f.fileFormulaFieldsStatus.get(id) || "changed" /* changed */;
    const icon = status === "changed" /* changed */ ? "refresh-ccw" : "file-check";
    const action = () => {
      updateFormulas(this.plugin, { file, fieldName: this.field.name });
    };
    if (FormulaField.isMenu(location) && status === "changed" /* changed */) {
      location.addItem((item) => {
        item.setTitle(`Update <${name}>`);
        item.setIcon(icon);
        item.onClick(action);
        item.setSection("metadata-menu.fields");
      });
    } else if (FormulaField.isSuggest(location) && status === "changed" /* changed */) {
      location.options.push({
        id: `update_${name}`,
        actionLabel: `<span>Update <b>${name}</b></span>`,
        action,
        icon
      });
    } else if (FormulaField.isFieldOptions(location) && status === "changed" /* changed */) {
      location.addOption(icon, action, `Update ${name}'s value`);
    } else if (FormulaField.isFieldOptions(location) && status === "upToDate" /* upToDate */) {
      location.addOption(icon, () => {
      }, `${name} is up to date`);
    }
  }
  createAndOpenFieldModal(file, selectedFieldName, value, lineNumber, after, asList, asComment) {
    return __async(this, null, function* () {
      yield postValues(this.plugin, [{ name: this.field.name, payload: { value: "" } }], file, lineNumber, after, asList, asComment);
    });
  }
  createDvField(dv, p, fieldContainer, attrs) {
    const fieldValue = dv.el("span", p[this.field.name], attrs);
    fieldContainer.appendChild(fieldValue);
  }
  displayValue(container, file, fieldName, onClicked = () => {
  }) {
    var _a, _b;
    const fileClassName = ((_b = (_a = this.plugin.fieldIndex.filesFields.get(file.path)) == null ? void 0 : _a.find((f) => f.name === fieldName)) == null ? void 0 : _b.fileClassName) || "presetField";
    container.createDiv({ text: this.plugin.fieldIndex.fileFormulaFieldLastValue.get(`${file.path}__calculated__${fileClassName}___${fieldName}`) });
  }
  createFormulaContainer(container) {
    const autoUpdateTopContainer = container.createDiv({ cls: "vstacked" });
    const autoUpdateContainer = autoUpdateTopContainer.createDiv({ cls: "field-container" });
    autoUpdateContainer.createEl("span", { text: "Auto update this field ", cls: "label" });
    autoUpdateContainer.createDiv({ cls: "spacer" });
    const autoUpdate = new import_obsidian33.ToggleComponent(autoUpdateContainer);
    autoUpdateTopContainer.createEl("span", { text: "This could lead to latencies depending on the queries", cls: "sub-text warning" });
    if (this.field.options.autoUpdate === void 0)
      this.field.options.autoUpdate = false;
    autoUpdate.setValue(this.field.options.autoUpdate);
    autoUpdate.onChange((value) => {
      this.field.options.autoUpdate = value;
    });
    const formulaTopContainer = container.createDiv({ cls: "vstacked" });
    formulaTopContainer.createEl("span", { text: "javascript formula", cls: "label" });
    formulaTopContainer.createEl("span", { text: "current and pages variables are available`", cls: "sub-text" });
    const formulaContainer = formulaTopContainer.createDiv({ cls: "field-container" });
    const formula = new import_obsidian33.TextAreaComponent(formulaContainer);
    formula.inputEl.addClass("full-width");
    formula.inputEl.cols = 50;
    formula.inputEl.rows = 4;
    formula.setValue(this.field.options.formula || "");
    formula.setPlaceholder("exampe: current.apple + current.bananas - 3");
    formula.onChange((value) => {
      this.field.options.formula = value;
      FieldSettingsModal.removeValidationError(formula);
    });
  }
  createSettingContainer(parentContainer, plugin, location) {
    this.createFormulaContainer(parentContainer);
  }
  getOptionsStr() {
    return this.field.options.formula;
  }
  validateOptions() {
    return true;
  }
};

// src/fields/fieldManagers/CanvasField.ts
var import_obsidian34 = require("obsidian");
var CanvasField = class extends FieldManager2 {
  constructor(plugin, field) {
    super(plugin, field, "Canvas" /* Canvas */);
  }
  displayValue(container, file, fieldName, onClick) {
    var _a;
    const dvApi = (_a = this.plugin.app.plugins.plugins.dataview) == null ? void 0 : _a.api;
    if (dvApi) {
      const dvValue = dvApi.page(file.path)[fieldName];
      const values = Array.isArray(dvValue) ? dvValue : [dvValue];
      values.forEach((value, i) => {
        if (dvApi.value.isLink(value)) {
          const link = container.createEl("a", { text: value.path.split("/").last().replace(/(.*).md/, "$1") });
          link.onclick = () => {
            this.plugin.app.workspace.openLinkText(value.path, file.path, true);
            onClick();
          };
        } else {
          container.createDiv({ text: value });
        }
        if (i < values.length - 1) {
          container.createEl("span", { text: " | " });
        }
      });
    }
    container.createDiv();
  }
  addFieldOption(name, value, file, location) {
  }
  createAndOpenFieldModal(file, selectedFieldName, value, lineNumber, after, asList, asComment) {
    return __async(this, null, function* () {
      yield postValues(this.plugin, [{ name: this.field.name, payload: { value: "" } }], file, lineNumber, after, asList, asComment);
    });
  }
  createDvField(dv, p, fieldContainer, attrs) {
    const fieldValue = dv.el("span", p[this.field.name], attrs);
    fieldContainer.appendChild(fieldValue);
  }
  createSettingContainer(container, plugin, location) {
    const options2 = this.field.options;
    const standardColors = ["1", "2", "3", "4", "5", "6"];
    const canvasPathContainer = container.createDiv({ cls: "field-container" });
    canvasPathContainer.createDiv({ text: `Path of the canvas`, cls: "label" });
    const canvasPathInput = new import_obsidian34.TextComponent(canvasPathContainer);
    canvasPathInput.inputEl.addClass("full-width");
    canvasPathInput.inputEl.addClass("with-label");
    new FileSuggest(canvasPathInput.inputEl, plugin, "/", "canvas");
    const canvasPath = options2.canvasPath;
    canvasPathInput.setValue(canvasPath || "");
    canvasPathInput.setPlaceholder("Path/of/the/file.canvas");
    canvasPathInput.onChange((value) => {
      FieldSettingsModal.removeValidationError(canvasPathInput);
      options2.canvasPath = value;
    });
    this.canvasPathInput = canvasPathInput;
    options2.direction = options2.direction || "bothsides";
    const directionContainer = container.createDiv({ cls: "field-container" });
    directionContainer.createDiv({ text: `Nodes to target from this note`, cls: "label" });
    directionContainer.createDiv({ cls: "spacer" });
    const directionSelection = new import_obsidian34.DropdownComponent(directionContainer);
    [
      ["incoming", "Incoming"],
      ["outgoing", "Outgoing"],
      ["bothsides", "Both sides"]
    ].forEach(([direction, label]) => directionSelection.addOption(direction, label));
    directionSelection.setValue(options2.direction || "incoming");
    directionSelection.onChange((value) => options2.direction = value);
    const nodeColorsContainer = container.createDiv({ cls: "field-container colors" });
    const filesFromDVQueryTopContainer = container.createDiv({ cls: "vstacked" });
    filesFromDVQueryTopContainer.createEl("span", { text: "Matching files" });
    filesFromDVQueryTopContainer.createEl("span", { text: "Dataview query returning a list of files (<dv> object is available)", cls: "sub-text" });
    const filesFromDVQueryContainer = filesFromDVQueryTopContainer.createDiv({ cls: "field-container" });
    const filesFromDVQuery = new import_obsidian34.TextAreaComponent(filesFromDVQueryContainer);
    filesFromDVQuery.inputEl.addClass("full-width");
    filesFromDVQuery.inputEl.cols = 65;
    filesFromDVQuery.inputEl.rows = 8;
    filesFromDVQuery.setPlaceholder("ex: dv.pages('#student').map(p => p.name)");
    filesFromDVQuery.setValue(options2.filesFromDVQuery || "");
    filesFromDVQuery.onChange((value) => {
      options2.filesFromDVQuery = value;
    });
    const edgeColorsContainer = container.createDiv({ cls: "field-container colors" });
    const buildColorsContainer = (container2, colorList, label) => {
      container2.replaceChildren(...[]);
      container2.createEl("span", { text: label, cls: "label" });
      container2.createDiv({ cls: "spacer" });
      const toggleStandardColorButton = (container3, color) => {
        if (colorList.includes(color)) {
          container3.addClass("active");
          (0, import_obsidian34.setIcon)(container3, "cross");
        } else {
          container3.removeClass("active");
          (0, import_obsidian34.setIcon)(container3, "plus");
        }
        ;
      };
      standardColors.forEach((color) => {
        const colorContainer = container2.createDiv({ cls: `node-color color-${color}` });
        toggleStandardColorButton(colorContainer, color);
        colorContainer.onmouseover = () => {
          colorContainer.setAttr("style", `color: white`);
        };
        colorContainer.onmouseout = () => {
          colorContainer.removeAttribute("style");
        };
        colorContainer.onclick = () => {
          const colors = colorList;
          if (colors.includes(color)) {
            colors.remove(color);
          } else {
            colors.push(color);
          }
          ;
          toggleStandardColorButton(colorContainer, color);
        };
      });
      const toggleAltColors = () => {
        const altNodeColors = colorList && colorList.filter((color) => !standardColors.includes(color)) || [];
        altNodeColors.forEach((color) => {
          const colorContainer = container2.createDiv({ cls: `node-color` });
          colorContainer.setAttr("style", `background-color: ${color}; color: ${color}`);
          colorContainer.onmouseover = () => {
            colorContainer.setAttr("style", `background-color: ${color}; color: white`);
          };
          colorContainer.onmouseout = () => {
            colorContainer.setAttr("style", `background-color: ${color}; color: ${color}`);
          };
          (0, import_obsidian34.setIcon)(colorContainer, "cross");
          colorContainer.onclick = () => {
            colorList.remove(color);
            container2.removeChild(colorContainer);
          };
        });
      };
      toggleAltColors();
      const altColorPickerContainer = container2.createDiv({ cls: `node-color picker` });
      const altColorPicker = new import_obsidian34.ColorComponent(altColorPickerContainer);
      altColorPicker.onChange((value) => {
        colorList.push(value);
        buildColorsContainer(container2, colorList, label);
      });
    };
    options2.nodeColors = options2.nodeColors || [];
    options2.edgeColors = options2.edgeColors || [];
    buildColorsContainer(nodeColorsContainer, options2.nodeColors, "Node matching colors:");
    buildColorsContainer(edgeColorsContainer, options2.edgeColors, "Edge matching colors:");
    const edgeFromSidesContainer = container.createDiv({ cls: "field-container edges" });
    container.createDiv({ cls: "sub-text", text: "No edge selected is equivalent to all edges selected" });
    const edgeToSidesContainer = container.createDiv({ cls: "field-container egdes" });
    container.createDiv({ cls: "sub-text", text: "No edge selected is equivalent to all edges selected" });
    const sides = [
      ["top", "chevron-up"],
      ["right", "chevron-right"],
      ["bottom", "chevron-down"],
      ["left", "chevron-left"]
    ];
    const buildEdgeSideContainer = (container2, edgeList, label) => {
      container2.createDiv({ cls: "label", text: label });
      container2.createDiv({ cls: "spacer" });
      sides.forEach(([side, iconName]) => {
        edgeList = edgeList || sides.map((side2) => side2[0]);
        const edgeSideContainer = container2.createDiv({ cls: "edge-side" });
        const sideIconContainer = edgeSideContainer.createDiv({ cls: "side-icon" });
        (0, import_obsidian34.setIcon)(sideIconContainer, iconName);
        const sideTogglerContainer = new import_obsidian34.ToggleComponent(edgeSideContainer);
        sideTogglerContainer.setValue(edgeList.includes(side));
        sideTogglerContainer.onChange((value) => value ? edgeList.push(side) : edgeList.remove(side));
      });
    };
    options2.edgeFromSides = options2.edgeFromSides || [];
    options2.edgeToSides = options2.edgeToSides || [];
    buildEdgeSideContainer(edgeFromSidesContainer, options2.edgeFromSides, "Edges matchin From side:");
    buildEdgeSideContainer(edgeToSidesContainer, options2.edgeToSides, "Edges matchin To side:");
    options2.edgeLabels = options2.edgeLabels || [];
    const edgeLabelsContainer = container.createDiv({ cls: "field-container labels" });
    const buildLabelsContainer = () => {
      edgeLabelsContainer.replaceChildren(...[]);
      edgeLabelsContainer.createDiv({ cls: "label", text: "Edges matching labels: " });
      options2.edgeLabels.forEach((label) => {
        const labelContainer = edgeLabelsContainer.createDiv({ cls: "item chip", text: label });
        new import_obsidian34.ButtonComponent(labelContainer).setIcon("x-circle").setClass("item-remove").onClick(() => {
          options2.edgeLabels.remove(label);
          edgeLabelsContainer.removeChild(labelContainer);
        });
      });
    };
    buildLabelsContainer();
    const newLabelContainer = container.createDiv({ cls: "field-container" });
    newLabelContainer.createDiv({ cls: "label", text: "Add a new matching label" });
    newLabelContainer.createDiv({ cls: "spacer" });
    const labelInput = new import_obsidian34.TextComponent(newLabelContainer);
    const labelValidate = new import_obsidian34.ButtonComponent(newLabelContainer);
    labelInput.onChange((value) => value ? labelValidate.setCta() : labelValidate.removeCta());
    labelValidate.setIcon("plus-circle");
    labelValidate.onClick(() => {
      options2.edgeLabels.push(labelInput.getValue());
      buildLabelsContainer();
      labelInput.setValue("");
      labelValidate.removeCta();
    });
  }
  getOptionsStr() {
    return "";
  }
  validateOptions() {
    var _a;
    let error = false;
    if (!((_a = this.field.options.canvasPath) == null ? void 0 : _a.endsWith(".canvas"))) {
      error = true;
      FieldSettingsModal.setValidationError(this.canvasPathInput, "This is not a canvas file");
    }
    return !error;
  }
};

// src/fields/fieldManagers/CanvasGroupField.ts
var import_obsidian35 = require("obsidian");
var CanvasGroupField = class extends FieldManager2 {
  constructor(plugin, field) {
    super(plugin, field, "CanvasGroup" /* CanvasGroup */);
  }
  addFieldOption(name, value, file, location) {
  }
  createAndOpenFieldModal(file, selectedFieldName, value, lineNumber, after, asList, asComment) {
    return __async(this, null, function* () {
      yield postValues(this.plugin, [{ name: this.field.name, payload: { value: "" } }], file, lineNumber, after, asList, asComment);
    });
  }
  createDvField(dv, p, fieldContainer, attrs) {
    const fieldValue = dv.el("span", p[this.field.name], attrs);
    fieldContainer.appendChild(fieldValue);
  }
  createSettingContainer(container, plugin, location) {
    const options2 = this.field.options;
    const standardColors = ["1", "2", "3", "4", "5", "6"];
    const canvasPathContainer = container.createDiv({ cls: "field-container" });
    canvasPathContainer.createDiv({ text: `Path of the canvas`, cls: "label" });
    const canvasPathInput = new import_obsidian35.TextComponent(canvasPathContainer);
    canvasPathInput.inputEl.addClass("full-width");
    canvasPathInput.inputEl.addClass("with-label");
    new FileSuggest(canvasPathInput.inputEl, plugin, "/", "canvas");
    const canvasPath = options2.canvasPath;
    canvasPathInput.setValue(canvasPath || "");
    canvasPathInput.setPlaceholder("Path/of/the/file.canvas");
    canvasPathInput.onChange((value) => {
      FieldSettingsModal.removeValidationError(canvasPathInput);
      options2.canvasPath = value;
    });
    this.canvasPathInput = canvasPathInput;
    const groupColorsContainer = container.createDiv({ cls: "field-container colors" });
    const buildColorsContainer = (container2, colorList, label) => {
      container2.replaceChildren(...[]);
      container2.createEl("span", { text: label, cls: "label" });
      container2.createDiv({ cls: "spacer" });
      const toggleStandardColorButton = (container3, color) => {
        if (colorList.includes(color)) {
          container3.addClass("active");
          (0, import_obsidian35.setIcon)(container3, "cross");
        } else {
          container3.removeClass("active");
          (0, import_obsidian35.setIcon)(container3, "plus");
        }
        ;
      };
      standardColors.forEach((color) => {
        const colorContainer = container2.createDiv({ cls: `node-color color-${color}` });
        toggleStandardColorButton(colorContainer, color);
        colorContainer.onmouseover = () => {
          colorContainer.setAttr("style", `color: white`);
        };
        colorContainer.onmouseout = () => {
          colorContainer.removeAttribute("style");
        };
        colorContainer.onclick = () => {
          const colors = colorList;
          if (colors.includes(color)) {
            colors.remove(color);
          } else {
            colors.push(color);
          }
          ;
          toggleStandardColorButton(colorContainer, color);
        };
      });
      const toggleAltColors = () => {
        const altGroupColors = colorList && colorList.filter((color) => !standardColors.includes(color)) || [];
        altGroupColors.forEach((color) => {
          const colorContainer = container2.createDiv({ cls: `node-color` });
          colorContainer.setAttr("style", `background-color: ${color}; color: ${color}`);
          colorContainer.onmouseover = () => {
            colorContainer.setAttr("style", `background-color: ${color}; color: white`);
          };
          colorContainer.onmouseout = () => {
            colorContainer.setAttr("style", `background-color: ${color}; color: ${color}`);
          };
          (0, import_obsidian35.setIcon)(colorContainer, "cross");
          colorContainer.onclick = () => {
            colorList.remove(color);
            container2.removeChild(colorContainer);
          };
        });
      };
      toggleAltColors();
      const altColorPickerContainer = container2.createDiv({ cls: `node-color picker` });
      const altColorPicker = new import_obsidian35.ColorComponent(altColorPickerContainer);
      altColorPicker.onChange((value) => {
        colorList.push(value);
        buildColorsContainer(container2, colorList, label);
      });
    };
    options2.groupColors = options2.groupColors || [];
    buildColorsContainer(groupColorsContainer, options2.groupColors, "Groups matching colors:");
    options2.groupLabels = options2.groupLabels || [];
    const groupLabelsContainer = container.createDiv({ cls: "field-container labels" });
    const buildLabelsContainer = () => {
      groupLabelsContainer.replaceChildren(...[]);
      groupLabelsContainer.createDiv({ cls: "label", text: "Groups matching labels: " });
      options2.groupLabels.forEach((label) => {
        const labelContainer = groupLabelsContainer.createDiv({ cls: "item chip", text: label });
        new import_obsidian35.ButtonComponent(labelContainer).setIcon("x-circle").setClass("item-remove").onClick(() => {
          options2.groupLabels.remove(label);
          groupLabelsContainer.removeChild(labelContainer);
        });
      });
    };
    buildLabelsContainer();
    const newLabelContainer = container.createDiv({ cls: "field-container" });
    newLabelContainer.createDiv({ cls: "label", text: "Add a new matching label" });
    newLabelContainer.createDiv({ cls: "spacer" });
    const labelInput = new import_obsidian35.TextComponent(newLabelContainer);
    const labelValidate = new import_obsidian35.ButtonComponent(newLabelContainer);
    labelInput.onChange((value) => value ? labelValidate.setCta() : labelValidate.removeCta());
    labelValidate.setIcon("plus-circle");
    labelValidate.onClick(() => {
      options2.groupLabels.push(labelInput.getValue());
      buildLabelsContainer();
      labelInput.setValue("");
      labelValidate.removeCta();
    });
  }
  getOptionsStr() {
    return "";
  }
  validateOptions() {
    var _a;
    let error = false;
    if (!((_a = this.field.options.canvasPath) == null ? void 0 : _a.endsWith(".canvas"))) {
      error = true;
      FieldSettingsModal.setValidationError(this.canvasPathInput, "This is not a canvas file");
    }
    return !error;
  }
};

// src/fields/fieldManagers/Managers.ts
var Managers = {
  Input: InputField,
  Boolean: BooleanField,
  Number: NumberField,
  Select: SelectField,
  Cycle: CycleField,
  Multi: MultiField,
  File: FileField,
  Date: DateField,
  MultiFile: MultiFileField,
  Lookup: LookupField,
  Formula: FormulaField,
  Canvas: CanvasField,
  CanvasGroup: CanvasGroupField
};
var Managers_default = Managers;

// src/types/fieldTypes.ts
var FieldTypeLabelMapping = {
  "Input": "Input" /* Input */,
  "Select": "Select" /* Select */,
  "Multi": "Multi" /* Multi */,
  "Cycle": "Cycle" /* Cycle */,
  "Boolean": "Boolean" /* Boolean */,
  "Number": "Number" /* Number */,
  "File": "File" /* File */,
  "MultiFile": "MultiFile" /* MultiFile */,
  "Date": "Date" /* Date */,
  "Lookup": "Lookup" /* Lookup */,
  "Formula": "Formula" /* Formula */,
  "Canvas": "Canvas" /* Canvas */,
  "CanvasGroup": "CanvasGroup" /* CanvasGroup */
};
var FieldTypeTagClass = {
  "Input": "single",
  "Select": "select",
  "Multi": "multi",
  "Cycle": "cycle",
  "Boolean": "boolean",
  "Number": "number",
  "File": "file",
  "MultiFile": "file",
  "Date": "date",
  "Lookup": "lookup",
  "Formula": "formula",
  "Canvas": "canvas-links",
  "CanvasGroup": "canvas-links"
};
var FieldTypeTooltip = {
  "Input": "Accept any value",
  "Select": "Accept a single value from a list",
  "Multi": "Accept multiple values from a list",
  "Cycle": "Cycle through values from a list",
  "Boolean": "Accept true of false",
  "Number": "Accept a number",
  "File": "Accept a link",
  "MultiFile": "Accept multiple links",
  "Date": "Accept a date",
  "Lookup": "Accept a lookup query",
  "Formula": "Accept a formula",
  "Canvas": "Updates with links in canvas",
  "CanvasGroup": "Updates with groups in canvas"
};
var FieldManager = {
  "Input": Managers_default.Input,
  "Select": Managers_default.Select,
  "Multi": Managers_default.Multi,
  "Cycle": Managers_default.Cycle,
  "Boolean": Managers_default.Boolean,
  "Number": Managers_default.Number,
  "File": Managers_default.File,
  "MultiFile": Managers_default.MultiFile,
  "Date": Managers_default.Date,
  "Lookup": Managers_default.Lookup,
  "Formula": Managers_default.Formula,
  "Canvas": Managers_default.Canvas,
  "CanvasGroup": Managers_default.CanvasGroup
};
var FieldIcon = {
  "Input": "pencil",
  "Select": "right-triangle",
  "Multi": "bullet-list",
  "Cycle": "switch",
  "Boolean": "checkmark",
  "Number": "plus-minus-glyph",
  "File": "link",
  "MultiFile": "link",
  "Date": "calendar-with-checkmark",
  "Lookup": "file-search",
  "Formula": "function-square",
  "Canvas": "layout-dashboard",
  "CanvasGroup": "box-select"
};
var FieldBackgroundColorClass = {
  "Input": "single",
  "Select": "select",
  "Multi": "multi",
  "Cycle": "cycle",
  "Boolean": "boolean",
  "Number": "number",
  "File": "file",
  "MultiFile": "file",
  "Date": "date",
  "Lookup": "lookup",
  "Formula": "lookup",
  "Canvas": "file",
  "CanvasGroup": "file"
};
var multiTypes = [
  "Multi" /* Multi */,
  "MultiFile" /* MultiFile */,
  "Canvas" /* Canvas */,
  "CanvasGroup" /* CanvasGroup */
];

// src/fileClass/FileClassAttributeModal.ts
var FileClassAttributeModal = class extends import_obsidian36.Modal {
  constructor(plugin, fileClass, attr) {
    super(plugin.app);
    this.plugin = plugin;
    this.fileClass = fileClass;
    this.attr = attr;
    this.initialField = new Field_default();
    if (this.attr) {
      this.field = attr.getField();
      Field_default.copyProperty(this.initialField, this.field);
    } else {
      this.field = new Field_default();
    }
    this.fieldManager = new FieldManager[this.field.type](this.plugin, this.field);
    this.addCommand = this.field.command !== void 0;
    this.command = this.field.command || {
      id: this.field ? `insert__${this.field.fileClassName || "presetField"}__${this.field.name}` : "",
      icon: "list-plus",
      label: this.field ? `Insert ${this.field.name} field` : "",
      hotkey: void 0
    };
  }
  onOpen() {
    this.containerEl.addClass("metadata-menu");
    this.titleEl.setText(this.attr ? `Manage ${this.attr.name}` : `Create a new attribute for ${this.fileClass.name}`);
    this.buildNameInputContainer();
    this.buildHeader();
    this.contentEl.createEl("hr");
    this.buildCommandContainer();
    const typeSelectContainer = this.contentEl.createDiv({ cls: "field-container" });
    this.contentEl.createEl("hr");
    this.fieldOptionsContainer = this.contentEl.createDiv();
    const footer = this.contentEl.createDiv({ cls: "footer-actions" });
    footer.createDiv({ cls: "spacer" });
    this.createSaveBtn(footer);
    if (this.attr)
      this.createRemovelBtn(footer);
    this.createCancelBtn(footer);
    this.buildTypeSelectContainer(typeSelectContainer);
    this.fieldManager.createSettingContainer(this.fieldOptionsContainer, this.plugin, 1 /* FileClassAttributeSettings */);
  }
  buildNameInputContainer() {
    const container = this.contentEl.createDiv({ cls: "field-container" });
    container.createDiv({ cls: "label", text: "Field Name: " });
    const input = new import_obsidian36.TextComponent(container);
    input.inputEl.addClass("with-label");
    input.inputEl.addClass("full-width");
    this.attr ? input.setValue(this.field.name) : input.setPlaceholder("Name of the field");
    input.inputEl.focus();
    input.onChange((value) => {
      this.field.name = value;
      this.command.id = `insert__${this.field.fileClassName || "presetField"}__${value}`;
      this.command.label = `Insert ${value} field`;
      this.attrName.setText(`<${value}>`);
      FieldSettingsModal.removeValidationError(input);
    });
    this.nameInput = input;
  }
  buildCommandContainer() {
    const commandContainer = this.contentEl.createDiv({ cls: "field-container" });
    commandContainer.createDiv({ text: "set a command for this field?", cls: "label" });
    commandContainer.createDiv({ cls: "spacer" });
    const addCommandToggler = new import_obsidian36.ToggleComponent(commandContainer);
    addCommandToggler.setValue(this.addCommand);
    const iconContainer = this.contentEl.createDiv({ cls: "field-container" });
    this.addCommand ? iconContainer.show() : iconContainer.hide();
    iconContainer.createDiv({ text: "Icon name", cls: "label" });
    this.iconName = new import_obsidian36.TextComponent(iconContainer);
    this.iconName.inputEl.addClass("full-width");
    this.iconName.inputEl.addClass("with-label");
    const iconPreview = iconContainer.createDiv({ cls: "icon-preview" });
    this.iconName.setValue(this.command.icon);
    (0, import_obsidian36.setIcon)(iconPreview, this.command.icon);
    this.iconName.onChange((value) => {
      this.command.icon = value;
      (0, import_obsidian36.setIcon)(iconPreview, value);
    });
    addCommandToggler.onChange((value) => {
      this.addCommand = value;
      this.addCommand ? iconContainer.show() : iconContainer.hide();
    });
  }
  buildHeader() {
    const container = this.contentEl.createDiv({ cls: "field-container" });
    const typeSelectHeader = container.createDiv();
    const attrLine = typeSelectHeader.createEl("div");
    this.attrName = attrLine.createEl("strong");
    this.attrName.setText(`<${this.field.name}>`);
    attrLine.append(` available in files with ${this.plugin.settings.fileClassAlias} = ${this.fileClass.name}`);
  }
  buildTypeSelectContainer(container) {
    const typeSelectorContainerLabel = container.createDiv({ cls: "label" });
    typeSelectorContainerLabel.setText(`Field type:`);
    container.createDiv({ cls: "spacer" });
    const typeSelect = new import_obsidian36.DropdownComponent(container);
    Object.keys(FieldTypeTooltip).forEach((key) => typeSelect.addOption(key, FieldTypeTooltip[key]));
    if (this.field.type) {
      typeSelect.setValue(this.field.type);
    }
    typeSelect.onChange((typeLabel) => {
      this.field = new Field_default();
      Field_default.copyProperty(this.field, this.initialField);
      this.field.name = this.nameInput.getValue();
      this.field.type = FieldTypeLabelMapping[typeLabel];
      if (this.field.type !== this.initialField.type && ![this.field.type, this.initialField.type].every((fieldType) => ["Multi" /* Multi */, "Select" /* Select */, "Cycle" /* Cycle */].includes(fieldType))) {
        this.field.options = {};
      }
      while (this.fieldOptionsContainer.firstChild) {
        this.fieldOptionsContainer.removeChild(this.fieldOptionsContainer.firstChild);
      }
      this.fieldManager = new FieldManager[this.field.type](this.plugin, this.field);
      this.fieldManager.createSettingContainer(this.fieldOptionsContainer, this.plugin, 1 /* FileClassAttributeSettings */);
    });
  }
  validateFields() {
    return this.fieldManager.validateName(this.nameInput, this.contentEl) && this.fieldManager.validateOptions();
  }
  createSaveBtn(container) {
    const saveButton = new import_obsidian36.ButtonComponent(container);
    saveButton.setTooltip("Save");
    saveButton.setIcon("checkmark");
    saveButton.onClick(() => __async(this, null, function* () {
      let error = !this.validateFields();
      if (error) {
        new import_obsidian36.Notice("Fix errors before saving.");
        return;
      }
      ;
      if (this.addCommand) {
        this.field.command = this.command;
      } else {
        delete this.field.command;
      }
      yield this.fileClass.updateAttribute(this.field.type, this.field.name, this.field.options, this.attr, this.field.command);
      this.close();
    }));
  }
  createRemovelBtn(container) {
    const removeButton = new import_obsidian36.ButtonComponent(container);
    removeButton.setIcon("trash");
    removeButton.onClick(() => {
      var _a;
      const confirmModal = new import_obsidian36.Modal(this.plugin.app);
      confirmModal.containerEl.addClass("metadata-menu");
      confirmModal.titleEl.setText("Please confirm");
      confirmModal.contentEl.createDiv().setText(`Do you really want to remove ${(_a = this.attr) == null ? void 0 : _a.name} attribute from ${this.fileClass.name}?`);
      const confirmFooter = confirmModal.contentEl.createDiv({ cls: "footer-actions" });
      confirmFooter.createDiv({ cls: "spacer" });
      const confirmButton = new import_obsidian36.ButtonComponent(confirmFooter);
      confirmButton.setWarning();
      confirmButton.setIcon("checkmark");
      confirmButton.onClick(() => {
        if (this.attr)
          this.fileClass.removeAttribute(this.attr);
        confirmModal.close();
        this.close();
      });
      const dismissButton = new import_obsidian36.ButtonComponent(confirmFooter);
      dismissButton.setIcon("cross");
      dismissButton.onClick(() => this.close());
      confirmModal.open();
    });
  }
  createCancelBtn(container) {
    const cancelButton = new import_obsidian36.ButtonComponent(container);
    cancelButton.setIcon("cross");
    cancelButton.onClick(() => this.close());
  }
};

// src/modals/chooseSectionModal.ts
var import_obsidian37 = require("obsidian");
var chooseSectionModal = class extends import_obsidian37.SuggestModal {
  constructor(plugin, file, onSelect) {
    super(plugin.app);
    this.plugin = plugin;
    this.file = file;
    this.onSelect = onSelect;
    this.addAsListItem = false;
    this.addAsComment = false;
    this.addAtEndOfFrontMatter = false;
    this.onSelect = onSelect;
    this.containerEl.addClass("metadata-menu");
    this.resultContainerEl.addClass("sections");
  }
  onOpen() {
    super.onOpen();
    const inputContainer = this.containerEl.createDiv({ cls: "suggester-input" });
    inputContainer.appendChild(this.inputEl);
    this.containerEl.find(".prompt").prepend(inputContainer);
    const addAsListItemBtn = new import_obsidian37.ButtonComponent(inputContainer);
    addAsListItemBtn.setIcon("list");
    addAsListItemBtn.onClick(() => {
      if (this.addAsListItem) {
        addAsListItemBtn.removeCta();
        this.addAsListItem = false;
      } else {
        addAsListItemBtn.setCta();
        this.addAsListItem = true;
      }
    });
    addAsListItemBtn.setDisabled(this.addAtEndOfFrontMatter);
    addAsListItemBtn.setTooltip("Add this field as a list item");
    const addAsCommentItemBtn = new import_obsidian37.ButtonComponent(inputContainer);
    addAsCommentItemBtn.setIcon("message-square");
    addAsCommentItemBtn.onClick(() => {
      if (this.addAsComment) {
        addAsCommentItemBtn.removeCta();
        this.addAsComment = false;
      } else {
        addAsCommentItemBtn.setCta();
        this.addAsComment = true;
      }
    });
    addAsCommentItemBtn.setDisabled(this.addAtEndOfFrontMatter);
    addAsCommentItemBtn.setTooltip("Add this field as a comment item");
    const addAtEndOfFrontMatterBtn = new import_obsidian37.ButtonComponent(inputContainer);
    addAtEndOfFrontMatterBtn.setIcon("list-end");
    addAtEndOfFrontMatterBtn.onClick(() => {
      this.onSelect(-1, false, false, false);
      this.close();
    });
    addAtEndOfFrontMatterBtn.setTooltip("Add this field at the end of the frontmatter");
  }
  getSuggestions(query) {
    return __async(this, null, function* () {
      const content = yield this.plugin.app.vault.read(this.file);
      const suggestions = [{
        lineNumber: -1,
        lineText: "----------Add on top of the file--------"
      }];
      content.split("\n").forEach((lineContent, i) => {
        if (lineContent.toLowerCase().includes(query.toLowerCase())) {
          suggestions.push({
            lineNumber: i,
            lineText: lineContent.substring(0, 57) + (lineContent.length < 57 ? "" : "...")
          });
        }
      });
      return suggestions;
    });
  }
  renderSuggestion(value, el) {
    el.addClass("item");
    const container = el.createDiv({ cls: "line" });
    container.createDiv({ text: `${value.lineNumber + 1}`, cls: "lineNumber" });
    container.createDiv({ text: value.lineText, cls: "lineText" });
  }
  onChooseSuggestion(item, evt) {
    const after = item.lineNumber == -1 ? false : true;
    this.onSelect(item.lineNumber == -1 ? 0 : item.lineNumber, after, this.addAsListItem, this.addAsComment);
  }
};

// src/commands/insertMissingFields.ts
function insertMissingFields(plugin, fileOrFilePath, lineNumber, after = false, asList = false, asComment = false, fileClassName) {
  return __async(this, null, function* () {
    var _a, _b;
    const file = getFileFromFileOrPath(plugin, fileOrFilePath);
    const dvApi = (_a = plugin.app.plugins.plugins.dataview) == null ? void 0 : _a.api;
    if (dvApi) {
      const f = plugin.fieldIndex;
      const tm = plugin.fileTaskManager;
      const fields = f.filesFields.get(file.path);
      const currentFieldsNames = genuineKeys(dvApi.page(file.path));
      const filteredClassFields = fileClassName ? ((_b = plugin.fieldIndex.fileClassesFields.get(fileClassName)) == null ? void 0 : _b.filter((field) => field.fileClassName === fileClassName)) || void 0 : void 0;
      const fieldsToInsert = [];
      fields == null ? void 0 : fields.filter((field) => !currentFieldsNames.includes(field.name)).filter((field) => filteredClassFields ? filteredClassFields.map((f2) => f2.name).includes(field.name) : true).forEach((field) => __async(this, null, function* () {
        fieldsToInsert.push({ name: field.name, payload: { value: "" } });
      }));
      if (fieldsToInsert.length)
        yield postValues(plugin, fieldsToInsert, file, lineNumber, after, asList, asComment);
    }
  });
}

// src/components/fileClassManager.ts
var import_obsidian44 = require("obsidian");

// src/fileClass/fileClassView.ts
var import_obsidian42 = require("obsidian");

// src/fileClass/fileClassFieldsView.ts
var import_obsidian39 = require("obsidian");

// src/commands/removeFileClassAttribute.ts
function removeFileClassAttributeWithName(plugin, fileClass, name) {
  return __async(this, null, function* () {
    const file = fileClass.getClassFile();
    if (file) {
      const content = (yield plugin.app.vault.read(file)).split("\n");
      const newContent = content.map((line, i) => {
        if (!line.startsWith(name))
          return line;
      });
      yield plugin.app.vault.modify(file, newContent.join("\n"));
    }
  });
}

// src/fileClass/fileClassAttribute.ts
var FileClassAttribute = class {
  constructor(origin, name, type = "Input" /* Input */, options2 = [], fileClassName, command) {
    this.origin = origin;
    this.name = name;
    this.type = type;
    this.options = options2;
    this.fileClassName = fileClassName;
    this.command = command;
  }
  getField() {
    var _a;
    let options2 = {};
    if (Array.isArray(this.options)) {
      (_a = this.options) == null ? void 0 : _a.forEach((option, index) => {
        options2[index] = option;
      });
    } else {
      options2 = this.options;
    }
    return new Field_default(this.name, options2, this.name, this.type, this.fileClassName, this.command);
  }
  getOptionsString(plugin) {
    const field = this.getField();
    const manager = new FieldManager[field.type](plugin, field);
    return manager.getOptionsStr();
  }
};

// src/fileClass/fileClass.ts
var import_obsidian38 = require("obsidian");

// src/utils/textUtils.ts
var capitalize = (s) => {
  return s && s[0].toUpperCase() + s.slice(1);
};

// src/fileClass/fileClass.ts
var options = {
  "limit": { name: "limit", toValue: (value) => `${value || ""}` },
  "mapWithTag": { name: "mapWithTag", toValue: (value) => value.toString() },
  "icon": { name: "icon", toValue: (value) => `${value || ""}` },
  "tagNames": { name: "tagNames", toValue: (values) => values.join(", ") },
  "excludes": { name: "excludes", toValue: (values) => values.map((attr) => attr.name).join(", ") },
  "parent": { name: "extends", toValue: (value) => `${(value == null ? void 0 : value.name) || ""}` }
};
var FileClassOptions = class {
  constructor(limit, icon, parent, excludes, tagNames, mapWithTag = false) {
    this.limit = limit;
    this.icon = icon;
    this.parent = parent;
    this.excludes = excludes;
    this.tagNames = tagNames;
    this.mapWithTag = mapWithTag;
  }
};
var AddFileClassToFileModal = class extends import_obsidian38.SuggestModal {
  constructor(plugin, file) {
    super(plugin.app);
    this.plugin = plugin;
    this.file = file;
  }
  getSuggestions(query) {
    return [...this.plugin.fieldIndex.fileClassesName.keys()].filter((fileClassName) => {
      var _a;
      return !((_a = this.plugin.fieldIndex.filesFileClasses.get(this.file.path)) == null ? void 0 : _a.map((fileClass) => fileClass.name).includes(fileClassName));
    }).filter((fileClassName) => fileClassName.toLocaleLowerCase().contains(query.toLowerCase())).sort();
  }
  renderSuggestion(value, el) {
    el.setText(value);
  }
  onChooseSuggestion(item, evt) {
    this.insertFileClassToFile(item);
  }
  insertFileClassToFile(value) {
    return __async(this, null, function* () {
      const fileClassAlias = this.plugin.settings.fileClassAlias;
      const currentFileClasses = this.plugin.fieldIndex.filesFileClasses.get(this.file.path);
      const newValue = currentFileClasses ? [...currentFileClasses.map((fc) => fc.name), value].join(", ") : value;
      yield postValues(this.plugin, [{ name: fileClassAlias, payload: { value: newValue } }], this.file);
    });
  }
};
var FileClassObjects = class {
  constructor(instance) {
    this.instance = instance;
  }
  all() {
    const filesWithFileClassName = this.instance.plugin.app.vault.getMarkdownFiles().filter((file) => {
      const cache = this.instance.plugin.app.metadataCache.getFileCache(file);
      const fileClassAlias = this.instance.plugin.settings.fileClassAlias;
      return (cache == null ? void 0 : cache.frontmatter) && Object.keys(cache.frontmatter).includes(fileClassAlias) && cache.frontmatter[fileClassAlias] == this.instance.name;
    });
    return filesWithFileClassName;
  }
  get(name) {
    const filesWithName = this.all().filter((file) => file.path.replace(/md$/, "").endsWith(name));
    if (filesWithName.length > 1) {
      const error = new Error("More than one value found");
      throw error;
    }
    if (filesWithName.length == 0) {
      const error = new Error("No file value found");
      throw error;
    }
    return filesWithName[0];
  }
  getPath(path) {
    const filesWithName = this.all().filter((file) => file.path == path);
    if (filesWithName.length > 1) {
      const error = new Error("More than one value found");
      throw error;
    }
    if (filesWithName.length == 0) {
      const error = new Error("No file value found");
      throw error;
    }
    return filesWithName[0];
  }
};
var FileClass = class {
  constructor(plugin, name) {
    this.plugin = plugin;
    this.name = name;
    this.objects = new FileClassObjects(this);
    this.attributes = [];
  }
  getFileClassOptions() {
    var _a;
    const {
      extends: _parent,
      limit: _limit,
      excludes: _excludes,
      mapWithTag: _mapWithTag,
      tagNames: _tagNames,
      icon: _icon
    } = ((_a = this.plugin.app.metadataCache.getFileCache(this.getClassFile())) == null ? void 0 : _a.frontmatter) || {};
    const parent = this.plugin.fieldIndex.fileClassesName.get(_parent);
    const excludedNames = FileClass.getExcludedFieldsFromFrontmatter(_excludes);
    const excludes = this.attributes.filter((attr) => excludedNames.includes(attr.name));
    const limit = typeof _limit === "number" ? _limit : this.plugin.settings.tableViewMaxRecords;
    const mapWithTag = FieldManager2.stringToBoolean(_mapWithTag);
    const tagNames = FileClass.getTagNamesFromFrontMatter(_tagNames);
    const icon = typeof _icon === "string" ? _icon : this.plugin.settings.buttonIcon;
    return new FileClassOptions(limit, icon, parent, excludes, tagNames, mapWithTag);
  }
  isMappedWithTag() {
    var _a, _b;
    try {
      const fileClassFile = this.getClassFile();
      const mapWithTag = (_b = (_a = this.plugin.app.metadataCache.getFileCache(fileClassFile)) == null ? void 0 : _a.frontmatter) == null ? void 0 : _b.mapWithTag;
      return !!mapWithTag;
    } catch (error) {
      return false;
    }
  }
  getClassFile() {
    const filesClassPath = this.plugin.settings.classFilesPath;
    const file = this.plugin.app.vault.getAbstractFileByPath(`${filesClassPath}${this.name}.md`);
    if (file instanceof import_obsidian38.TFile && file.extension == "md") {
      return file;
    } else {
      const error = new Error(`no file named <${this.name}.md> in <${filesClassPath}> folder to match <${this.plugin.settings.fileClassAlias}: ${this.name}> in one of these notes`);
      throw error;
    }
  }
  getIcon() {
    const parents = [this.name, ...this.plugin.fieldIndex.fileClassesAncestors.get(this.name) || []];
    let icon;
    parents.some((fileClassName, i) => {
      var _a, _b;
      const fileClass = this.plugin.fieldIndex.fileClassesName.get(fileClassName);
      if (fileClass) {
        const file = fileClass.getClassFile();
        const _icon = (_b = (_a = this.plugin.app.metadataCache.getFileCache(file)) == null ? void 0 : _a.frontmatter) == null ? void 0 : _b.icon;
        if (_icon) {
          icon = _icon;
          return true;
        }
        ;
      }
    });
    return icon;
  }
  static getFileClassAttributes(plugin, fileClass, excludes) {
    var _a;
    const file = fileClass.getClassFile();
    let attributes = [];
    const dvApi = (_a = plugin.app.plugins.plugins["dataview"]) == null ? void 0 : _a.api;
    if (dvApi) {
      const dvFile = dvApi.page(file.path);
      try {
        genuineKeys(dvFile).forEach((key) => {
          if (key !== "file" && !Object.keys(dvFile.file.frontmatter || {}).includes(key)) {
            const item = typeof dvFile[key] !== "string" ? JSON.stringify(dvFile[key]) : dvFile[key];
            try {
              const { type, options: options2, command } = JSON.parse(item);
              const fieldType = FieldTypeLabelMapping[capitalize(type)];
              const attr = new FileClassAttribute(this.name, key, fieldType, options2, fileClass.name, command);
              attributes.push(attr);
            } catch (e) {
            }
          }
        });
      } catch (error) {
        throw error;
      }
    }
    if (excludes) {
      return attributes.filter((attr) => !excludes.includes(attr.name));
    } else {
      return attributes;
    }
  }
  static getExcludedFieldsFromFrontmatter(excludedFields) {
    if (Array.isArray(excludedFields)) {
      return excludedFields;
    } else if (excludedFields) {
      return excludedFields.split(",");
    } else {
      return [];
    }
  }
  static getTagNamesFromFrontMatter(_tagNames) {
    if (Array.isArray(_tagNames)) {
      return _tagNames;
    } else if (_tagNames) {
      return _tagNames.split(",");
    } else {
      return [];
    }
  }
  getAttributes(excludeParents = false) {
    var _a, _b;
    try {
      const file = this.getClassFile();
      const ancestors = this.plugin.fieldIndex.fileClassesAncestors.get(this.name);
      const _excludedFields = (_b = (_a = this.plugin.app.metadataCache.getFileCache(file)) == null ? void 0 : _a.frontmatter) == null ? void 0 : _b.excludes;
      let excludedFields = FileClass.getExcludedFieldsFromFrontmatter(_excludedFields);
      const ancestorsAttributes = /* @__PURE__ */ new Map();
      ancestorsAttributes.set(this.name, FileClass.getFileClassAttributes(this.plugin, this, excludedFields));
      if (!excludeParents) {
        ancestors == null ? void 0 : ancestors.forEach((ancestorName) => {
          var _a2, _b2;
          const ancestorFile = this.plugin.app.vault.getAbstractFileByPath(`${this.plugin.settings.classFilesPath}${ancestorName}.md`);
          const ancestor = new FileClass(this.plugin, ancestorName);
          ancestorsAttributes.set(ancestorName, FileClass.getFileClassAttributes(this.plugin, ancestor, excludedFields));
          if (ancestorFile instanceof import_obsidian38.TFile && ancestorFile.extension === "md") {
            const _excludedFields2 = (_b2 = (_a2 = this.plugin.app.metadataCache.getFileCache(ancestorFile)) == null ? void 0 : _a2.frontmatter) == null ? void 0 : _b2.excludes;
            excludedFields = FileClass.getExcludedFieldsFromFrontmatter(_excludedFields2);
          }
        });
      }
      for (const [fileClassName, fileClassAttributes] of ancestorsAttributes) {
        this.attributes.push(...fileClassAttributes.filter((attr) => !this.attributes.map((_attr) => _attr.name).includes(attr.name)));
      }
    } catch (error) {
      throw error;
    }
  }
  getVersion() {
    var _a, _b;
    const currentVersion = (_b = (_a = this.plugin.app.metadataCache.getFileCache(this.getClassFile())) == null ? void 0 : _a.frontmatter) == null ? void 0 : _b.version;
    return currentVersion && !isNaN(currentVersion) ? currentVersion : 0;
  }
  updateOptions(newOptions) {
    return __async(this, null, function* () {
      const path = this.getClassFile().path;
      const payload = [];
      Object.keys(options).forEach((key) => __async(this, null, function* () {
        const { name, toValue } = options[key];
        payload.push({ name, payload: { value: toValue(newOptions[key]) } });
      }));
      payload.push({ name: "version", payload: { value: `${this.getVersion() + 1}` } });
      yield postValues(this.plugin, payload, path);
    });
  }
  updateAttribute(newType, newName, newOptions, attr, newCommand) {
    return __async(this, null, function* () {
      const fileClass = attr ? this.plugin.fieldIndex.fileClassesName.get(attr.fileClassName) : this;
      const file = fileClass.getClassFile();
      let result = yield this.plugin.app.vault.read(file);
      if (attr) {
        let newContent = [];
        result.split("\n").forEach((line) => {
          if (line.startsWith(attr.name)) {
            let settings = {};
            settings["type"] = newType;
            if (newOptions)
              settings["options"] = newOptions;
            if (newCommand)
              settings["command"] = newCommand;
            newContent.push(`${newName}:: ${JSON.stringify(settings)}`);
          } else {
            newContent.push(line);
          }
        });
        yield this.plugin.app.vault.modify(file, newContent.join("\n"));
      } else {
        let settings = {};
        settings["type"] = newType;
        if (newOptions)
          settings["options"] = newOptions;
        if (newCommand)
          settings["command"] = newCommand;
        result += `
${newName}:: ${JSON.stringify(settings)}`;
        yield this.plugin.app.vault.modify(file, result);
      }
    });
  }
  removeAttribute(attr) {
    return __async(this, null, function* () {
      const file = this.getClassFile();
      const result = yield this.plugin.app.vault.read(file);
      let newContent = [];
      result.split("\n").forEach((line) => {
        if (!line.startsWith(attr.name)) {
          newContent.push(line);
        }
      });
      yield this.plugin.app.vault.modify(file, newContent.join("\n"));
    });
  }
  static createFileClass(plugin, name, excludeParent = false) {
    const fileClass = new FileClass(plugin, name);
    fileClass.getAttributes();
    return fileClass;
  }
  static getFileClassNameFromPath(plugin, path) {
    var _a, _b;
    const fileClassNameRegex = new RegExp(`${plugin.settings.classFilesPath}(?<fileClassName>.*).md`);
    return (_b = (_a = path.match(fileClassNameRegex)) == null ? void 0 : _a.groups) == null ? void 0 : _b.fileClassName;
  }
};

// src/fileClass/fileClassFieldsView.ts
var FileClassFieldSetting = class {
  constructor(container, fileClass, fileClassAttribute, plugin) {
    this.container = container;
    this.fileClass = fileClass;
    this.fileClassAttribute = fileClassAttribute;
    this.plugin = plugin;
    this.buildSetting();
  }
  buildSetting() {
    const fieldNameContainer = this.container.createDiv({ cls: "cell" });
    fieldNameContainer.createEl("span", { text: this.fileClassAttribute.name, cls: "title" });
    const typeContainer = this.container.createDiv({ cls: "cell" });
    const chip = typeContainer.createDiv({ cls: `chip ${FieldTypeTagClass[this.fileClassAttribute.type]}` });
    chip.setText(this.fileClassAttribute.type);
    const fieldOptionsContainer = this.container.createDiv({ cls: "cell" });
    fieldOptionsContainer.createEl("span", { cls: "description", text: `${this.fileClassAttribute.getOptionsString(this.plugin)}` });
    this.addEditButton(this.container);
    this.addDeleteButton(this.container);
  }
  addEditButton(container) {
    const btn = new import_obsidian39.ButtonComponent(container);
    btn.setIcon("pencil");
    btn.setTooltip("Edit");
    btn.setClass("cell");
    btn.onClick(() => {
      let modal = new FileClassAttributeModal(this.plugin, this.fileClass, this.fileClassAttribute);
      modal.open();
    });
  }
  addDeleteButton(container) {
    const btn = new import_obsidian39.ButtonComponent(container);
    btn.setIcon("trash");
    btn.setTooltip("Delete");
    btn.setClass("cell");
    btn.onClick(() => {
      removeFileClassAttributeWithName(this.plugin, this.fileClass, this.fileClassAttribute.name);
    });
  }
};
var FileClassFieldsView = class {
  constructor(plugin, viewContainer, fileClass) {
    this.viewContainer = viewContainer;
    this.fileClass = fileClass;
    this.plugin = plugin;
    this.container = this.viewContainer.createDiv({ cls: "fv-settings" });
    this.buildSettings();
  }
  builAddBtn() {
    const footer = this.container.createDiv({ cls: "footer" });
    const btnContainer = footer.createDiv({ cls: "cell" });
    const addBtn = btnContainer.createEl("button");
    (0, import_obsidian39.setIcon)(addBtn, "list-plus");
    addBtn.onclick = () => __async(this, null, function* () {
      const fileClassAttributeModal = new FileClassAttributeModal(this.plugin, FileClass.createFileClass(this.plugin, this.fileClass.name));
      fileClassAttributeModal.open();
    });
  }
  buildSettings() {
    this.container.replaceChildren();
    const attributes = FileClass.getFileClassAttributes(this.plugin, this.fileClass);
    attributes.forEach((attribute) => {
      const settingContainer = this.container.createDiv({ cls: "setting" });
      new FileClassFieldSetting(settingContainer, this.fileClass, attribute, this.plugin);
    });
    this.builAddBtn();
  }
};

// src/fileClass/fileClassSettingsView.ts
var import_obsidian40 = require("obsidian");
var ParentSuggestModal = class extends import_obsidian40.SuggestModal {
  constructor(view) {
    super(view.plugin.app);
    this.view = view;
  }
  getSuggestions(query) {
    const fileClassesNames = [...this.view.plugin.fieldIndex.fileClassesName.keys()];
    const currentName = this.view.fileClass.name;
    return fileClassesNames.sort().filter((name) => name !== currentName && name.toLowerCase().includes(query.toLowerCase()));
  }
  onChooseSuggestion(item, evt) {
    const options2 = this.view.fileClass.getFileClassOptions();
    const parent = this.view.plugin.fieldIndex.fileClassesName.get(item);
    if (parent) {
      options2.parent = parent;
      this.view.fileClass.updateOptions(options2);
    }
  }
  renderSuggestion(value, el) {
    el.setText(value);
  }
};
var TagSuggestModal = class extends import_obsidian40.SuggestModal {
  constructor(view) {
    super(view.plugin.app);
    this.view = view;
  }
  getSuggestions(query) {
    const tags = Object.keys(this.view.plugin.app.metadataCache.getTags());
    return tags.filter((t) => t.toLowerCase().includes(query.toLowerCase()));
  }
  onChooseSuggestion(item, evt) {
    const options2 = this.view.fileClass.getFileClassOptions();
    const tagNames = options2.tagNames || [];
    tagNames.push(item.replace(/^#(.*)/, "$1"));
    options2.tagNames = tagNames;
    this.view.fileClass.updateOptions(options2);
  }
  renderSuggestion(value, el) {
    el.setText(value);
  }
};
var FieldSuggestModal = class extends import_obsidian40.SuggestModal {
  constructor(view) {
    super(view.plugin.app);
    this.view = view;
  }
  getSuggestions(query) {
    const fileClassName = this.view.fileClass.name;
    const fileClassFields = this.view.plugin.fieldIndex.fileClassesFields.get(fileClassName) || [];
    const excludedFields = this.view.fileClass.getFileClassOptions().excludes;
    return fileClassFields.filter((fCA) => {
      var _a;
      return fCA.fileClassName !== fileClassName && ((_a = fCA.fileClassName) == null ? void 0 : _a.toLowerCase().includes(query.toLowerCase())) && !(excludedFields == null ? void 0 : excludedFields.map((attr) => attr.name).includes(fCA.name));
    }).map((fCA) => fCA.name);
  }
  onChooseSuggestion(item, evt) {
    const options2 = this.view.fileClass.getFileClassOptions();
    const excludedFields = options2.excludes || [];
    const excludedField = this.view.fileClass.attributes.find((field) => field.name === item);
    if (excludedField) {
      excludedFields.push(excludedField);
      options2.excludes = excludedFields;
      this.view.fileClass.updateOptions(options2);
    }
  }
  renderSuggestion(value, el) {
    el.setText(value);
  }
};
var FileClassSetting = class {
  constructor(container, label, toolTipText, buildOptionAndAction) {
    this.container = container;
    this.label = label;
    this.toolTipText = toolTipText;
    this.buildOptionAndAction = buildOptionAndAction;
    this.buildSetting();
  }
  buildSetting() {
    const labelContainer = this.container.createDiv({ cls: "cell" });
    labelContainer.createDiv({ text: this.label, cls: "label" });
    const actionContainer = this.container.createDiv({ cls: "cell" });
    const action = actionContainer.createDiv({ cls: "action" });
    const toolTipBtnContainer = this.container.createDiv({ cls: "cell" });
    const tooltipBtn = new import_obsidian40.ButtonComponent(toolTipBtnContainer).setIcon("help-circle").setClass("tooltip-button");
    const toolTipContainer = this.container.createDiv({ cls: "cell" });
    const tooltip = toolTipContainer.createDiv({ cls: "tooltip-text" });
    tooltip.innerHTML = this.toolTipText;
    tooltip.hide();
    tooltipBtn.buttonEl.onmouseover = () => tooltip.show();
    tooltipBtn.buttonEl.onmouseout = () => tooltip.hide();
    this.buildOptionAndAction(action);
  }
};
var FileClassSettingsView = class {
  constructor(plugin, viewContainer, fileClass) {
    this.viewContainer = viewContainer;
    this.fileClass = fileClass;
    this.plugin = plugin;
    this.container = this.viewContainer.createDiv({ cls: "fv-settings" });
    this.buildSettings();
  }
  buildSettings() {
    this.fileClassOptions = this.fileClass.getFileClassOptions();
    this.container.replaceChildren();
    const limitContainer = this.container.createDiv({ cls: "setting" });
    const iconContainer = this.container.createDiv({ cls: "setting" });
    const mapWithTagContainer = this.container.createDiv({ cls: "setting" });
    const tagNamesComponent = this.container.createDiv({ cls: "setting" });
    const extendsComponent = this.container.createDiv({ cls: "setting" });
    const excludesComponent = this.container.createDiv({ cls: "setting" });
    new FileClassSetting(limitContainer, "Max records per page", "Maximum lines displayed per page in the table view", (action) => this.buildLimitComponent(action));
    new FileClassSetting(mapWithTagContainer, "Map with tag", `Bind tags with ${this.plugin.settings.fileClassAlias}<br/>If Tag Names are empty this fileClass will be bound with the tag of same name`, (action) => this.buildMapWithTagComponent(action));
    new FileClassSetting(iconContainer, "Button Icon", "Name of the icon for the metadata menu button<br/>(lucide.dev)", (action) => this.buildIconComponent(action));
    new FileClassSetting(tagNamesComponent, "Tag Names", `Names of tags to bind this ${this.plugin.settings.fileClassAlias} with`, (action) => this.buildTagNamesComponent(action));
    new FileClassSetting(extendsComponent, "Parent Fileclass", "Choose a fileClass to inherit fields from", (action) => this.buildExtendComponent(action));
    new FileClassSetting(excludesComponent, "Excluded Fields", `Names of fields to exclude from ancestor fileclasses`, (action) => this.buildExcludesComponent(action));
    this.buildSaveBtn();
    this.saveBtn.removeClass("active");
  }
  buildSaveBtn() {
    const footer = this.container.createDiv({ cls: "footer" });
    const btnContainer = footer.createDiv({ cls: "cell" });
    this.saveBtn = btnContainer.createEl("button");
    (0, import_obsidian40.setIcon)(this.saveBtn, "save");
    this.saveBtn.onclick = () => __async(this, null, function* () {
      yield this.fileClass.updateOptions(this.fileClassOptions);
    });
  }
  buildLimitComponent(action) {
    const input = new import_obsidian40.TextComponent(action);
    input.setValue(`${this.fileClassOptions.limit}`);
    input.onChange((value) => {
      this.saveBtn.addClass("active");
      this.fileClassOptions.limit = parseInt(value) || this.fileClassOptions.limit;
    });
  }
  buildMapWithTagComponent(action) {
    const toggler = new import_obsidian40.ToggleComponent(action);
    toggler.setValue(this.fileClassOptions.mapWithTag);
    toggler.onChange((value) => {
      this.saveBtn.addClass("active");
      this.fileClassOptions.mapWithTag = value;
    });
  }
  buildIconComponent(action) {
    const iconManagerContainer = action.createDiv({ cls: "icon-manager" });
    const input = new import_obsidian40.TextComponent(iconManagerContainer);
    const iconContainer = iconManagerContainer.createDiv({});
    input.setValue(this.fileClassOptions.icon);
    (0, import_obsidian40.setIcon)(iconContainer, this.fileClassOptions.icon);
    input.onChange((value) => {
      this.saveBtn.addClass("active");
      this.fileClassOptions.icon = value;
      (0, import_obsidian40.setIcon)(iconContainer, this.fileClassOptions.icon);
    });
  }
  buildTagNamesComponent(action) {
    var _a;
    const tagsContainer = action.createDiv({ cls: "items" });
    (_a = this.fileClassOptions.tagNames) == null ? void 0 : _a.forEach((tagName) => {
      const tagContainer = tagsContainer.createDiv({ cls: "item chip", text: tagName });
      new import_obsidian40.ButtonComponent(tagContainer).setIcon("x-circle").setClass("item-remove").onClick(() => __async(this, null, function* () {
        var _a2;
        (_a2 = this.fileClassOptions.tagNames) == null ? void 0 : _a2.remove(tagName);
        yield this.fileClass.updateOptions(this.fileClassOptions);
      }));
    });
    const tagAddBtn = tagsContainer.createEl("button", { cls: "item add" });
    (0, import_obsidian40.setIcon)(tagAddBtn, "plus-circle");
    tagAddBtn.onclick = () => {
      new TagSuggestModal(this).open();
    };
  }
  buildExcludesComponent(action) {
    var _a;
    const fieldsContainer = action.createDiv({ cls: "items" });
    (_a = this.fileClassOptions.excludes) == null ? void 0 : _a.forEach((field) => {
      const fieldontainer = fieldsContainer.createDiv({ cls: "item chip", text: field.name });
      new import_obsidian40.ButtonComponent(fieldontainer).setIcon("x-circle").setClass("item-remove").onClick(() => __async(this, null, function* () {
        var _a2;
        const excludedFields = (_a2 = this.fileClassOptions.excludes) == null ? void 0 : _a2.filter((attr) => attr.name !== field.name);
        this.fileClassOptions.excludes = excludedFields;
        yield this.fileClass.updateOptions(this.fileClassOptions);
      }));
    });
    const fieldAddBtn = fieldsContainer.createEl("button", { cls: "item" });
    (0, import_obsidian40.setIcon)(fieldAddBtn, "plus-circle");
    fieldAddBtn.onclick = () => {
      new FieldSuggestModal(this).open();
    };
  }
  buildExtendComponent(action) {
    var _a;
    const parentManagerContainer = action.createDiv({ cls: "items" });
    const parentLinkContainer = parentManagerContainer.createDiv({ cls: "item" });
    const parent = this.fileClassOptions.parent;
    if (parent) {
      const path = this.fileClass.getClassFile().path;
      const component = this.plugin;
      import_obsidian40.MarkdownRenderer.renderMarkdown(`[[${parent.name}]]`, parentLinkContainer, path, component);
      (_a = parentLinkContainer.querySelector("a.internal-link")) == null ? void 0 : _a.addEventListener("click", (e) => {
        var _a2;
        this.plugin.app.workspace.openLinkText((_a2 = e.target.getAttr("data-href").split("/").last()) == null ? void 0 : _a2.replace(/(.*).md/, "$1"), path, "tab");
      });
    }
    parentManagerContainer.createDiv({ cls: "item spacer" });
    if (parent) {
      const parentRemoveBtn = parentManagerContainer.createEl("button", { cls: "item" });
      (0, import_obsidian40.setIcon)(parentRemoveBtn, "trash");
      parentRemoveBtn.onclick = () => __async(this, null, function* () {
        delete this.fileClassOptions.parent;
        yield this.fileClass.updateOptions(this.fileClassOptions);
      });
    }
    const parentChangeBtn = parentManagerContainer.createEl("button", { cls: "item right-align" });
    (0, import_obsidian40.setIcon)(parentChangeBtn, "edit");
    parentChangeBtn.onclick = () => {
      new ParentSuggestModal(this).open();
    };
  }
};

// src/fileClass/fileClassTableView.ts
var import_obsidian41 = require("obsidian");
var oppositeDirection = {
  "asc": "desc",
  "desc": "asc"
};
var FileClassTableView = class {
  constructor(plugin, component, viewContainer, fileClass) {
    this.component = component;
    this.viewContainer = viewContainer;
    this.fileClass = fileClass;
    this.filters = {};
    this.sorters = {};
    this.sliceStart = 0;
    this.plugin = plugin;
    this.container = this.viewContainer.createDiv({ cls: "fv-table" });
    this.limit = this.fileClass.getFileClassOptions().limit;
    this.createHeader();
  }
  createHeader() {
    const header = this.container.createDiv({ cls: "options" });
    const limitContainer = header.createDiv({ cls: "options-container" });
    const paginationContainer = header.createDiv({ cls: "options-container table" });
    const fieldsContainer = header.createDiv({ cls: "options-container table" });
    const applyContainer = header.createDiv({ cls: "options-container" });
    this.buildLimitManager(limitContainer);
    this.buildPaginationManager(paginationContainer);
    this.buildFiltersAndSortManager(fieldsContainer);
    this.buildRefreshManager(applyContainer);
    this.buildCleanFilters(applyContainer);
  }
  udpate() {
    this.buildTable();
    this.buildPaginationComponent();
    this.refreshButton.removeCta();
  }
  buildTable() {
    var _a;
    if (this.tableContainer) {
      this.tableContainer.remove();
    }
    ;
    this.tableContainer = this.container.createDiv({ attr: { id: `table-container-${Math.floor(Date.now() / 1e3)}` } });
    const dvApi = (_a = this.plugin.app.plugins.plugins.dataview) == null ? void 0 : _a.api;
    if (dvApi) {
      dvApi.executeJs(this.buildDvJSRendering(), this.tableContainer, this.plugin, this.fileClass.getClassFile().path);
    }
    this.addClickEventToLink();
  }
  addClickEventToLink() {
    this.container.querySelectorAll("a.internal-link").forEach((link) => {
      link.addEventListener("click", () => {
        var _a;
        return this.plugin.app.workspace.openLinkText((_a = link.getAttr("data-href").split("/").last()) == null ? void 0 : _a.replace(/(.*).md/, "$1"), this.fileClass.getClassFile().path, "tab");
      });
    });
  }
  buildPaginationComponent() {
    var _a;
    this.paginationComponent.replaceChildren();
    const pagination = this.paginationComponent.createDiv({ cls: "row" });
    const dvApi = (_a = this.plugin.app.plugins.plugins.dataview) == null ? void 0 : _a.api;
    if (dvApi) {
      const values = new Function("dv", "current", `return ${this.buildDvJSQuery()}`)(dvApi).values;
      const count = values.length;
      for (let i = 0; i <= Math.floor(count / this.limit); i++) {
        if (i * this.limit < count) {
          const cell = pagination.createDiv({ cls: "cell" });
          const rangeComponent = cell.createDiv({
            cls: `cell-items range ${i === this.sliceStart / this.limit ? "active" : ""}`,
            text: `${i * this.limit + 1} - ${Math.min((i + 1) * this.limit, count)}`
          });
          rangeComponent.onclick = () => {
            this.sliceStart = i * this.limit;
            this.udpate();
          };
        }
      }
    }
  }
  buildPaginationManager(container) {
    this.paginationComponent = container.createDiv({});
    this.buildPaginationComponent();
  }
  buildLimitManager(container) {
    container.replaceChildren();
    container.createDiv({ text: "Results per page: ", cls: "label" });
    const limitInput = new import_obsidian41.TextComponent(container);
    limitInput.setValue(`${this.limit}`);
    limitInput.onChange((value) => {
      this.limit = parseInt(value) || this.limit;
      this.refreshButton.setCta();
    });
  }
  toggleBtnState(name, direction) {
    const btnName = `${name}__${direction}`;
    const oppositeBtnName = `${name}__${oppositeDirection[direction]}`;
    const { btn, active } = this.sorters[btnName];
    const { btn: oppBtn } = this.sorters[oppositeBtnName];
    if (active) {
      btn.buttonEl.removeClass("active");
      this.sorters[btnName].active = false;
    } else {
      btn.setClass("active");
      oppBtn.buttonEl.removeClass("active");
      this.sorters[btnName].active = true;
      this.sorters[oppositeBtnName].active = false;
    }
  }
  buildSortBtn(name, direction, component) {
    const btn = new import_obsidian41.ButtonComponent(component);
    btn.setIcon(direction === "asc" ? "chevron-up" : "chevron-down");
    this.sorters[`${name}__${direction}`] = { btn, active: false, name, direction };
    btn.onClick(() => {
      this.toggleBtnState(name, direction);
      this.udpate();
    });
  }
  buildFieldNameAndSortComponent(name, label, container) {
    const fieldNameAndSortCell = container.createDiv({ cls: "cell" });
    const fieldNameAndSortContainer = fieldNameAndSortCell.createDiv({ cls: "cell-items" });
    this.buildSortBtn(name, "asc", fieldNameAndSortContainer);
    this.buildSortBtn(name, "desc", fieldNameAndSortContainer);
    fieldNameAndSortContainer.createDiv({ text: label });
  }
  buildFilterComponent(name, container) {
    const fieldActionContainer = container.createDiv({ cls: "cell" });
    const filter = new import_obsidian41.TextComponent(fieldActionContainer);
    filter.setValue("");
    filter.onChange(() => this.refreshButton.setCta());
    this.filters[name] = filter;
  }
  buildFiltersAndSortManager(container) {
    const fieldsNamesAndSortContainer = container.createDiv({ cls: "row header" });
    const fieldsActionsContainer = container.createDiv({ cls: "row" });
    this.buildFieldNameAndSortComponent("file", "File name", fieldsNamesAndSortContainer);
    this.buildFilterComponent("file", fieldsActionsContainer);
    const fields = this.plugin.fieldIndex.fileClassesFields.get(this.fileClass.name) || [];
    fields.forEach((field) => {
      this.buildFieldNameAndSortComponent(field.name, field.name, fieldsNamesAndSortContainer);
      this.buildFilterComponent(field.name, fieldsActionsContainer);
    });
  }
  buildRefreshManager(container) {
    this.refreshButton = new import_obsidian41.ButtonComponent(container);
    this.refreshButton.setIcon("refresh-ccw");
    this.refreshButton.onClick(() => {
      this.udpate();
    });
  }
  buildCleanFilters(container) {
    const cleanFilterBtn = new import_obsidian41.ButtonComponent(container);
    cleanFilterBtn.setIcon("eraser");
    cleanFilterBtn.onClick(() => {
      Object.values(this.filters).forEach((filter) => filter.setValue(""));
      this.refreshButton.setCta();
    });
  }
  buildFilterQuery() {
    return Object.entries(this.filters).map(([fieldName, input]) => {
      const field = fieldName === "file" ? `p.file.name` : `p["${fieldName}"]`;
      if (input.getValue()) {
        return `    .filter(p => ${field} && ${field}.toString().toLowerCase().includes("${input.getValue()}".toLowerCase()))
`;
      } else {
        return "";
      }
    }).join("");
  }
  buildSorterQuery() {
    return Object.entries(this.sorters).map(([fieldSorter, { btn, active, direction, name }]) => {
      const fieldKey = name === "file" ? "p.file.name" : `p["${name}"]`;
      if (active) {
        return `    .sort(p => ${fieldKey}, "${direction}")
`;
      } else {
        return "";
      }
    }).join("");
  }
  buildDvJSQuery() {
    var _a;
    const tagsMappedToFileClass = [];
    this.plugin.fieldIndex.tagsMatchingFileClasses.forEach((cls, tag) => {
      if (this.fileClass.name === cls.name) {
        tagsMappedToFileClass.push("#" + tag);
      }
    });
    let dvQuery = "";
    const fileClassAlias = this.plugin.settings.fileClassAlias;
    const classFilesPath = this.plugin.settings.classFilesPath;
    const templatesFolder = (_a = this.plugin.app.plugins.plugins["templater-obsidian"]) == null ? void 0 : _a.settings["templates_folder"];
    dvQuery += `dv.pages()
`;
    dvQuery += `    .where(p =>

        (

            (typeof(p['${fileClassAlias}']) === 'string' && p['${fileClassAlias}'] === '${this.fileClass.name}')

            || (Array.isArray(p['${fileClassAlias}']) && p['${fileClassAlias}'].includes('${this.fileClass.name}'))

            || p.file.etags.values.some(et => ${JSON.stringify(tagsMappedToFileClass)}.some(t => et.startsWith(t)))

        )

        ${!!classFilesPath ? "        && !p.file.path.includes('" + classFilesPath + "')\n" : ""}
        ${templatesFolder ? "        && !p.file.path.includes('" + templatesFolder + "')\n" : ""}
        )
`;
    dvQuery += this.buildFilterQuery();
    return dvQuery;
  }
  buildDvJSRendering() {
    const fields = this.plugin.fieldIndex.fileClassesFields.get(this.fileClass.name) || [];
    let dvJS = 'const {fieldModifier: f} = this.app.plugins.plugins["metadata-menu"].api;\ndv.table(["File",';
    dvJS += fields.map((field) => `"${field.name}"`).join(",");
    dvJS += `], 
`;
    dvJS += this.buildDvJSQuery();
    dvJS += this.buildSorterQuery();
    dvJS += `    .slice(${this.sliceStart}, ${this.sliceStart + this.limit})
`;
    dvJS += '    .map(p => [\n        dv.el("span", p.file.link),\n';
    dvJS += fields.map((field) => `        f(dv, p, "${field.name}", {options: {alwaysOn: false, showAddField: true}})`).join(",\n");
    dvJS += "    \n])";
    dvJS += "\n);";
    return dvJS;
  }
};

// src/fileClass/fileClassView.ts
var FILECLASS_VIEW_TYPE = "FileClassView";
var MenuOption = class {
  constructor(menu, id, name, relatedView, view) {
    this.menu = menu;
    this.id = id;
    this.name = name;
    this.relatedView = relatedView;
    this.view = view;
    this.itemContainer = this.menu.createDiv({ cls: "fv-menu-item", attr: { id: this.id } });
    this.itemContainer.createEl("h2", { text: this.name });
    this.itemContainer.onclick = () => {
      this.view.updateDisplayView(this.id);
    };
  }
  toggleInactive() {
    this.itemContainer.removeClass("active");
    this.relatedView.hide();
  }
  toggleActive() {
    this.itemContainer.addClass("active");
    this.relatedView.show();
  }
};
var FileClassView = class extends import_obsidian42.ItemView {
  constructor(leaf, plugin, component, name, fileClass) {
    super(leaf);
    this.leaf = leaf;
    this.plugin = plugin;
    this.component = component;
    this.name = name;
    this.fileClass = fileClass;
    this.menuOptions = [];
    this.views = [];
    this.containerEl.addClass("metadata-menu");
    this.containerEl.addClass("fileclass-view");
    this.navigation = false;
    this.icon = "file-spreadsheet";
    this.onunload = () => {
      this.plugin.app.viewRegistry.unregisterView(FILECLASS_VIEW_TYPE + "__" + this.fileClass.name);
      this.plugin.removeChild(this.component);
      this.unload();
    };
    this.buildLayout();
  }
  updateDisplayView(id) {
    [...this.viewContainer.children].forEach((view) => view.hide());
    this.menuOptions.forEach((option) => option.id === id ? option.toggleActive() : option.toggleInactive());
  }
  buildLayout() {
    this.menu = this.contentEl.createDiv({ cls: "fv-menu" });
    this.viewContainer = this.contentEl.createDiv();
    this.buildSettingsView();
    this.buildFieldsView();
    this.buildTableView();
    this.buildMenu();
    this.updateDisplayView("tableOption");
  }
  buildMenu() {
    this.menuOptions.push(new MenuOption(this.menu, "tableOption", "Table view", this.tableView.container, this));
    this.menuOptions.push(new MenuOption(this.menu, "fieldsOption", "Fileclass fields", this.fieldsView.container, this));
    this.menuOptions.push(new MenuOption(this.menu, "settingsOption", "Fileclass settings", this.settingsView.container, this));
  }
  buildSettingsView() {
    this.settingsView = new FileClassSettingsView(this.plugin, this.viewContainer, this.fileClass);
    this.views.push(this.settingsView.container);
  }
  buildFieldsView() {
    this.fieldsView = new FileClassFieldsView(this.plugin, this.viewContainer, this.fileClass);
    this.views.push(this.fieldsView.container);
  }
  buildTableView() {
    this.tableView = new FileClassTableView(this.plugin, this.component, this.viewContainer, this.fileClass);
    this.views.push(this.tableView.container);
  }
  getDisplayText() {
    return this.name || "FileClass";
  }
  getViewType() {
    return this.fileClass ? FILECLASS_VIEW_TYPE + "__" + this.fileClass.name : FILECLASS_VIEW_TYPE;
  }
  updateFieldsView() {
    this.fileClass.getAttributes();
    this.fieldsView.buildSettings();
  }
  updateSettingsView() {
    this.settingsView.buildSettings();
  }
  onOpen() {
    return __async(this, null, function* () {
      var _a;
      this.icon = ((_a = this.fileClass) == null ? void 0 : _a.getIcon()) || "file-spreadsheet";
      this.tableView.buildTable();
    });
  }
};

// src/fileClass/fileClassChoiceModal.ts
var import_obsidian43 = require("obsidian");
var FileClassChoiceModal = class extends import_obsidian43.SuggestModal {
  constructor(plugin, fileClassManager, tagsAndFileClasses) {
    super(plugin.app);
    this.plugin = plugin;
    this.fileClassManager = fileClassManager;
    this.tagsAndFileClasses = tagsAndFileClasses;
    this.containerEl.addClass("metadata-menu");
  }
  getSuggestions(query) {
    const index = this.plugin.fieldIndex;
    const values = [.../* @__PURE__ */ new Set([...index.fileClassesName.keys(), ...index.tagsMatchingFileClasses.keys()])].filter((name) => name.toLowerCase().includes(query.toLowerCase())).sort((a, b) => a.localeCompare(b));
    if (this.tagsAndFileClasses.length) {
      return values.filter((value) => this.tagsAndFileClasses.includes(value));
    } else {
      return values;
    }
  }
  renderSuggestion(value, el) {
    el.setText(value);
    el.addClass("value-container");
  }
  onChooseSuggestion(item, evt) {
    return __async(this, null, function* () {
      var _a;
      const index = this.plugin.fieldIndex;
      const fileClass = index.fileClassesName.get(item) || index.tagsMatchingFileClasses.get(item);
      const dvApi = (_a = this.plugin.app.plugins.plugins.dataview) == null ? void 0 : _a.api;
      if (fileClass && dvApi) {
        this.fileClassManager.name = item;
        this.fileClassManager.fileClass = fileClass;
        this.fileClassManager.fileClassViewType = FILECLASS_VIEW_TYPE + "__" + fileClass.name;
        this.fileClassManager.openFileClassView();
      }
      this.close();
    });
  }
};

// src/components/fileClassManager.ts
var FileClassManager = class extends import_obsidian44.Component {
  constructor(plugin, fileClass) {
    super();
    this.plugin = plugin;
    this.fileClass = fileClass;
    if (!this.fileClass) {
      this.fileClassViewType = FILECLASS_VIEW_TYPE;
    } else {
      this.fileClassViewType = FILECLASS_VIEW_TYPE + "__" + this.fileClass.name;
    }
  }
  onload() {
    return __async(this, null, function* () {
      if (this.fileClass) {
        this.name = this.fileClass.name;
        this.fileClassViewType = FILECLASS_VIEW_TYPE + "__" + this.fileClass.name;
        yield this.openFileClassView();
      } else {
        const tagsAndFileClasses = this.getActiveFileTagsAndFileClasses();
        if (tagsAndFileClasses.length === 1) {
          const index = this.plugin.fieldIndex;
          const fileClassName = tagsAndFileClasses[0];
          const fileClass = index.fileClassesName.get(fileClassName) || index.tagsMatchingFileClasses.get(fileClassName);
          if (fileClass) {
            this.name = fileClass.name;
            this.fileClass = fileClass;
            this.fileClassViewType = FILECLASS_VIEW_TYPE + "__" + fileClass.name;
            yield this.openFileClassView();
          } else {
            this.plugin.removeChild(this);
            this.unload();
          }
        } else {
          const choiceModal = new FileClassChoiceModal(this.plugin, this, tagsAndFileClasses);
          choiceModal.onClose = () => {
            if (!this.fileClass) {
              this.plugin.removeChild(this);
              this.unload();
            }
          };
          choiceModal.open();
        }
      }
    });
  }
  onunload() {
    this.plugin.app.workspace.detachLeavesOfType(this.fileClassViewType);
    this.plugin.app.viewRegistry.unregisterView(this.fileClassViewType);
  }
  openFileClassView() {
    return __async(this, null, function* () {
      if (this.fileClass) {
        const fileClass = this.fileClass;
        this.plugin.app.workspace.detachLeavesOfType(this.fileClassViewType);
        this.plugin.registerView(this.fileClassViewType, (leaf) => {
          const fileClassView = new FileClassView(leaf, this.plugin, this, this.name, fileClass);
          this.fileClassView = fileClassView;
          return fileClassView;
        });
        yield this.plugin.app.workspace.getLeaf("tab", "vertical").setViewState({
          type: this.fileClassViewType,
          active: true
        });
        this.plugin.app.workspace.revealLeaf(this.plugin.app.workspace.getLeavesOfType(this.fileClassViewType).last());
        this.registerEvent(this.plugin.app.workspace.on("metadata-menu:updated-index", () => {
          var _a;
          const view = (_a = this.plugin.app.workspace.getLeavesOfType(this.fileClassViewType)[0]) == null ? void 0 : _a.view;
          if (view) {
            view.updateFieldsView();
            view.updateSettingsView();
          }
        }));
      }
    });
  }
  getActiveFileTagsAndFileClasses() {
    var _a, _b, _c;
    const index = this.plugin.fieldIndex;
    const activeFilePath = (_a = this.plugin.app.workspace.getActiveFile()) == null ? void 0 : _a.path;
    const tagsAndFileClasses = [];
    const dvApi = (_b = this.plugin.app.plugins.plugins.dataview) == null ? void 0 : _b.api;
    if (activeFilePath && activeFilePath.endsWith(".md") && dvApi) {
      tagsAndFileClasses.push(...((_c = dvApi.page(activeFilePath).etags) == null ? void 0 : _c.filter((tag) => [...index.tagsMatchingFileClasses.keys()].includes(tag))) || []);
      tagsAndFileClasses.push(...index.filesFileClassesNames.get(activeFilePath) || []);
    }
    return [...new Set(tagsAndFileClasses)];
  }
};

// src/components/NoteFields.ts
var FieldOptions = class {
  constructor(container) {
    this.container = container;
  }
  addOption(icon, onclick, tooltip, className) {
    const fieldOptionContainer = this.container.createDiv({ cls: "field-item field-option" });
    const fieldOption = new import_obsidian45.ButtonComponent(fieldOptionContainer);
    fieldOption.setIcon(icon);
    if (className)
      fieldOption.buttonEl.addClass(className);
    fieldOption.onClick(() => onclick());
    if (tooltip)
      fieldOption.setTooltip(tooltip);
  }
};
var FieldsModal = class extends import_obsidian45.Modal {
  constructor(plugin, file) {
    var _a;
    super(plugin.app);
    this.plugin = plugin;
    this.file = file;
    this.fieldContainers = [];
    this.maxOptions = 0;
    this.missingFields = false;
    this.dvApi = (_a = plugin.app.plugins.plugins.dataview) == null ? void 0 : _a.api;
    this.getFields();
    this.containerEl.addClass("metadata-menu");
    this.containerEl.addClass("note-fields-modal");
  }
  onOpen() {
    this.titleEl.setText(`Fields of ${this.file.basename}.${this.file.extension}`);
    this.buildFieldsContainer();
  }
  getFields() {
    this.fields = this.plugin.fieldIndex.filesFields.get(this.file.path) || [];
  }
  buildFieldContainer(parentContainer, field, value) {
    const fieldManager = new FieldManager[field.type](this.plugin, field);
    const fieldContainer = parentContainer.createDiv({ cls: "field-container" });
    const fieldNameContainer = fieldContainer.createDiv({ text: `${field.name}`, cls: "field-item field-name" });
    const fileClass = field.fileClassName ? this.plugin.fieldIndex.fileClassesName.get(field.fileClassName) : void 0;
    if (fileClass) {
      fieldNameContainer.addClass(`fileClassField__${fileClass.name.replace("/", "___").replace(" ", "_")}`);
    }
    const fieldSettingContainer = fieldContainer.createDiv({ cls: "field-item field-setting" });
    const fieldSettingBtn = new import_obsidian45.ButtonComponent(fieldSettingContainer);
    fieldSettingBtn.setIcon("gear");
    fieldSettingBtn.setTooltip(`${field.fileClassName ? field.fileClassName + " > " : "Preset Field > "} ${field.name} settings`);
    fieldSettingBtn.onClick(() => {
      const _fileClass = field.fileClassName ? this.plugin.fieldIndex.fileClassesName.get(field.fileClassName) : void 0;
      const fileClassAttribute = _fileClass == null ? void 0 : _fileClass.attributes.find((attr) => attr.name === field.name);
      if (fileClassAttribute && _fileClass) {
        const fileClassAttributeModal = new FileClassAttributeModal(this.plugin, _fileClass, fileClassAttribute);
        fileClassAttributeModal.open();
      }
    });
    const fieldTypeContainer = fieldContainer.createDiv({ cls: `field-item` });
    fieldTypeContainer.createDiv({ text: field.type, cls: `chip field-type ${FieldBackgroundColorClass[field.type]}` });
    const fieldValueContainer = fieldContainer.createDiv({
      cls: value !== void 0 && value !== null ? "field-item field-value" : "field-item field-value emptyfield"
    });
    if (value === null) {
      fieldValueContainer.setText(field.type === "Lookup" /* Lookup */ ? "---auto---" : "<empty>");
    } else if (value === void 0) {
      this.missingFields = true;
      fieldValueContainer.setText("<missing>");
    } else {
      fieldManager.displayValue(fieldValueContainer, this.file, field.name, () => {
        this.close();
      });
    }
    const fieldOptions = new FieldOptions(fieldContainer);
    if (value !== void 0) {
      fieldManager.addFieldOption(field.name, value, this.file, fieldOptions);
    } else {
      const fieldBtnContainer = fieldContainer.createDiv({ cls: "field-item field-option" });
      const fieldBtn = new import_obsidian45.ButtonComponent(fieldBtnContainer);
      fieldBtn.setIcon("list-plus");
      fieldBtn.setTooltip("Add field at section");
      fieldBtn.onClick(() => {
        new chooseSectionModal(this.plugin, this.file, (lineNumber, after, asList, asComment) => FieldManager2.openFieldModal(this.plugin, this.file, field.name, "", lineNumber, after, asList, asComment)).open();
      });
    }
    ;
    const optionsCount = fieldContainer.querySelectorAll(".field-option").length;
    if (this.maxOptions < optionsCount)
      this.maxOptions = optionsCount;
    return fieldContainer;
  }
  openInsertMissingFieldsForFileClassModal(fileClass) {
    var _a;
    const dvApi = (_a = this.plugin.app.plugins.plugins.dataview) == null ? void 0 : _a.api;
    if (dvApi) {
      const dvFile = dvApi.page(this.file.path);
      if (dvFile) {
        const modal = new chooseSectionModal(this.plugin, this.file, (lineNumber, after, asList, asComment) => insertMissingFields(this.plugin, dvFile.file.path, lineNumber, after, asList, asComment, fileClass.name));
        modal.open();
      }
    }
  }
  missingFieldsForFileClass(fileClass) {
    var _a, _b;
    const currentFieldsNames = [];
    const dvApi = (_a = this.plugin.app.plugins.plugins.dataview) == null ? void 0 : _a.api;
    if (dvApi) {
      const dvFile = dvApi.page(this.file.path);
      if (dvFile) {
        currentFieldsNames.push(...genuineKeys(dvFile));
      }
    }
    ;
    const missingFields = fileClass && this.file ? !((_b = this.plugin.fieldIndex.fileClassesFields.get(fileClass.name)) == null ? void 0 : _b.map((f) => f.name).every((fieldName) => currentFieldsNames.includes(fieldName))) : false;
    return missingFields;
  }
  buildFileClassManager(container) {
    const fileClasses = this.plugin.fieldIndex.filesFileClasses.get(this.file.path) || [];
    fileClasses.forEach((fileClass) => {
      const fileClassManagerContainer = container.createDiv({ cls: "fields-inheritance-manager-container" });
      const _ancestors = this.plugin.fieldIndex.fileClassesAncestors.get(fileClass.name) || [];
      const ancestors = [..._ancestors].reverse();
      ancestors.push(fileClass.name);
      ancestors.forEach((fileClassName, i) => {
        const _fileClass = this.plugin.fieldIndex.fileClassesName.get(fileClassName);
        if (_fileClass) {
          const fileClassOptionsContainer = fileClassManagerContainer.createDiv({ cls: "fileclass-manager-container" });
          const fileClassNameContainer = fileClassOptionsContainer.createDiv({ cls: "name", text: _fileClass.name });
          fileClassNameContainer.setAttr("id", `fileClass__${_fileClass.name.replace("/", "___").replace(" ", "_")}`);
          if (this.missingFieldsForFileClass(_fileClass)) {
            const fileClassInsertMissingFieldsBtn = new import_obsidian45.ButtonComponent(fileClassOptionsContainer);
            fileClassInsertMissingFieldsBtn.setIcon("battery-full");
            fileClassInsertMissingFieldsBtn.setTooltip(`Insert missing fields for ${_fileClass.name}`);
            fileClassInsertMissingFieldsBtn.onClick(() => {
              this.openInsertMissingFieldsForFileClassModal(_fileClass);
            });
          }
          const fileClassAddAttributeBtn = new import_obsidian45.ButtonComponent(fileClassOptionsContainer);
          fileClassAddAttributeBtn.setIcon("plus-circle");
          fileClassAddAttributeBtn.setTooltip(`Add field definition in ${_fileClass.name}`);
          fileClassAddAttributeBtn.onClick(() => {
            const fileClassAttributeModal = new FileClassAttributeModal(this.plugin, _fileClass);
            fileClassAttributeModal.open();
          });
          if (i < ancestors.length - 1) {
            fileClassManagerContainer.createDiv({ text: ">", cls: "separator" });
          }
          const fileClassFieldsContainers = this.containerEl.querySelectorAll(`[class*="fileClassField__${fileClassName.replace("/", "___").replace(" ", "_")}"]`);
          fileClassFieldsContainers.forEach((fieldNameContainer) => {
            fieldNameContainer.onmouseover = () => {
              fileClassNameContainer == null ? void 0 : fileClassNameContainer.addClass("active");
            };
            fieldNameContainer.onmouseout = () => {
              fileClassNameContainer == null ? void 0 : fileClassNameContainer.removeClass("active");
            };
          });
          fileClassNameContainer.onmouseover = () => {
            this.containerEl.querySelectorAll(`.field-item.field-name.fileClassField__${fileClassName.replace("/", "___").replace(" ", "_")}`).forEach((cont) => {
              cont.addClass("active");
            });
          };
          fileClassNameContainer.onmouseout = () => {
            this.containerEl.querySelectorAll(`.field-item.field-name.fileClassField__${fileClassName.replace("/", "___").replace(" ", "_")}`).forEach((cont) => {
              cont.removeClass("active");
            });
          };
          fileClassNameContainer.onclick = () => {
            const fileClassComponent = new FileClassManager(this.plugin, _fileClass);
            this.plugin.addChild(fileClassComponent);
            this.close();
          };
        }
      });
    });
  }
  formatOptionsColumns(fieldsContainer) {
    const fieldContainers = fieldsContainer.querySelectorAll(".field-container");
    fieldContainers.forEach((field) => {
      var _a, _b;
      const options2 = field.querySelectorAll(".field-option");
      if (options2.length < this.maxOptions) {
        const parent = (_a = options2[0]) == null ? void 0 : _a.parentElement;
        if (parent) {
          for (let i = 0; i < this.maxOptions - options2.length; i++) {
            const emptyCell = parent.createDiv({ cls: "field-item field-option" });
            (_b = options2[0].parentElement) == null ? void 0 : _b.insertBefore(emptyCell, options2[0]);
          }
        }
      }
    });
  }
  buildFieldsContainer() {
    this.missingFields = false;
    this.contentEl.replaceChildren();
    this.contentEl.createEl("hr");
    const fieldsContainer = this.contentEl.createDiv({ cls: "note-fields-container" });
    this.fields.forEach((field) => {
      const value = this.dvApi ? this.dvApi.page(this.file.path)[field.name] : void 0;
      this.fieldContainers.push(this.buildFieldContainer(fieldsContainer, field, value));
    });
    this.formatOptionsColumns(fieldsContainer);
    if (this.missingFields) {
      const insertMissingFieldsContainer = this.contentEl.createDiv({ cls: "insert-all-fields" });
      insertMissingFieldsContainer.createDiv({ text: "Insert missing fields" });
      const insertMissingFieldsBtn = new import_obsidian45.ButtonComponent(insertMissingFieldsContainer);
      insertMissingFieldsBtn.setIcon("battery-full");
      insertMissingFieldsBtn.onClick(() => {
        var _a;
        const dvFile = (_a = this.dvApi) == null ? void 0 : _a.page(this.file.path);
        if (dvFile) {
          new chooseSectionModal(this.plugin, this.file, (lineNumber, after, asList, asComment) => insertMissingFields(this.plugin, dvFile.file.path, lineNumber, after, asList, asComment)).open();
        }
      });
    }
    this.contentEl.createEl("hr");
    const fileClassManagersContainer = this.contentEl.createDiv({ cls: "fields-container" });
    this.buildFileClassManager(fileClassManagersContainer);
  }
};
var NoteFieldsComponent = class extends import_obsidian45.Component {
  constructor(plugin, cacheVersion, onChange, file) {
    super();
    this.plugin = plugin;
    this.cacheVersion = cacheVersion;
    this.onChange = onChange;
    this.file = file;
    this.fieldsModal = new FieldsModal(this.plugin, file);
    this.fieldsModal.onClose = () => {
      this.plugin.removeChild(this);
      this.unload();
    };
  }
  onload() {
    this.plugin.registerEvent(this.plugin.app.metadataCache.on("dataview:metadata-change", () => {
      this.fieldsModal.getFields();
      this.fieldsModal.buildFieldsContainer();
    }));
    this.fieldsModal.open();
  }
};

// src/options/FieldCommandSuggestModal.ts
var import_obsidian46 = require("obsidian");
var FieldCommandSuggestModal = class extends import_obsidian46.FuzzySuggestModal {
  constructor(app2) {
    super(app2);
    this.options = [];
    this.containerEl.addClass("metadata-menu");
  }
  getItems() {
    return this.options;
  }
  getItemText(item) {
    return item.actionLabel;
  }
  onChooseItem(item, evt) {
    item.action();
  }
  renderSuggestion(item, el) {
    el.addClass("value-container");
    const iconContainer = el.createDiv({ cls: "icon-container" });
    item.item.icon ? (0, import_obsidian46.setIcon)(iconContainer, item.item.icon) : (0, import_obsidian46.setIcon)(iconContainer, "pencil");
    const actionLabel = el.createDiv();
    actionLabel.innerHTML = item.item.actionLabel;
  }
};

// src/options/FileClassOptionsList.ts
var import_obsidian47 = require("obsidian");
function isMenu(location) {
  return location.addItem !== void 0;
}
function isInsertFieldCommand(location) {
  return location === "InsertFieldCommand";
}
function isSuggest(location) {
  return location.getItems !== void 0;
}
var FileClassOptionsList = class {
  constructor(plugin, file, location, fromFile) {
    this.plugin = plugin;
    this.file = file;
    this.location = location;
    this.fromFile = fromFile;
    this.fileClass = this.plugin.fieldIndex.fileClassesPath.get(this.file.path);
  }
  createExtraOptionList(openAfterCreate = true) {
    var _a, _b;
    const mapWithTagAction = () => __async(this, null, function* () {
      yield postValues(this.plugin, [{ name: "mapWithTag", payload: { value: "true" } }], this.file);
    });
    const openFileClassTableViewAction = () => {
      const fileClassComponent = new FileClassManager(this.plugin, fileClass);
      this.plugin.addChild(fileClassComponent);
    };
    if (isMenu(this.location)) {
      this.location.addSeparator();
    }
    ;
    const fileClass = this.fileClass;
    const currentFieldsNames = [];
    let addMissingFieldsAction = () => {
      new import_obsidian47.Notice("Something went wrong, please check your fileClass definitions");
    };
    if (this.fromFile) {
      const dvApi = (_a = this.plugin.app.plugins.plugins.dataview) == null ? void 0 : _a.api;
      if (dvApi) {
        const dvFile = dvApi.page(this.fromFile.path);
        if (dvFile) {
          currentFieldsNames.push(...genuineKeys(dvFile));
          const modal = new chooseSectionModal(this.plugin, this.fromFile, (lineNumber, after, asList, asComment) => insertMissingFields(this.plugin, dvFile.file.path, lineNumber, after, asList, asComment, fileClass == null ? void 0 : fileClass.name));
          addMissingFieldsAction = () => {
            modal.open();
          };
        }
      }
      ;
    }
    const missingFields = fileClass && this.fromFile ? !((_b = this.plugin.fieldIndex.fileClassesFields.get(fileClass.name)) == null ? void 0 : _b.map((f) => f.name).every((fieldName) => currentFieldsNames.includes(fieldName))) : false;
    if (isInsertFieldCommand(this.location) && fileClass) {
      const modal = new FileClassAttributeModal(this.plugin, fileClass);
      modal.open();
    } else if (isSuggest(this.location)) {
      if (fileClass) {
        this.location.options.push({
          id: `display_table_view_for_${fileClass.name.replace("/", "_")}`,
          actionLabel: `Display ${fileClass.name} table view`,
          action: openFileClassTableViewAction,
          icon: "file-spreadsheet"
        });
      }
      if (fileClass && !fileClass.isMappedWithTag()) {
        this.location.options.push({
          id: "map_fileClass_with_tag",
          actionLabel: `<span>Map <b>${fileClass.name}</b> with tag of same name</span>`,
          action: mapWithTagAction,
          icon: "hash"
        });
      }
      if (fileClass && missingFields && this.fromFile) {
        this.location.options.push({
          id: `insert_missig_fields_from_${fileClass.name.replace("/", "_")}`,
          actionLabel: `<span>Insert missing fields from <b>${fileClass.name}</b></span>`,
          action: addMissingFieldsAction,
          icon: "battery-full"
        });
      }
      this.buildFieldOptions();
      if (openAfterCreate)
        this.location.open();
    } else if (isMenu(this.location)) {
      if (fileClass) {
        this.location.addItem((item) => {
          item.setTitle(`Display ${fileClass.name} table view`);
          item.onClick(openFileClassTableViewAction);
          item.setIcon("file-spreadsheet");
          item.setSection(`metadata-menu-fileclass.${fileClass.name}.fileclass-fields`);
        });
      }
      if (fileClass && !fileClass.isMappedWithTag()) {
        this.location.addItem((item) => {
          item.setTitle(`Map ${fileClass.name} with tag`);
          item.setIcon("hash");
          item.onClick(mapWithTagAction);
          item.setSection(`metadata-menu-fileclass.${fileClass.name}.fileclass-fields`);
        });
      }
      if (fileClass && missingFields && this.fromFile) {
        this.location.addItem((item) => {
          item.setTitle(`Insert missing fields from ${fileClass.name}`);
          item.setIcon("battery-full");
          item.onClick(addMissingFieldsAction);
          item.setSection(`metadata-menu-fileclass.${fileClass.name}.fileclass-fields`);
        });
      }
      this.buildFieldOptions();
    } else {
      this.buildFieldOptions;
    }
  }
  buildFieldOptions() {
    var _a;
    (_a = this.fileClass) == null ? void 0 : _a.attributes.forEach((attr) => {
      const modal2 = new FileClassAttributeModal(this.plugin, this.fileClass, attr);
      if (isMenu(this.location)) {
        this.location.addItem((item) => {
          item.setTitle(`${this.fileClass.name} - ${attr.name}`);
          item.setIcon("wrench");
          item.onClick(() => {
            modal2.open();
          });
          item.setSection(`metadata-menu-fileclass.${this.fileClass.name}.fileclass-fields`);
        });
      } else if (isSuggest(this.location)) {
        this.location.options.push({
          id: `update_${attr.name}`,
          actionLabel: `<span>${attr.name}</span>`,
          action: () => modal2.open(),
          icon: "gear"
        });
      }
    });
    const modal = new FileClassAttributeModal(this.plugin, this.fileClass);
    const action = () => modal.open();
    if (isMenu(this.location) && this.fileClass) {
      this.location.addItem((item) => {
        item.setTitle("Add new field");
        item.setIcon("plus-circle");
        item.onClick(action);
        item.setSection(`metadata-menu-fileclass.${this.fileClass.name}.fileclass-fields`);
      });
    } else if (isSuggest(this.location) && this.fileClass) {
      this.location.options.push({
        id: "add_fileClass_attribute",
        actionLabel: `<span>Insert an attribute for <b>${this.fileClass.name}</b> fileClass</span>`,
        action,
        icon: "plus-circle"
      });
    }
  }
};

// src/options/OptionsList.ts
var import_obsidian49 = require("obsidian");

// src/modals/addNewFileClassModal.ts
var import_obsidian48 = require("obsidian");

// src/commands/createFileClass.ts
function createFileClass(_0, _1) {
  return __async(this, arguments, function* (plugin, name, mapWithTag = false, tagNames = []) {
    const classFilesPath = plugin.settings.classFilesPath;
    if (classFilesPath) {
      try {
        const content = mapWithTag ? `---
mapWithTag: true
${tagNames.length ? "tagNames: [" + tagNames.join(", ") + "]\n" : ""}---
` : "";
        yield plugin.app.vault.create(`${classFilesPath}${name}.md`, content);
      } catch (error) {
        throw error;
      }
    }
  });
}

// src/modals/addNewFileClassModal.ts
var AddNewFileClassModal = class extends import_obsidian48.Modal {
  constructor(plugin) {
    super(plugin.app);
    this.plugin = plugin;
    this.containerEl.addClass("metadata-menu");
  }
  onOpen() {
    this.titleEl.setText("Add a new fileClass");
    this.buildAddFileClassForm();
  }
  buildAddFileClassForm() {
    const fileClassesPath = this.plugin.settings.classFilesPath;
    const fileClassAlias = this.plugin.settings.fileClassAlias;
    const nameContainer = this.contentEl.createDiv({ cls: "field-container" });
    nameContainer.createDiv({ text: `${fileClassAlias} name`, cls: "label" });
    const nameInput = new import_obsidian48.TextComponent(nameContainer);
    nameInput.inputEl.addClass("with-label");
    nameInput.inputEl.addClass("full-width");
    const nameErrorContainer = this.contentEl.createDiv({ cls: "field-error", text: `This ${fileClassAlias} file already exists` });
    const mapWithTagContainer = this.contentEl.createDiv({ cls: "field-container" });
    mapWithTagContainer.createDiv({ cls: "label", text: `Map this ${fileClassAlias} file with the tag of same name` });
    mapWithTagContainer.createDiv({ cls: "spacer" });
    const mapWithTagToggler = new import_obsidian48.ToggleComponent(mapWithTagContainer);
    mapWithTagToggler.setValue(false);
    mapWithTagToggler.onChange((value) => {
      if (value) {
        tagNamesContainer.show();
      } else {
        tagNamesContainer.hide();
      }
    });
    const tagNamesContainer = this.contentEl.createDiv({ cls: "field-container" });
    tagNamesContainer.createDiv({ cls: "label", text: "Aliases (optional)" });
    const tagNamesInput = new import_obsidian48.TextComponent(tagNamesContainer);
    tagNamesInput.inputEl.addClass("with-label");
    tagNamesInput.inputEl.addClass("full-width");
    tagNamesInput.setPlaceholder("Leave empty to map with the tag of same name as fileclass");
    tagNamesContainer.hide();
    const actionsContainer = this.contentEl.createDiv({ cls: "footer-actions" });
    actionsContainer.createDiv({ cls: "spacer" });
    const saveBtn = new import_obsidian48.ButtonComponent(actionsContainer);
    saveBtn.setDisabled(true);
    saveBtn.setIcon("file-plus-2");
    nameErrorContainer.hide();
    nameInput.onChange((value) => __async(this, null, function* () {
      nameErrorContainer.hide();
      saveBtn.setDisabled(false);
      saveBtn.setCta();
      if (yield this.plugin.app.vault.adapter.exists(`${fileClassesPath}${value}.md`)) {
        nameErrorContainer.show();
        saveBtn.setDisabled(true);
        saveBtn.removeCta();
      } else {
        saveBtn.setDisabled(false);
        saveBtn.setCta();
      }
    }));
    saveBtn.onClick(() => {
      createFileClass(this.plugin, nameInput.getValue(), mapWithTagToggler.getValue(), tagNamesInput.getValue().split(",").map((t) => t.trim()));
      this.close();
    });
  }
};

// src/options/OptionsList.ts
function isMenu2(location) {
  return location.addItem !== void 0;
}
function isInsertFieldCommand2(location) {
  return location === "InsertFieldCommand";
}
function isSuggest2(location) {
  return location.getItems !== void 0;
}
var OptionsList = class {
  constructor(plugin, file, location, includedFields) {
    this.plugin = plugin;
    this.file = file;
    this.location = location;
    this.includedFields = includedFields;
    this.fieldsFromIndex = {};
    this.file = file;
    this.location = location;
    this.attributes = {};
    this.includedFields = includedFields ? [this.plugin.settings.fileClassAlias, ...includedFields] : [this.plugin.settings.fileClassAlias];
    this.getFieldsFromIndex();
    this.getFieldsValues();
  }
  getFieldsValues() {
    var _a;
    const dvApi = (_a = this.plugin.app.plugins.plugins["dataview"]) == null ? void 0 : _a.api;
    if (dvApi) {
      const dvFile = dvApi.page(this.file.path);
      try {
        genuineKeys(dvFile).forEach((key) => this.addAttribute(key, dvFile[key]));
      } catch (error) {
        throw error;
      }
    }
  }
  addAttribute(key, value) {
    const includedFields = this.includedFields.filter((f) => f !== this.plugin.settings.fileClassAlias);
    if (includedFields.length > 0) {
      if (this.includedFields.includes(key) && !this.plugin.settings.globallyIgnoredFields.includes(key)) {
        this.attributes[key] = value;
      }
    } else if (!this.plugin.settings.globallyIgnoredFields.includes(key)) {
      this.attributes[key] = value;
    }
  }
  getFieldsFromIndex() {
    const index = this.plugin.fieldIndex;
    const fields = index.filesFields.get(this.file.path);
    fields == null ? void 0 : fields.forEach((field) => this.fieldsFromIndex[field.name] = field);
  }
  createAndOpenFieldModal(fieldName) {
    const field = this.fieldsFromIndex[fieldName];
    if (field) {
      const fieldManager = new FieldManager[field.type](this.plugin, field);
      switch (fieldManager.type) {
        case "Boolean" /* Boolean */:
          fieldManager.toggle(field.name, this.attributes[field.name], this.file);
          break;
        case "Cycle" /* Cycle */:
          fieldManager.next(field.name, this.attributes[field.name], this.file);
          break;
        default:
          fieldManager.createAndOpenFieldModal(this.file, field.name, this.attributes[field.name]);
          break;
      }
    } else {
      const defaultField = new Field_default(fieldName);
      defaultField.type = "Input" /* Input */;
      if (fieldName === this.plugin.settings.fileClassAlias) {
        this.buildFileClassFieldOptions(defaultField, this.attributes[fieldName]);
      } else if (this.location === "ManageAtCursorCommand") {
        const fieldManager = new Managers_default.Input(this.plugin, defaultField);
        fieldManager.createAndOpenFieldModal(this.file, fieldName, this.attributes[fieldName]);
      }
    }
  }
  createExtraOptionList(openAfterCreate = true) {
    var _a;
    const dvApi = (_a = this.plugin.app.plugins.plugins.dataview) == null ? void 0 : _a.api;
    const location = this.location;
    if (isMenu2(location)) {
      location.addSeparator();
    }
    ;
    if (isInsertFieldCommand2(location)) {
      this.addFieldAtCurrentPositionOption();
    } else if (isSuggest2(location)) {
      this.openNoteFieldModalOption();
      this.buildFieldOptions();
      this.addFieldAtCurrentPositionOption();
      this.addSectionSelectModalOption();
      this.addFieldAtTheEndOfFrontmatterOption();
      if (dvApi) {
        const currentFieldsNames = genuineKeys(dvApi.page(this.file.path));
        if (![...this.plugin.fieldIndex.filesFields.get(this.file.path) || []].map((field) => field.name).every((fieldName) => currentFieldsNames.includes(fieldName))) {
          this.addAllMissingFieldsAtSection();
        }
      }
      const fileClasses = this.plugin.fieldIndex.filesFileClasses.get(this.file.path) || [];
      fileClasses.forEach((fileClass) => {
        const fieldCommandSuggestModal = new FieldCommandSuggestModal(this.plugin.app);
        const optionsList = new FileClassOptionsList(this.plugin, fileClass.getClassFile(), fieldCommandSuggestModal, this.file);
        optionsList.createExtraOptionList(false);
        location.options.push({
          id: "manage_fileClass_attributes",
          actionLabel: `<span>Manage <b>${fileClass.name}</b> fileClass fields</span>`,
          action: () => {
            fieldCommandSuggestModal.open();
          },
          icon: "wrench"
        });
      });
      this.addFileClassToFileOption();
      this.addNewFileClassOption();
      if (openAfterCreate)
        location.open();
    } else if (isMenu2(location)) {
      this.openNoteFieldModalOption();
      this.buildFieldOptions();
      this.addSectionSelectModalOption();
      this.addFieldAtCurrentPositionOption();
      this.addFieldAtTheEndOfFrontmatterOption();
      if (dvApi) {
        const currentFieldsNames = genuineKeys(dvApi.page(this.file.path));
        if (![...this.plugin.fieldIndex.filesFields.get(this.file.path) || []].map((field) => field.name).every((fieldName) => currentFieldsNames.includes(fieldName))) {
          this.addAllMissingFieldsAtSection();
        }
      }
      const fileClasses = this.plugin.fieldIndex.filesFileClasses.get(this.file.path) || [];
      fileClasses.forEach((fileClass) => {
        const fileClassOptionsList = new FileClassOptionsList(this.plugin, fileClass.getClassFile(), location, this.file);
        fileClassOptionsList.createExtraOptionList(false);
      });
      this.addFileClassToFileOption();
      this.addNewFileClassOption();
    }
  }
  buildFileClassFieldOptions(field, value) {
    const modal = new InputModal(this.plugin, this.file, field, value);
    modal.titleEl.setText(`Change Value for <${field.name}>`);
    if (isMenu2(this.location)) {
      this.location.addItem((item) => {
        item.setTitle(`Update ${field.name}`);
        item.setIcon("wrench");
        item.onClick(() => modal.open());
        item.setSection("metadata-menu");
      });
    } else if (isSuggest2(this.location)) {
      this.location.options.push({
        id: `update_${field.name}`,
        actionLabel: `<span>Update <b>${field.name}</b></span>`,
        action: () => modal.open(),
        icon: FieldIcon["Input" /* Input */]
      });
    }
    ;
  }
  openNoteFieldModalOption() {
    var _a;
    const lastFileClassName = (_a = this.plugin.fieldIndex.filesFileClassesNames.get(this.file.path)) == null ? void 0 : _a.last();
    if (lastFileClassName) {
      const fileClass = this.plugin.fieldIndex.fileClassesName.get(lastFileClassName);
      if (fileClass) {
        const icon = fileClass.getIcon() || "clipboard-list";
        const noteFieldsComponent = new NoteFieldsComponent(this.plugin, "1", () => {
        }, this.file);
        const action = () => this.plugin.addChild(noteFieldsComponent);
        if (isMenu2(this.location)) {
          this.location.addItem((item) => {
            item.setTitle(`Open fields modal`);
            item.setIcon(icon);
            item.onClick(action);
            item.setSection("metadata-menu");
          });
        } else if (isSuggest2(this.location)) {
          this.location.options.push({
            id: `open_fields_modal`,
            actionLabel: `<span>Open fields modal</span>`,
            action,
            icon
          });
        }
        ;
      }
    }
  }
  buildFieldOptions() {
    Object.keys(this.attributes).forEach((key) => {
      const value = this.attributes[key];
      const field = this.fieldsFromIndex[key];
      if (field) {
        const fieldManager = new FieldManager[field.type](this.plugin, field);
        fieldManager.addFieldOption(key, value, this.file, this.location);
      } else if (key !== "file" && (isSuggest2(this.location) || isMenu2(this.location))) {
        const defaultField = new Field_default(key);
        defaultField.type = "Input" /* Input */;
        if (key === this.plugin.settings.fileClassAlias) {
          this.buildFileClassFieldOptions(defaultField, value);
        } else {
          const fieldManager = new Managers_default.Input(this.plugin, defaultField);
          fieldManager.addFieldOption(key, value || "", this.file, this.location);
        }
      }
    });
  }
  addSectionSelectModalOption() {
    const modal = new chooseSectionModal(this.plugin, this.file, (lineNumber, after, asList, asComment) => FieldManager2.openFieldModal(this.plugin, this.file, void 0, "", lineNumber, after, asList, asComment));
    if (isMenu2(this.location)) {
      this.location.addItem((item) => {
        item.setIcon("enter");
        item.setTitle("Add field at section...");
        item.onClick((evt) => {
          modal.open();
        });
        item.setSection("metadata-menu");
      });
    } else if (isSuggest2(this.location)) {
      this.location.options.push({
        id: "add_field_at_section",
        actionLabel: "Add field at section...",
        action: () => modal.open(),
        icon: "enter"
      });
    }
    ;
  }
  addAllMissingFieldsAtSection() {
    var _a;
    const dvApi = (_a = this.plugin.app.plugins.plugins.dataview) == null ? void 0 : _a.api;
    if (dvApi) {
      const dvFile = dvApi.page(this.file.path);
      const modal = new chooseSectionModal(this.plugin, this.file, (lineNumber, after, asList, asComment) => insertMissingFields(this.plugin, dvFile.file.path, lineNumber, after, asList, asComment));
      if (isMenu2(this.location)) {
        this.location.addItem((item) => {
          item.setIcon("battery-full");
          item.setTitle("Add missing fields at section...");
          item.onClick((evt) => {
            modal.open();
          });
          item.setSection("metadata-menu");
        });
      } else if (isSuggest2(this.location)) {
        this.location.options.push({
          id: "add_missing_fields_at_section",
          actionLabel: "Add missing fields at section...",
          action: () => modal.open(),
          icon: "battery-full"
        });
      }
      ;
    }
  }
  addFieldAtTheEndOfFrontmatterOption() {
    var _a;
    if ((_a = this.plugin.app.metadataCache.getCache(this.file.path)) == null ? void 0 : _a.frontmatter) {
      if (isMenu2(this.location)) {
        this.location.addItem((item) => {
          item.setIcon("pin");
          item.setTitle("Add field in frontmatter");
          item.onClick((evt) => __async(this, null, function* () {
            FieldManager2.openFieldModal(this.plugin, this.file, void 0, "", -1, false, false, false);
          }));
          item.setSection("metadata-menu");
        });
      } else if (isSuggest2(this.location)) {
        this.location.options.push({
          id: "add_field_in_frontmatter",
          actionLabel: "Add a field in frontmatter...",
          action: () => FieldManager2.openFieldModal(this.plugin, this.file, void 0, "", -1, false, false, false),
          icon: "pin"
        });
      }
    }
  }
  addFieldAtCurrentPositionOption() {
    var _a;
    const currentView = this.plugin.app.workspace.getActiveViewOfType(import_obsidian49.MarkdownView);
    const currentLineNumber = currentView == null ? void 0 : currentView.editor.getCursor().line;
    if (currentLineNumber !== void 0 && this.file.path == (currentView == null ? void 0 : currentView.file.path)) {
      const frontmatter = (_a = this.plugin.app.metadataCache.getFileCache(this.file)) == null ? void 0 : _a.frontmatter;
      let lineNumber = currentLineNumber;
      if (frontmatter) {
        const { position: { start: start2, end: end2 } } = frontmatter;
        if (currentLineNumber >= start2.line && currentLineNumber < end2.line)
          lineNumber = -1;
      }
      if (isMenu2(this.location)) {
        this.location.addItem((item) => {
          item.setIcon("pin");
          item.setTitle("Add field at cursor");
          item.onClick((evt) => {
            FieldManager2.openFieldModal(this.plugin, this.file, void 0, "", lineNumber, false, false, false);
          });
          item.setSection("metadata-menu");
        });
      } else if (isInsertFieldCommand2(this.location)) {
        FieldManager2.openFieldModal(this.plugin, this.file, void 0, "", lineNumber, false, false, false);
      } else if (isSuggest2(this.location)) {
        this.location.options.push({
          id: "add_field_at_cursor",
          actionLabel: "Add field at cursor...",
          action: () => FieldManager2.openFieldModal(this.plugin, this.file, void 0, "", lineNumber, false, false, false),
          icon: "pin"
        });
      }
      ;
    }
  }
  addFileClassToFileOption() {
    const modal = new AddFileClassToFileModal(this.plugin, this.file);
    const action = () => modal.open();
    if (isMenu2(this.location)) {
      this.location.addItem((item) => {
        item.setIcon("plus-square");
        item.setTitle(`Add ${this.plugin.settings.fileClassAlias} to ${this.file.basename}`);
        item.onClick(action);
        item.setSection("metadata-menu-fileclass");
      });
    } else if (isSuggest2(this.location)) {
      this.location.options.push({
        id: "add_fileclass_to_file",
        actionLabel: `Add ${this.plugin.settings.fileClassAlias} to ${this.file.basename}`,
        action,
        icon: "plus-square"
      });
    }
    ;
  }
  addNewFileClassOption() {
    const modal = new AddNewFileClassModal(this.plugin);
    const action = () => modal.open();
    if (this.plugin.settings.classFilesPath) {
      if (isMenu2(this.location)) {
        this.location.addItem((item) => {
          item.setIcon("file-plus-2");
          item.setTitle(`Add a new ${this.plugin.settings.fileClassAlias}`);
          item.onClick(action);
          item.setSection("metadata-menu-fileclass");
        });
      } else if (isSuggest2(this.location)) {
        this.location.options.push({
          id: "add_new_fileclass",
          actionLabel: `Add a new ${this.plugin.settings.fileClassAlias}`,
          action,
          icon: "file-plus-2"
        });
      }
    }
  }
};

// src/commands/paletteCommands.ts
function addFileClassAttributeOptions(plugin) {
  const classFilesPath = plugin.settings.classFilesPath;
  plugin.addCommand({
    id: "fileClassAttr_options",
    name: "All fileClass attributes options",
    icon: "gear",
    checkCallback: (checking) => {
      const view = plugin.app.workspace.getActiveViewOfType(import_obsidian50.MarkdownView);
      const inFileClass = !!(classFilesPath && !!(view == null ? void 0 : view.file) && view.file.path.startsWith(classFilesPath));
      if (checking) {
        return inFileClass;
      }
      if (inFileClass) {
        const fieldCommandSuggestModal = new FieldCommandSuggestModal(plugin.app);
        const optionsList = new FileClassOptionsList(plugin, view.file, fieldCommandSuggestModal);
        optionsList.createExtraOptionList();
      }
    }
  });
}
function addInsertFileClassAttribute(plugin) {
  const classFilesPath = plugin.settings.classFilesPath;
  plugin.addCommand({
    id: "insert_fileClassAttr",
    name: "Insert a new fileClass attribute",
    icon: "list-plus",
    checkCallback: (checking) => {
      const view = plugin.app.workspace.getActiveViewOfType(import_obsidian50.MarkdownView);
      const inFileClass = !!(classFilesPath && !!(view == null ? void 0 : view.file) && view.file.path.startsWith(classFilesPath));
      if (checking) {
        return inFileClass;
      }
      if (inFileClass) {
        try {
          const fileClassName = FileClass.getFileClassNameFromPath(plugin, view.file.path);
          if (fileClassName) {
            const fileClassAttributeModal = new FileClassAttributeModal(plugin, FileClass.createFileClass(plugin, fileClassName));
            fileClassAttributeModal.open();
          }
        } catch (error) {
          new import_obsidian50.Notice("plugin is not a valid fileClass");
        }
      }
    }
  });
}
function addInsertFieldAtPositionCommand(plugin) {
  const classFilesPath = plugin.settings.classFilesPath;
  plugin.addCommand({
    id: "insert_field_at_cursor",
    name: "Choose a field to insert at cursor",
    icon: "list-plus",
    checkCallback: (checking) => {
      const view = plugin.app.workspace.getActiveViewOfType(import_obsidian50.MarkdownView);
      const inFile = !!((view == null ? void 0 : view.file) && (!classFilesPath || !view.file.path.startsWith(classFilesPath)));
      if (checking) {
        return inFile;
      }
      if (inFile) {
        const optionsList = new OptionsList(plugin, view.file, "InsertFieldCommand");
        optionsList.createExtraOptionList();
      }
    }
  });
}
function addFieldOptionsCommand(plugin) {
  const classFilesPath = plugin.settings.classFilesPath;
  plugin.addCommand({
    id: "field_options",
    name: "Fields options",
    icon: "gear",
    checkCallback: (checking) => {
      const view = plugin.app.workspace.getActiveViewOfType(import_obsidian50.MarkdownView);
      const inFile = !!((view == null ? void 0 : view.file) && (!classFilesPath || !view.file.path.startsWith(classFilesPath)));
      if (checking) {
        return inFile;
      }
      if (inFile) {
        const fieldCommandSuggestModal = new FieldCommandSuggestModal(plugin.app);
        const optionsList = new OptionsList(plugin, view.file, fieldCommandSuggestModal);
        optionsList.createExtraOptionList();
      }
    }
  });
}
function addManageFieldAtCursorCommand(plugin) {
  const classFilesPath = plugin.settings.classFilesPath;
  plugin.addCommand({
    id: "field_at_cursor_options",
    name: "Manage field at cursor",
    icon: "text-cursor-input",
    checkCallback: (checking) => {
      var _a;
      const view = plugin.app.workspace.getActiveViewOfType(import_obsidian50.MarkdownView);
      const editor = view == null ? void 0 : view.editor;
      const inFile = !!((view == null ? void 0 : view.file) && (!classFilesPath || !view.file.path.startsWith(classFilesPath)));
      if (checking) {
        return inFile && editor !== void 0;
      }
      if (inFile && editor !== void 0) {
        const optionsList = new OptionsList(plugin, view.file, "ManageAtCursorCommand");
        const frontmatter = (_a = plugin.app.metadataCache.getFileCache(view.file)) == null ? void 0 : _a.frontmatter;
        if (frontmatter && editor && editor.getCursor().line > frontmatter.position.start.line && editor.getCursor().line < frontmatter.position.end.line) {
          const attribute = frontMatterLineField(editor.getLine(editor.getCursor().line));
          if (attribute)
            optionsList.createAndOpenFieldModal(attribute);
        } else if (editor) {
          const { attribute, values } = getLineFields(editor.getLine(editor.getCursor().line)).find((field) => editor.getCursor().ch <= field.index + field.length && editor.getCursor().ch >= field.index) || {};
          if (attribute)
            optionsList.createAndOpenFieldModal(attribute);
        }
      }
    }
  });
}
function insertMissingFieldsCommand(plugin) {
  const classFilesPath = plugin.settings.classFilesPath;
  plugin.addCommand({
    id: "insert_missing_fields",
    name: "Bulk insert missing fields",
    icon: "battery-full",
    checkCallback: (checking) => {
      var _a;
      const view = plugin.app.workspace.getActiveViewOfType(import_obsidian50.MarkdownView);
      const inFile = !!((view == null ? void 0 : view.file) && (!classFilesPath || !view.file.path.startsWith(classFilesPath)));
      if (checking) {
        return inFile;
      }
      const dvApi = (_a = plugin.app.plugins.plugins.dataview) == null ? void 0 : _a.api;
      if (dvApi && inFile) {
        const file = view.file;
        const currentFieldsNames = genuineKeys(dvApi.page(file.path));
        if (![...plugin.fieldIndex.filesFields.get(file.path) || []].map((field) => field.name).every((fieldName) => currentFieldsNames.includes(fieldName))) {
          new chooseSectionModal(plugin, file, (lineNumber, after, asList, asComment) => insertMissingFields(plugin, file.path, lineNumber, after, asList, asComment)).open();
        }
      }
    }
  });
}
function addOpenFieldsModalCommand(plugin) {
  const classFilesPath = plugin.settings.classFilesPath;
  plugin.addCommand({
    id: "open_fields_modal",
    name: "Open this note's fields modal",
    icon: "clipboard-list",
    checkCallback: (checking) => {
      const view = plugin.app.workspace.getActiveViewOfType(import_obsidian50.MarkdownView);
      const inFile = !!((view == null ? void 0 : view.file) && (!classFilesPath || !view.file.path.startsWith(classFilesPath)));
      if (checking) {
        return inFile;
      }
      if (inFile) {
        const file = view.file;
        if (inFile && file instanceof import_obsidian50.TFile && file.extension === "md") {
          const noteFieldsComponent = new NoteFieldsComponent(plugin, "1", () => {
          }, file);
          plugin.addChild(noteFieldsComponent);
        }
      }
    }
  });
}
function addInsertFieldCommand(plugin) {
  const fields = [];
  plugin.settings.presetFields.forEach((f) => {
    if (f.command)
      fields.push(f);
  });
  [...plugin.fieldIndex.fileClassesFields].forEach(([fileClassName, _fields]) => {
    _fields.forEach((field) => {
      if (field.command) {
        fields.push(field);
      }
    });
  });
  fields.forEach((field) => {
    if (field.command) {
      const command = field.command;
      plugin.addCommand({
        id: command.id,
        name: command.label,
        icon: command.icon,
        checkCallback: (checking) => {
          var _a;
          const view = plugin.app.workspace.getActiveViewOfType(import_obsidian50.MarkdownView);
          const fR = command.id.match(new RegExp("insert__(?<fileClassName>.*)__(?<fieldName>.*)"));
          if (checking) {
            const fileClasses = (view == null ? void 0 : view.file) ? plugin.fieldIndex.filesFileClasses.get(view == null ? void 0 : view.file.path) : void 0;
            return (view == null ? void 0 : view.file) && (fileClasses && fileClasses.some((fileClass) => {
              var _a2;
              return fileClass.name === ((_a2 = fR == null ? void 0 : fR.groups) == null ? void 0 : _a2.fileClassName);
            }) || !fileClasses && ((_a = fR == null ? void 0 : fR.groups) == null ? void 0 : _a.fileClassName) === "presetField");
          }
          if ((fR == null ? void 0 : fR.groups) && (view == null ? void 0 : view.file)) {
            const fieldName = fR.groups.fieldName;
            new chooseSectionModal(plugin, view.file, (lineNumber, after, asList, asComment) => FieldManager2.openFieldModal(plugin, view.file, fieldName, "", lineNumber, after, asList, asComment)).open();
          }
        }
      });
    }
  });
}
function addFileClassTableViewCommand(plugin) {
  plugin.addCommand({
    id: "open_fileclass_view",
    name: "Open fileClass view",
    icon: "file-spreadsheet",
    checkCallback: (checking) => {
      var _a;
      if (checking) {
        return true;
      }
      const activeFilePath = (_a = plugin.app.workspace.getActiveFile()) == null ? void 0 : _a.path;
      const fileClass = activeFilePath ? plugin.fieldIndex.fileClassesPath.get(activeFilePath) : void 0;
      const fileClassComponent = new FileClassManager(plugin, fileClass);
      plugin.addChild(fileClassComponent);
    }
  });
}
function addUpdateLookupsAndFormulas(plugin) {
  plugin.addCommand({
    id: "update_all_lookups",
    name: "Update all lookups and formulas",
    icon: "file-search",
    checkCallback: (checking) => {
      if (checking)
        return true;
      plugin.fieldIndex.fullIndex("command", true);
    }
  });
}
function addUpdateFileLookupsCommand(plugin) {
  const classFilesPath = plugin.settings.classFilesPath;
  plugin.addCommand({
    id: "update_file_lookups",
    name: "Update active file lookups fields",
    icon: "file-search",
    checkCallback: (checking) => {
      var _a;
      const view = plugin.app.workspace.getActiveViewOfType(import_obsidian50.MarkdownView);
      const inFile = !!((view == null ? void 0 : view.file) && (!classFilesPath || !view.file.path.startsWith(classFilesPath)));
      if (checking) {
        return inFile;
      }
      if (inFile) {
        const file = view.file;
        if (inFile && file instanceof import_obsidian50.TFile && file.extension === "md") {
          const lookupFields = (_a = plugin.fieldIndex.filesFields.get(file.path)) == null ? void 0 : _a.filter((field) => field.type === "Lookup" /* Lookup */);
          lookupFields == null ? void 0 : lookupFields.forEach((field) => __async(this, null, function* () {
            yield updateLookups(plugin, "single_command", { file, fieldName: field.name });
          }));
        }
      }
    }
  });
}
function addUpdateFileFormulasCommand(plugin) {
  const classFilesPath = plugin.settings.classFilesPath;
  plugin.addCommand({
    id: "update_file_formulas",
    name: "Update active file formulas fields",
    icon: "function-square",
    checkCallback: (checking) => {
      var _a;
      const view = plugin.app.workspace.getActiveViewOfType(import_obsidian50.MarkdownView);
      const inFile = !!((view == null ? void 0 : view.file) && (!classFilesPath || !view.file.path.startsWith(classFilesPath)));
      if (checking) {
        return inFile;
      }
      if (inFile) {
        const file = view.file;
        if (inFile && file instanceof import_obsidian50.TFile && file.extension === "md") {
          const formulaFields = (_a = plugin.fieldIndex.filesFields.get(file.path)) == null ? void 0 : _a.filter((field) => field.type === "Formula" /* Formula */);
          formulaFields == null ? void 0 : formulaFields.forEach((field) => __async(this, null, function* () {
            yield updateFormulas(plugin, { file, fieldName: field.name });
          }));
        }
      }
    }
  });
}
function addCommands(plugin, view) {
  const classFilesPath = plugin.settings.classFilesPath;
  if (view && view instanceof import_obsidian50.FileView) {
    const file = plugin.app.vault.getAbstractFileByPath(view.file.path);
    if (file instanceof import_obsidian50.TFile && file.extension === "md") {
      if (classFilesPath && file.path.startsWith(classFilesPath)) {
        addFileClassAttributeOptions(plugin);
        addInsertFileClassAttribute(plugin);
      } else {
        addFieldOptionsCommand(plugin);
        addInsertFieldAtPositionCommand(plugin);
        addManageFieldAtCursorCommand(plugin);
        insertMissingFieldsCommand(plugin);
        addOpenFieldsModalCommand(plugin);
        addInsertFieldCommand(plugin);
        addUpdateFileLookupsCommand(plugin);
        addUpdateFileFormulasCommand(plugin);
      }
    }
  }
  addFileClassTableViewCommand(plugin);
  addUpdateLookupsAndFormulas(plugin);
}

// src/components/ContextMenu.ts
var import_obsidian51 = require("obsidian");
var ContextMenu = class extends import_obsidian51.Component {
  constructor(plugin) {
    super();
    this.plugin = plugin;
  }
  onload() {
    this.plugin.registerEvent(this.plugin.app.workspace.on("file-menu", (menu, abstractFile, source) => {
      const file = this.plugin.app.vault.getAbstractFileByPath(abstractFile.path);
      this.buildOptions(file, menu);
    }));
    this.plugin.registerEvent(this.plugin.app.workspace.on("editor-menu", (menu, editor, view) => {
      var _a;
      const file = this.plugin.app.workspace.getActiveFile();
      const includedFields = [];
      const frontmatter = view.file && ((_a = this.plugin.app.metadataCache.getFileCache(view.file)) == null ? void 0 : _a.frontmatter);
      if (frontmatter && editor.getCursor().line > frontmatter.position.start.line && editor.getCursor().line < frontmatter.position.end.line) {
        const attribute = frontMatterLineField(editor.getLine(editor.getCursor().line));
        if (attribute)
          includedFields.push(attribute);
      } else {
        getLineFields(editor.getLine(editor.getCursor().line)).forEach((field) => {
          if (editor.getCursor().ch <= field.index + field.length && editor.getCursor().ch >= field.index) {
            includedFields.push(field.attribute);
          }
        });
      }
      if (includedFields.length) {
        this.buildOptions(file, menu, includedFields);
      } else {
        this.buildOptions(file, menu);
      }
    }));
  }
  buildOptions(file, menu, includedFields) {
    const classFilesPath = this.plugin.settings.classFilesPath;
    if (file instanceof import_obsidian51.TFile && file.extension === "md") {
      if (!import_obsidian51.Platform.isMobile && (0, import_obsidian51.requireApiVersion)("0.16.0")) {
        if (classFilesPath && file.path.startsWith(classFilesPath)) {
          const fileClassName = FileClass.getFileClassNameFromPath(this.plugin, file.path);
          menu.setSectionSubmenu(`metadata-menu-fileclass.${fileClassName}.fileclass-fields`, { title: "Manage fields", icon: "wrench" });
        } else {
          menu.setSectionSubmenu("metadata-menu.current_field", { title: "Current field", icon: "pencil" });
          menu.setSectionSubmenu("metadata-menu.fields", { title: "Manage fields", icon: "pencil" });
          const fileClasses = this.plugin.fieldIndex.filesFileClasses.get(file.path) || [];
          fileClasses.forEach((fileClass) => {
            menu.setSectionSubmenu(`metadata-menu-fileclass.${fileClass.name}.fileclass-fields`, { title: `Manage ${fileClass.name} fields`, icon: "wrench" });
          });
        }
      }
      if (this.plugin.settings.displayFieldsInContextMenu) {
        if (classFilesPath && file.path.startsWith(classFilesPath)) {
          const fileClassOptionsList = new FileClassOptionsList(this.plugin, file, menu);
          fileClassOptionsList.createExtraOptionList();
        } else {
          const optionsList = new OptionsList(this.plugin, file, menu, includedFields);
          optionsList.createExtraOptionList();
        }
        ;
      } else {
        menu.addItem((item) => {
          item.setIcon("list");
          item.setTitle("Field Options");
          item.onClick(() => {
            const fieldCommandSuggestModal = new FieldCommandSuggestModal(this.plugin.app);
            const optionsList = new OptionsList(this.plugin, file, fieldCommandSuggestModal);
            optionsList.createExtraOptionList();
          });
        });
      }
    }
    ;
  }
};

// src/components/ExtraButton.ts
var import_obsidian54 = require("obsidian");

// src/options/linkAttributes.ts
var import_obsidian52 = require("obsidian");
function clearExtraAttributes(link) {
  Object.values(link.attributes).forEach((attr) => {
    if (attr.name.includes("fileclass-name")) {
      link.removeAttribute(attr.name);
      const el = link.nextElementSibling;
      if (el == null ? void 0 : el.hasClass("fileclass-icon")) {
        el.remove();
      }
    }
  });
}
function setLinkMetadataFormButton(plugin, link, destPath, viewTypeName, fileClassName) {
  var _a, _b;
  switch (viewTypeName) {
    case "a.internal-link":
      if (!plugin.settings.enableLinks)
        return;
      break;
    case "tabHeader":
      if (!plugin.settings.enableTabHeader)
        return;
      break;
    case "starred":
      if (!plugin.settings.enableStarred)
        return;
      break;
    case "file-explorer":
      if (!plugin.settings.enableFileExplorer)
        return;
      break;
    case "backlink":
      if (!plugin.settings.enableBacklinks)
        return;
      break;
    case "search":
      if (!plugin.settings.enableSearch)
        return;
      break;
    default:
      return;
  }
  for (const a of link.attributes) {
    if (a.name.includes("fileclass-name") && a.name !== fileClassName) {
      link.removeAttribute(a.name);
      const el = link.nextElementSibling;
      if (el == null ? void 0 : el.hasClass("fileclass-icon")) {
        el.remove();
      }
    }
  }
  const classFilessPath = plugin.settings.classFilesPath;
  const fileClass = plugin.fieldIndex.fileClassesPath.get(destPath + ".md");
  if (classFilessPath && fileClass) {
    const icon = "file-spreadsheet";
    link.setAttribute("fileclass-name", fileClass.name);
    const el = link.nextElementSibling;
    if (!(el == null ? void 0 : el.hasClass("fileclass-icon"))) {
      const metadataMenuBtn = plugin.app.workspace.containerEl.createEl("a", { cls: "metadata-menu fileclass-icon" });
      if (metadataMenuBtn) {
        (0, import_obsidian52.setIcon)(metadataMenuBtn, icon);
        (_a = link.parentElement) == null ? void 0 : _a.insertBefore(metadataMenuBtn, link.nextSibling);
        metadataMenuBtn.onclick = (event) => {
          plugin.addChild(new FileClassManager(plugin, fileClass));
          event.stopPropagation();
        };
      }
    }
  } else if (fileClassName) {
    const fileClass2 = plugin.fieldIndex.fileClassesName.get(fileClassName);
    if (fileClass2) {
      const icon = fileClass2.getIcon();
      link.setAttribute("fileclass-name", fileClassName);
      const el = link.nextElementSibling;
      if (!(el == null ? void 0 : el.hasClass("fileclass-icon"))) {
        const metadataMenuBtn = plugin.app.workspace.containerEl.createEl("a", { cls: "metadata-menu fileclass-icon" });
        if (metadataMenuBtn) {
          (0, import_obsidian52.setIcon)(metadataMenuBtn, icon || plugin.settings.buttonIcon);
          (_b = link.parentElement) == null ? void 0 : _b.insertBefore(metadataMenuBtn, link.nextSibling);
          metadataMenuBtn.onclick = (event) => {
            const file = plugin.app.vault.getAbstractFileByPath(`${destPath}.md`);
            if (file instanceof import_obsidian52.TFile && file.extension === "md") {
              const noteFieldsComponent = new NoteFieldsComponent(plugin, "1", () => {
              }, file);
              plugin.addChild(noteFieldsComponent);
            }
            event.stopPropagation();
          };
        }
      }
    }
  }
}
function updateLinkMetadataMenuFormButton(app2, plugin, link, viewTypeName, source) {
  var _a, _b;
  const linkHref = (_a = link.getAttribute("href")) == null ? void 0 : _a.split("#")[0];
  const dest = linkHref && app2.metadataCache.getFirstLinkpathDest(linkHref, source);
  if (dest) {
    const fileClassName = (_b = plugin.fieldIndex.filesFileClassesNames.get(dest.path)) == null ? void 0 : _b.last();
    setLinkMetadataFormButton(plugin, link, dest.path.replace(/(.*).md/, "$1"), viewTypeName, fileClassName);
  }
}
function updateDivExtraAttributes(app2, plugin, link, viewTypeName, sourceName, _linkName) {
  var _a;
  const linkName = _linkName || link.textContent;
  const dest = linkName && app2.metadataCache.getFirstLinkpathDest((0, import_obsidian52.getLinkpath)(linkName), sourceName);
  if (dest) {
    const fileClassName = (_a = plugin.fieldIndex.filesFileClassesNames.get(dest.path)) == null ? void 0 : _a.last();
    setLinkMetadataFormButton(plugin, link, dest.path.replace(/(.*).md/, "$1"), viewTypeName, fileClassName);
  }
}
function updateElLinks(app2, plugin, el, ctx) {
  const links = el.querySelectorAll("a.internal-link");
  const source = ctx.sourcePath.replace(/(.*).md/, "$1");
  links.forEach((link) => {
    updateLinkMetadataMenuFormButton(app2, plugin, link, "a.internal-link", source);
  });
}
function updateVisibleLinks(app2, plugin) {
  const settings = plugin.settings;
  app2.workspace.iterateRootLeaves((leaf) => {
    if (leaf.view instanceof import_obsidian52.MarkdownView && leaf.view.file) {
      const file = leaf.view.file;
      const cachedFile = app2.metadataCache.getFileCache(file);
      const fileName = file.path.replace(/(.*).md/, "$1");
      const tabHeader = leaf.tabHeaderInnerTitleEl;
      if (settings.enableTabHeader) {
        updateDivExtraAttributes(app2, plugin, tabHeader, "tabHeader", fileName);
      } else {
        clearExtraAttributes(tabHeader);
      }
      if ((cachedFile == null ? void 0 : cachedFile.links) && settings.enableLinks) {
        cachedFile.links.forEach((link) => {
          var _a;
          const dest = app2.metadataCache.getFirstLinkpathDest(link.link, fileName);
          if (dest) {
            const fileClassName = (_a = plugin.fieldIndex.filesFileClassesNames.get(dest.path)) == null ? void 0 : _a.last();
            const internalLinks = leaf.view.containerEl.querySelectorAll(`a.internal-link[href="${link.link}"]`);
            internalLinks.forEach((internalLink) => setLinkMetadataFormButton(plugin, internalLink, dest.path.replace(/(.*).md/, "$1"), `a.internal-link`, fileClassName));
          }
        });
      }
    }
  });
}

// src/components/ExtraButton.ts
var import_state2 = require("@codemirror/state");

// src/options/livePreview.ts
var import_obsidian53 = require("obsidian");
var import_view = require("@codemirror/view");
var import_state = require("@codemirror/state");
var import_language = require("@codemirror/language");
var import_language2 = require("@codemirror/language");
function buildCMViewPlugin(plugin) {
  class HeaderWidget extends import_view.WidgetType {
    constructor(fileClassName, after, destName) {
      super();
      this.fileClassName = fileClassName;
      this.after = after;
      this.destName = destName;
    }
    toDOM() {
      let metadataMenuBtn = document.createElement("span");
      if (this.fileClassName) {
        metadataMenuBtn.setAttr("fileclass-name", this.fileClassName);
        metadataMenuBtn.addClass("fileclass-icon");
        metadataMenuBtn.addClass("metadata-menu");
        let fileClass = plugin.fieldIndex.fileClassesName.get(this.fileClassName);
        const classFilesPath = plugin.settings.classFilesPath;
        if (classFilesPath && this.destName.includes(classFilesPath)) {
          const icon = "file-spreadsheet";
          fileClass = plugin.fieldIndex.fileClassesPath.get(this.destName + ".md");
          if (fileClass) {
            (0, import_obsidian53.setIcon)(metadataMenuBtn, icon || settings.buttonIcon);
            metadataMenuBtn.onclick = (event) => {
              plugin.addChild(new FileClassManager(plugin, fileClass));
              event.stopPropagation();
            };
          }
        } else if (fileClass) {
          const icon = fileClass.getIcon();
          (0, import_obsidian53.setIcon)(metadataMenuBtn, icon || settings.buttonIcon);
          metadataMenuBtn.onclick = (event) => {
            const file = plugin.app.vault.getAbstractFileByPath(`${this.destName}.md`);
            if (file instanceof import_obsidian53.TFile && file.extension === "md") {
              const noteFieldsComponent = new NoteFieldsComponent(plugin, "1", () => {
              }, file);
              plugin.addChild(noteFieldsComponent);
            }
            event.stopPropagation();
          };
        }
      }
      return metadataMenuBtn;
    }
    ignoreEvent() {
      return true;
    }
  }
  const settings = plugin.settings;
  const viewPlugin = import_view.ViewPlugin.fromClass(class {
    constructor(view) {
      this.decorations = this.buildDecorations(view);
    }
    update(update) {
      if (update.docChanged || update.viewportChanged) {
        this.decorations = this.buildDecorations(update.view);
      }
    }
    destroy() {
    }
    buildDecorations(view) {
      let builder = new import_state.RangeSetBuilder();
      if (!settings.enableEditor) {
        return builder.finish();
      }
      const mdView = view.state.field(import_obsidian53.editorViewField);
      let lastAttributes = {};
      let iconDecoAfter = null;
      let iconDecoAfterWhere = null;
      let mdAliasFrom = null;
      let mdAliasTo = null;
      for (let { from, to } of view.visibleRanges) {
        (0, import_language.syntaxTree)(view.state).iterate({
          from,
          to,
          enter: (node) => {
            var _a;
            const tokenProps = node.type.prop(import_language2.tokenClassNodeProp);
            if (tokenProps) {
              const props = new Set(tokenProps.split(" "));
              const isLink = props.has("hmd-internal-link");
              const isAlias = props.has("link-alias");
              const isPipe = props.has("link-alias-pipe");
              const isMDLink = props.has("link");
              const isMDUrl = props.has("url");
              const isMDFormatting = props.has("formatting-link");
              if (isMDLink && !isMDFormatting) {
                mdAliasFrom = node.from;
                mdAliasTo = node.to;
              }
              if (!isPipe && !isAlias) {
                if (iconDecoAfter && iconDecoAfterWhere) {
                  builder.add(iconDecoAfterWhere, iconDecoAfterWhere, iconDecoAfter);
                  iconDecoAfter = null;
                  iconDecoAfterWhere = null;
                }
              }
              if (isLink && !isAlias && !isPipe || isMDUrl) {
                let linkText = view.state.doc.sliceString(node.from, node.to);
                linkText = linkText.split("#")[0];
                let file = plugin.app.metadataCache.getFirstLinkpathDest(linkText, mdView.file.basename);
                if (isMDUrl && !file) {
                  try {
                    file = plugin.app.vault.getAbstractFileByPath(decodeURIComponent(linkText));
                  } catch (e) {
                  }
                }
                if (file) {
                  const fileClassName = (_a = plugin.fieldIndex.filesFileClassesNames.get(file.path)) == null ? void 0 : _a.last();
                  if (fileClassName) {
                    const attributes = { "fileclass-name": fileClassName };
                    let deco = import_view.Decoration.mark({
                      attributes,
                      class: "fileclass-text"
                    });
                    iconDecoAfter = import_view.Decoration.widget({
                      widget: new HeaderWidget(fileClassName, true, file.path.replace(/(.*).md/, "$1"))
                    });
                    if (isMDUrl && mdAliasFrom && mdAliasTo) {
                      let deco2 = import_view.Decoration.mark({
                        attributes,
                        class: "fileclass-text"
                      });
                      builder.add(mdAliasFrom, mdAliasTo, deco2);
                      if (iconDecoAfter) {
                        builder.add(mdAliasTo, mdAliasTo, iconDecoAfter);
                        iconDecoAfter = null;
                        iconDecoAfterWhere = null;
                        mdAliasFrom = null;
                        mdAliasTo = null;
                      }
                    }
                    builder.add(node.from, node.to, deco);
                    lastAttributes = attributes;
                    iconDecoAfterWhere = node.to;
                  }
                }
              } else if (isLink && isAlias) {
                let deco = import_view.Decoration.mark({
                  attributes: lastAttributes,
                  class: "fileclass-text"
                });
                builder.add(node.from, node.to, deco);
                if (iconDecoAfter) {
                  builder.add(node.to, node.to, iconDecoAfter);
                  iconDecoAfter = null;
                  iconDecoAfterWhere = null;
                }
              }
            }
          }
        });
      }
      return builder.finish();
    }
  }, {
    decorations: (v) => v.decorations
  });
  return viewPlugin;
}

// src/components/ExtraButton.ts
var ExtraButton = class extends import_obsidian54.Component {
  constructor(plugin, cacheVersion, onChange) {
    super();
    this.plugin = plugin;
    this.cacheVersion = cacheVersion;
    this.onChange = onChange;
    this.modalObservers = [];
  }
  onload() {
    this.plugin.registerMarkdownPostProcessor((el, ctx) => {
      updateElLinks(this.plugin.app, this.plugin, el, ctx);
    });
    const ext = import_state2.Prec.lowest(buildCMViewPlugin(this.plugin));
    this.plugin.registerEditorExtension(ext);
    this.plugin.registerMarkdownPostProcessor((el, ctx) => {
      updateElLinks(this.plugin.app, this.plugin, el, ctx);
    });
    const plugin = this.plugin;
    const updateLinks = (_file) => {
      updateVisibleLinks(plugin.app, plugin);
      this.observers.forEach(([observer, type, own_class]) => {
        const leaves = plugin.app.workspace.getLeavesOfType(type);
        leaves.forEach((leaf) => {
          this.updateContainer(leaf.view.containerEl, own_class, type);
        });
      });
    };
    this.observers = [];
    this.plugin.app.workspace.onLayoutReady(() => {
      this.initViewObservers();
      this.initModalObservers(document);
      updateVisibleLinks(this.plugin.app, this.plugin);
    });
    this.registerEvent(this.plugin.app.metadataCache.on("changed", (0, import_obsidian54.debounce)(updateLinks, 500, true)));
    this.registerEvent(this.plugin.app.workspace.on("layout-change", (0, import_obsidian54.debounce)(updateLinks, 10, true)));
    this.registerEvent(this.plugin.app.workspace.on("window-open", (window2, win) => this.initModalObservers(window2.getContainer().doc)));
    this.registerEvent(this.plugin.app.workspace.on("layout-change", () => this.initViewObservers()));
    this.registerEvent(this.plugin.app.workspace.on("metadata-menu:indexed", () => this.reloadObservers()));
  }
  initViewObservers() {
    var _a, _b, _c, _d, _e, _f;
    this.observers.forEach(([observer, type]) => {
      observer.disconnect();
    });
    this.observers = [];
    this.registerViewType("backlink", ".tree-item-inner", true);
    this.registerViewType("outgoing-link", ".tree-item-inner", true);
    this.registerViewType("search", ".tree-item-inner", true);
    this.registerViewType("BC-matrix", ".BC-Link");
    this.registerViewType("BC-ducks", ".internal-link");
    this.registerViewType("BC-tree", "a.internal-link");
    this.registerViewType("graph-analysis", ".internal-link");
    this.registerViewType("starred", ".nav-file-title-content", true);
    this.registerViewType("file-explorer", ".nav-file-title-content", true);
    this.registerViewType("recent-files", ".nav-file-title-content", true);
    if ((_f = (_e = (_d = (_c = (_b = (_a = this.plugin.app) == null ? void 0 : _a.internalPlugins) == null ? void 0 : _b.plugins) == null ? void 0 : _c.backlink) == null ? void 0 : _d.instance) == null ? void 0 : _e.options) == null ? void 0 : _f.backlinkInDocument) {
      this.registerViewType("markdown", ".tree-item-inner", true);
    }
  }
  initModalObservers(doc) {
    var _a;
    const config = {
      subtree: false,
      childList: true,
      attributes: false
    };
    this.modalObservers.push(new MutationObserver((records) => {
      records.forEach((mutation) => {
        if (mutation.type === "childList") {
          mutation.addedNodes.forEach((n) => {
            if ("className" in n && (n.className.includes("modal-container") && this.plugin.settings.enableQuickSwitcher || n.className.includes("suggestion-container") && this.plugin.settings.enableSuggestor)) {
              let selector = ".suggestion-title, .suggestion-note, .another-quick-switcher__item__title, .omnisearch-result__title";
              if (n.className.includes("suggestion-container")) {
                selector = ".suggestion-title, .suggestion-note";
              }
              this.updateContainer(n, selector, null);
              this._watchContainer(null, n, selector);
            }
          });
        }
      });
    }));
    (_a = this.modalObservers.last()) == null ? void 0 : _a.observe(doc.body, config);
  }
  registerViewType(viewTypeName, selector, updateDynamic = false) {
    const leaves = this.plugin.app.workspace.getLeavesOfType(viewTypeName);
    if (leaves.length > 1) {
      for (let i = 0; i < leaves.length; i++) {
        const container = leaves[i].view.containerEl;
        if (updateDynamic) {
          this._watchContainerDynamic(viewTypeName + i, container, selector);
        } else {
          this._watchContainer(viewTypeName + i, container, selector);
        }
      }
    } else if (leaves.length < 1)
      return;
    else {
      const container = leaves[0].view.containerEl;
      this.updateContainer(container, selector, viewTypeName);
      if (updateDynamic) {
        this._watchContainerDynamic(viewTypeName, container, selector);
      } else {
        this._watchContainer(viewTypeName, container, selector);
      }
    }
  }
  updateContainer(container, selector, viewTypeName) {
    var _a, _b;
    const nodes = container.findAll(selector);
    for (let i = 0; i < nodes.length; ++i) {
      const el = nodes[i];
      const isCanvasFileLink = (_b = (_a = el.parentElement) == null ? void 0 : _a.getAttr("data-path")) == null ? void 0 : _b.includes(".canvas");
      if (!isCanvasFileLink) {
        updateDivExtraAttributes(this.plugin.app, this.plugin, el, viewTypeName, "");
      }
    }
  }
  removeFromContainer(container, selector) {
    const nodes = container.findAll(selector);
    for (let i = 0; i < nodes.length; ++i) {
      const el = nodes[i];
      clearExtraAttributes(el);
    }
  }
  _watchContainer(viewType, container, selector) {
    let observer = new MutationObserver((records, _) => {
      this.updateContainer(container, selector, viewType);
    });
    observer.observe(container, { subtree: true, childList: true, attributes: false });
    if (viewType) {
      this.observers.push([observer, viewType, selector]);
    }
  }
  _watchContainerDynamic(viewType, container, selector, ownClass = "tree-item-inner", parent_class = "tree-item") {
    let observer = new MutationObserver((records, _) => {
      records.forEach((mutation) => {
        if (mutation.type === "childList") {
          mutation.addedNodes.forEach((n) => {
            if ("className" in n) {
              if (n.className.includes && typeof n.className.includes === "function" && n.className.includes(parent_class)) {
                const fileDivs = n.getElementsByClassName(ownClass);
                for (let i = 0; i < fileDivs.length; ++i) {
                  const link = fileDivs[i];
                  updateDivExtraAttributes(this.plugin.app, this.plugin, link, viewType, "");
                }
              }
            }
          });
        }
      });
    });
    observer.observe(container, { subtree: true, childList: true, attributes: false });
    this.observers.push([observer, viewType, selector]);
  }
  reloadObservers() {
    this.disconnectObservers();
    this.initModalObservers(document);
    this.initViewObservers();
    updateVisibleLinks(this.plugin.app, this.plugin);
  }
  disconnectObservers() {
    this.observers.forEach(([observer, type, own_class]) => {
      observer.disconnect();
      const leaves = this.plugin.app.workspace.getLeavesOfType(type);
      leaves.forEach((leaf) => {
        this.removeFromContainer(leaf.view.containerEl, own_class);
      });
    });
    for (const observer of this.modalObservers) {
      observer.disconnect();
    }
  }
  onunload() {
    this.disconnectObservers();
  }
};

// src/components/FieldIndex.ts
var import_obsidian57 = require("obsidian");

// src/fileClass/FileClassQuery.ts
var import_obsidian55 = require("obsidian");
var FileClassQuery = class {
  constructor(name = "", id = "", query = "", fileClassName = "") {
    this.name = name;
    this.id = id;
    this.query = query;
    this.fileClassName = fileClassName;
  }
  getResults(api) {
    try {
      return new Function("dv", `return ${this.query}`)(api);
    } catch (error) {
      new import_obsidian55.Notice(`Wrong query for <${this.name}>. Check your settings`);
      return [];
    }
  }
  matchFile(file) {
    const dataview = app.plugins.plugins.dataview;
    if (this.query && (dataview == null ? void 0 : dataview.settings.enableDataviewJs) && (dataview == null ? void 0 : dataview.settings.enableInlineDataviewJs)) {
      try {
        const filesPath = this.getResults(dataview.api).values.map((v) => v.file.path);
        return filesPath.includes(file.path);
      } catch (error) {
        return false;
      }
    } else {
      return false;
    }
  }
  static copyProperty(target, source) {
    target.id = source.id;
    target.name = source.name;
    target.query = source.query;
    target.fileClassName = source.fileClassName;
  }
};
var FileClassQuery_default = FileClassQuery;

// src/commands/resolveLookups.ts
function resolveLookups(plugin, source = "") {
  var _a, _b;
  const f = plugin.fieldIndex;
  const lookupQueryResults = /* @__PURE__ */ new Map();
  [...f.lookupQueries].forEach(([lookupName, field]) => {
    const queryRelatedDVFiles = new Function("dv", `return ${field.options.dvQueryString}`)(f.dv.api).values;
    lookupQueryResults.set(lookupName, queryRelatedDVFiles);
  });
  [...f.filesFieldsExists].forEach(([filePath, fields]) => {
    fields.filter((field) => field.type === "Lookup" /* Lookup */).forEach((lookupField) => {
      const queryRelatedDVFiles = lookupQueryResults.get(`${lookupField.fileClassName || "presetField"}___${lookupField.name}`) || [];
      const fileRelatedDVFiles = queryRelatedDVFiles.filter((dvFile) => {
        const targetValue = dvFile[lookupField.options.targetFieldName];
        if (Array.isArray(targetValue)) {
          return targetValue.filter((v) => f.dv.api.value.isLink(v)).map((v) => v.path).includes(filePath);
        } else {
          return (targetValue == null ? void 0 : targetValue.path) === filePath;
        }
      });
      const relatedFieldName = `${filePath}__related__${lookupField.fileClassName || "presetField"}___${lookupField.name}`;
      const existingFileLookupFields = f.fileLookupFiles.get(relatedFieldName);
      f.fileLookupFiles.set(relatedFieldName, fileRelatedDVFiles);
      if (!(f.fileLookupFieldsStatus.get(`${filePath}__${lookupField.name}`) === "changed" /* changed */))
        f.previousFileLookupFilesValues.set(relatedFieldName, (existingFileLookupFields || fileRelatedDVFiles).length);
      f.fileLookupFieldsStatus.set(`${filePath}__${lookupField.name}`, "changed" /* changed */);
    });
  });
  for (let id of f.fileLookupFiles.keys()) {
    const matchRegex = new RegExp("(?<filePath>.*)__related__(?<fileClassName>.*)___(?<fieldName>.*)");
    const { filePath, fileClassName, fieldName } = ((_a = id.match(matchRegex)) == null ? void 0 : _a.groups) || {};
    const existingLookFieldWithNameAndFileClassName = (_b = f.filesFields.get(filePath)) == null ? void 0 : _b.find((field) => field.name === fieldName && (field.fileClassName === void 0 && fileClassName === "presetField" || field.fileClassName === fileClassName));
    const dvPage = f.dv.api.page(filePath);
    if (dvPage === void 0 || dvPage[fieldName] === void 0 || !existingLookFieldWithNameAndFileClassName) {
      f.fileLookupFiles.delete(id);
      f.fileLookupFieldLastValue.delete(id);
      f.fileLookupFieldLastOutputType.delete(id);
      f.previousFileLookupFilesValues.delete(id);
      f.fileLookupFieldsStatus.delete(`${filePath}__${fieldName}`);
    }
  }
}

// src/commands/updateCanvas.ts
var import_obsidian56 = require("obsidian");
function updateCanvas(plugin, forceUpdateOne) {
  return __async(this, null, function* () {
    var _a;
    const start2 = Date.now();
    const f = plugin.fieldIndex;
    const dvApi = (_a = plugin.app.plugins.plugins.dataview) == null ? void 0 : _a.api;
    const canvases = forceUpdateOne ? [forceUpdateOne.canvas] : plugin.app.vault.getFiles().filter((t) => t.extension === "canvas");
    const isNodeInGroup = (node, group) => {
      const { x: x1, y: y1, width: w1, height: h1 } = node;
      const { x: x2, y: y2, width: w2, height: h2 } = group;
      return x2 <= x1 && y2 <= y1 && x2 + w2 >= x1 + w1 && y2 + h2 >= y1 + h1;
    };
    const orientedEdges = (direction, edges, node) => {
      switch (direction) {
        case "incoming":
          return edges.filter((edge) => edge.toNode === node.id);
        case "outgoing":
          return edges.filter((edge) => edge.fromNode === node.id);
        case "bothsides":
          return edges.filter((edge) => edge.fromNode === node.id || edge.toNode === node.id);
        default:
          return [];
      }
    };
    const targetNode = (direction, edge, nodes, currentNode) => {
      switch (direction) {
        case "incoming":
          return nodes.find((node) => node.id !== currentNode.id && node.id === edge.fromNode);
        case "outgoing":
          return nodes.find((node) => node.id !== currentNode.id && node.id === edge.toNode);
        case "bothsides":
          return nodes.find((node) => node.id !== currentNode.id && (node.id === edge.toNode || node.id === edge.fromNode));
        default:
          return void 0;
      }
    };
    canvases.forEach((canvas) => __async(this, null, function* () {
      const previousFilesPaths = plugin.fieldIndex.canvasLastFiles.get(canvas.path) || [];
      const currentFilesPaths = [];
      let { nodes, edges } = { nodes: [], edges: [] };
      try {
        const canvasContent = JSON.parse(yield plugin.app.vault.read(canvas));
        nodes = canvasContent.nodes;
        edges = canvasContent.edges;
      } catch (error) {
        console.log(error);
        new import_obsidian56.Notice(`Couldn't read ${canvas.path}`);
      }
      const canvasGroups = nodes.filter((node) => node.type === "group");
      const currentFiles = /* @__PURE__ */ new Map();
      nodes.forEach((node) => __async(this, null, function* () {
        var _a2, _b;
        if (node.type === "file" && dvApi) {
          const { cumulatedLinksFields, cumulatedGroupsFields } = currentFiles.get(node.file) || {
            cumulatedGroupsFields: /* @__PURE__ */ new Map(),
            cumulatedLinksFields: /* @__PURE__ */ new Map()
          };
          const targetFilePath = node.file;
          if (!currentFilesPaths.includes(targetFilePath))
            currentFilesPaths.push(targetFilePath);
          const linksFields = (_a2 = f.filesFields.get(targetFilePath)) == null ? void 0 : _a2.filter((field) => field.type === "Canvas" /* Canvas */ && field.options.canvasPath === canvas.path);
          const groupsFields = (_b = f.filesFields.get(targetFilePath)) == null ? void 0 : _b.filter((field) => field.type === "CanvasGroup" /* CanvasGroup */ && field.options.canvasPath === canvas.path);
          linksFields == null ? void 0 : linksFields.forEach((field) => {
            const { nodeColors, edgeColors, edgeFromSides, edgeToSides, edgeLabels, filesFromDVQuery, direction } = field.options;
            const matchingFiles = filesFromDVQuery ? new Function("dv", "current", `return ${filesFromDVQuery}`)(dvApi, dvApi.page(targetFilePath)) : void 0;
            const matchingEdges = orientedEdges(direction, edges, node);
            const linkNodes = matchingEdges.filter((edge) => !edgeLabels || edgeLabels.length === 0 || edgeLabels.includes(edge.label)).filter((edge) => !edgeColors || edgeColors.length === 0 || !edge.color && edgeColors.includes("0") || edgeColors.includes(edge.color)).filter((edge) => !edgeFromSides || edgeFromSides.length === 0 || edgeFromSides.includes(edge.fromSide)).filter((edge) => !edgeToSides || edgeToSides.length === 0 || edgeToSides.includes(edge.toSide)).map((edge) => targetNode(direction, edge, nodes, node)).filter((node2) => !!node2 && node2.type === "file").filter((node2) => !nodeColors || nodeColors.length === 0 || !node2.color && nodeColors.includes("0") || nodeColors.includes(node2.color)).filter((node2) => {
              return matchingFiles === void 0 || matchingFiles.map((f2) => f2.file.path).includes(node2.file);
            });
            const uniqueLinkNodes = [...new Map(linkNodes.map((link) => [link.file, link])).values()];
            cumulatedLinksFields.set(field.name, [
              ...cumulatedLinksFields.get(field.name) || [],
              ...uniqueLinkNodes.filter((link) => {
                var _a3;
                return !((_a3 = cumulatedLinksFields.get(field.name)) == null ? void 0 : _a3.map((link2) => link2.id).includes(link.id));
              })
            ]);
          });
          groupsFields == null ? void 0 : groupsFields.forEach((field) => {
            const { groupColors, groupLabels } = field.options;
            const groupNodes = canvasGroups.filter((group) => !groupColors || groupColors.length === 0 || !group.color && groupColors.includes("0") || groupColors.includes(group.color)).filter((group) => !groupLabels || groupLabels.length === 0 || groupLabels.includes(group.label)).filter((group) => isNodeInGroup(node, group));
            cumulatedGroupsFields.set(field.name, [
              ...cumulatedGroupsFields.get(field.name) || [],
              ...groupNodes.filter((group) => {
                var _a3;
                return !((_a3 = cumulatedGroupsFields.get(field.name)) == null ? void 0 : _a3.map((group2) => group2.id).includes(group.id));
              })
            ]);
          });
          currentFiles.set(node.file, { cumulatedLinksFields, cumulatedGroupsFields });
        }
      }));
      currentFiles.forEach((_0, _1) => __async(this, [_0, _1], function* ({ cumulatedLinksFields, cumulatedGroupsFields }, filePath) {
        const file = app.vault.getAbstractFileByPath(filePath);
        if (file && file instanceof import_obsidian56.TFile) {
          const payload = [];
          cumulatedLinksFields.forEach((linkNodes, name) => {
            const values = linkNodes.map((node) => FieldManager2.buildMarkDownLink(plugin, file, node.file));
            payload.push({ name, payload: { value: values ? [...new Set(values)].join(",") : "" } });
          });
          cumulatedGroupsFields.forEach((groupNodes, name) => {
            const values = groupNodes.map((group) => group.label);
            payload.push({ name, payload: { value: values ? [...new Set(values.filter((v) => !!v))].join(",") : "" } });
          });
          if (payload.length)
            yield postValues(plugin, payload, file);
        }
      }));
      previousFilesPaths.filter((f2) => !currentFilesPaths.includes(f2)).forEach((filePath) => __async(this, null, function* () {
        var _a2, _b;
        const targetFile = app.vault.getAbstractFileByPath(filePath);
        if (targetFile && targetFile instanceof import_obsidian56.TFile) {
          const payload = [];
          const canvasFields = (_a2 = f.filesFields.get(filePath)) == null ? void 0 : _a2.filter((field) => field.type === "Canvas" /* Canvas */ && field.options.canvasPath === canvas.path);
          canvasFields == null ? void 0 : canvasFields.forEach((field) => {
            payload.push({ name: field.name, payload: { value: "" } });
          });
          const canvasGroupFields = (_b = f.filesFields.get(filePath)) == null ? void 0 : _b.filter((field) => field.type === "CanvasGroup" /* CanvasGroup */ && field.options.canvasPath === canvas.path);
          canvasFields == null ? void 0 : canvasFields.forEach((field) => {
            payload.push({ name: field.name, payload: { value: "" } });
          });
          canvasGroupFields == null ? void 0 : canvasGroupFields.forEach((field) => {
            payload.push({ name: field.name, payload: { value: "" } });
          });
          if (payload.length)
            yield postValues(plugin, payload, targetFile);
        }
      }));
      plugin.fieldIndex.canvasLastFiles.set(canvas.path, currentFilesPaths);
    }));
  });
}

// src/components/FieldIndex.ts
var FieldIndex = class extends import_obsidian57.Component {
  constructor(plugin, cacheVersion, onChange) {
    super();
    this.plugin = plugin;
    this.cacheVersion = cacheVersion;
    this.onChange = onChange;
    this.fileChanged = false;
    this.dvReady = false;
    this.firstIndexingDone = false;
    this.flushCache();
    this.fileLookupFiles = /* @__PURE__ */ new Map();
    this.fileLookupFieldLastValue = /* @__PURE__ */ new Map();
    this.fileLookupFieldsStatus = /* @__PURE__ */ new Map();
    this.fileFormulaFieldsStatus = /* @__PURE__ */ new Map();
    this.previousFileLookupFilesValues = /* @__PURE__ */ new Map();
    this.fileLookupFieldLastOutputType = /* @__PURE__ */ new Map();
    this.fileFormulaFieldLastValue = /* @__PURE__ */ new Map();
    this.canvasLastFiles = /* @__PURE__ */ new Map();
    this.dv = this.plugin.app.plugins.plugins.dataview;
    this.classFilesPath = plugin.settings.classFilesPath;
  }
  onload() {
    return __async(this, null, function* () {
      var _a;
      this.loadTime = Date.now();
      yield (() => __async(this, null, function* () {
      }))();
      if ((_a = this.dv) == null ? void 0 : _a.api.index.initialized) {
        this.dv = this.plugin.app.plugins.plugins.dataview;
        this.lastRevision = this.dv.api.index.revision;
        this.dvReady = true;
        yield this.fullIndex("dv is running", false);
      }
      this.registerEvent(this.plugin.app.metadataCache.on("dataview:index-ready", () => __async(this, null, function* () {
        this.dv = this.plugin.app.plugins.plugins.dataview;
        this.dvReady = true;
        yield this.fullIndex("dv index", false);
        this.lastRevision = this.dv.api.index.revision;
      })));
      this.registerEvent(this.plugin.app.metadataCache.on("resolved", () => __async(this, null, function* () {
        var _a2;
        if (this.plugin.app.metadataCache.inProgressTaskCount === 0) {
          this.fileChanged = true;
          yield this.fullIndex("cache resolved", false, true);
          this.lastRevision = ((_a2 = this.dv) == null ? void 0 : _a2.api.index.revision) || 0;
        }
      })));
      this.registerEvent(this.plugin.app.vault.on("modify", (file) => __async(this, null, function* () {
        if (file instanceof import_obsidian57.TFile && file.extension === "canvas") {
          yield updateCanvas(this.plugin, { canvas: file });
        }
      })));
      this.registerEvent(this.plugin.app.metadataCache.on("dataview:metadata-change", (op, file) => __async(this, null, function* () {
        var _a2, _b, _c;
        if (op === "update" && this.plugin.app.metadataCache.fileCache[file.path].mtime >= this.loadTime && ((_a2 = this.dv) == null ? void 0 : _a2.api.index.revision) !== this.lastRevision && this.fileChanged && this.dvReady) {
          cleanRemovedFormulasFromIndex(this.plugin);
          this.getFilesFieldsExists(file);
          if (this.classFilesPath && file.path.startsWith(this.classFilesPath)) {
            yield this.fullIndex("fileClass changed");
            const fileClassName = (_b = this.fileClassesPath.get(file.path)) == null ? void 0 : _b.name;
            const canvasFields = fileClassName && ((_c = this.fileClassesFields.get(fileClassName)) == null ? void 0 : _c.filter((field) => field.type === "Canvas" /* Canvas */)) || [];
            canvasFields.forEach((field) => __async(this, null, function* () {
              const canvasFile = this.plugin.app.vault.getAbstractFileByPath(field.options.canvasPath);
              if (canvasFile instanceof import_obsidian57.TFile && canvasFile.extension === "canvas") {
                yield updateCanvas(this.plugin, { canvas: canvasFile });
              }
            }));
          } else {
            yield this.updateFormulas(false);
            this.resolveLookups(false);
            const fileClassName = FileClass.getFileClassNameFromPath(this.plugin, file.path);
            yield this.updateLookups(fileClassName, false, false);
          }
          this.lastRevision = this.dv.api.index.revision;
        }
      })));
      this.plugin.app.workspace.trigger("metadata-menu:indexed");
    });
  }
  flushCache() {
    this.filesFields = /* @__PURE__ */ new Map();
    this.filesFieldsExists = /* @__PURE__ */ new Map();
    this.fileClassesFields = /* @__PURE__ */ new Map();
    this.fieldsFromGlobalFileClass = [];
    this.filesFieldsFromTags = /* @__PURE__ */ new Map();
    this.filesFieldsFromFileClassQueries = /* @__PURE__ */ new Map();
    this.filesFieldsFromInnerFileClasses = /* @__PURE__ */ new Map();
    this.fileClassesPath = /* @__PURE__ */ new Map();
    this.fileClassesName = /* @__PURE__ */ new Map();
    this.fileClassesAncestors = /* @__PURE__ */ new Map();
    this.valuesListNotePathValues = /* @__PURE__ */ new Map();
    this.tagsMatchingFileClasses = /* @__PURE__ */ new Map();
    this.filesFileClasses = /* @__PURE__ */ new Map();
    this.filesFileClassesNames = /* @__PURE__ */ new Map();
    this.lookupQueries = /* @__PURE__ */ new Map();
  }
  fullIndex(event, force_update_all = false, without_lookups = false) {
    return __async(this, null, function* () {
      let start2 = Date.now(), time = Date.now();
      this.flushCache();
      this.getFileClassesAncestors();
      this.getGlobalFileClass();
      this.getFileClasses();
      this.getLookupQueries();
      this.resolveFileClassMatchingTags();
      this.resolveFileClassQueries();
      this.getFilesFieldsFromFileClass();
      this.getFilesFields();
      this.getFilesFieldsExists();
      yield this.getCanvasesFiles();
      yield this.getValuesListNotePathValues();
      this.resolveLookups(without_lookups);
      yield this.updateLookups("full Index", without_lookups, force_update_all);
      if (force_update_all || !this.firstIndexingDone)
        yield this.updateFormulas(force_update_all);
      this.firstIndexingDone = true;
      this.plugin.app.workspace.trigger("metadata-menu:updated-index");
    });
  }
  resolveLookups(without_lookups) {
    if (!without_lookups)
      resolveLookups(this.plugin);
  }
  getCanvasesFiles() {
    return __async(this, null, function* () {
      const canvases = this.plugin.app.vault.getFiles().filter((t) => t.extension === "canvas");
      canvases.forEach((canvas) => __async(this, null, function* () {
        const currentFilesPaths = [];
        let { nodes, edges } = { nodes: [], edges: [] };
        try {
          const canvasContent = JSON.parse(yield this.plugin.app.vault.read(canvas));
          nodes = canvasContent.nodes;
          edges = canvasContent.edges;
        } catch (error) {
          console.log(error);
          new import_obsidian57.Notice(`Couldn't read ${canvas.path}`);
        }
        nodes == null ? void 0 : nodes.forEach((node) => __async(this, null, function* () {
          if (node.type === "file") {
            const targetFilePath = node.file;
            if (!currentFilesPaths.includes(targetFilePath))
              currentFilesPaths.push(targetFilePath);
          }
        }));
        this.canvasLastFiles.set(canvas.path, currentFilesPaths);
      }));
    });
  }
  updateLookups(source = "", without_lookups, force_update_all) {
    return __async(this, null, function* () {
      if (!without_lookups) {
        if (force_update_all) {
          yield updateLookups(this.plugin, source, void 0, true);
        } else {
          yield updateLookups(this.plugin, source);
        }
      }
    });
  }
  updateFormulas(force_update_all) {
    return __async(this, null, function* () {
      yield updateFormulas(this.plugin, void 0, force_update_all);
    });
  }
  getValuesListNotePathValues() {
    return __async(this, null, function* () {
      this.fileClassesName.forEach((fileClass) => {
        fileClass.attributes.forEach((attr) => __async(this, null, function* () {
          if (typeof attr.options === "object" && !!attr.options["valuesListNotePath"]) {
            this.valuesListNotePathValues.set(attr.options.valuesListNotePath, yield FieldSetting.getValuesListFromNote(this.plugin, attr.options.valuesListNotePath));
          }
        }));
      });
      this.plugin.settings.presetFields.forEach((setting) => __async(this, null, function* () {
        if (setting.options.valuesListNotePath) {
          this.valuesListNotePathValues.set(setting.options.valuesListNotePath, yield FieldSetting.getValuesListFromNote(this.plugin, setting.options.valuesListNotePath));
        }
      }));
    });
  }
  getFileClassesAncestors() {
    const classFilesPath = this.plugin.settings.classFilesPath;
    if (classFilesPath) {
      this.plugin.app.vault.getMarkdownFiles().filter((f) => f.path.includes(classFilesPath)).forEach((f) => {
        var _a, _b;
        const fileClassName = FileClass.getFileClassNameFromPath(this.plugin, f.path);
        if (fileClassName) {
          const parent = (_b = (_a = this.plugin.app.metadataCache.getFileCache(f)) == null ? void 0 : _a.frontmatter) == null ? void 0 : _b.extends;
          if (parent) {
            const parentFile = this.plugin.app.vault.getAbstractFileByPath(`${classFilesPath}${parent}.md`);
            if (parentFile) {
              this.fileClassesAncestors.set(fileClassName, [parent]);
            } else {
              this.fileClassesAncestors.set(fileClassName, []);
            }
          } else {
            this.fileClassesAncestors.set(fileClassName, []);
          }
        }
      });
    }
    [...this.fileClassesAncestors].forEach(([fileClassName, ancestors]) => {
      if (ancestors.length > 0) {
        this.getAncestorsRecursively(fileClassName);
      }
    });
  }
  getAncestorsRecursively(fileClassName) {
    var _a;
    const ancestors = this.fileClassesAncestors.get(fileClassName);
    if (ancestors && ancestors.length) {
      const lastAncestor = ancestors.last();
      const lastAncestorParent = (_a = this.fileClassesAncestors.get(lastAncestor)) == null ? void 0 : _a[0];
      if (lastAncestorParent && lastAncestorParent !== fileClassName) {
        this.fileClassesAncestors.set(fileClassName, [...ancestors, lastAncestorParent]);
        this.getAncestorsRecursively(fileClassName);
      }
    }
  }
  getGlobalFileClass() {
    const globalFileClass = this.plugin.settings.globalFileClass;
    if (!globalFileClass) {
      this.fieldsFromGlobalFileClass = [];
    } else {
      try {
        this.fieldsFromGlobalFileClass = FileClass.createFileClass(this.plugin, globalFileClass).attributes.map((attr) => attr.getField());
      } catch (error) {
      }
    }
  }
  getFileClasses() {
    const classFilesPath = this.classFilesPath;
    if (classFilesPath) {
      this.plugin.app.vault.getMarkdownFiles().filter((f) => f.path.includes(classFilesPath)).forEach((f) => {
        var _a, _b, _c;
        const fileClassName = FileClass.getFileClassNameFromPath(this.plugin, f.path);
        if (fileClassName) {
          try {
            const fileClass = FileClass.createFileClass(this.plugin, fileClassName);
            this.fileClassesFields.set(fileClassName, fileClass.attributes.map((attr) => attr.getField()));
            this.fileClassesPath.set(f.path, fileClass);
            this.fileClassesName.set(fileClass.name, fileClass);
            const cache = this.plugin.app.metadataCache.getFileCache(f);
            if ((_a = cache == null ? void 0 : cache.frontmatter) == null ? void 0 : _a.mapWithTag) {
              if ((_b = cache == null ? void 0 : cache.frontmatter) == null ? void 0 : _b.tagNames) {
                const _tagNames = (_c = cache == null ? void 0 : cache.frontmatter) == null ? void 0 : _c.tagNames;
                const tagNames = Array.isArray(_tagNames) ? [..._tagNames] : _tagNames.split(",").map((t) => t.trim());
                tagNames.forEach((tag) => {
                  if (!tag.includes(" ")) {
                    this.tagsMatchingFileClasses.set(tag, fileClass);
                  }
                });
              } else if (!fileClassName.includes(" ")) {
                this.tagsMatchingFileClasses.set(fileClassName, fileClass);
              }
            }
          } catch (error) {
          }
        }
      });
    }
  }
  getLookupQueries() {
    this.plugin.settings.presetFields.filter((field) => field.type === "Lookup" /* Lookup */).forEach((field) => {
      this.lookupQueries.set(`presetField___${field.name}`, field);
    });
    [...this.fileClassesFields].forEach(([fileClassName, fields]) => {
      fields.filter((field) => field.type === "Lookup" /* Lookup */).forEach((field) => {
        this.lookupQueries.set(`${fileClassName}___${field.name}`, field);
      });
    });
  }
  resolveFileClassMatchingTags() {
    if (![...this.tagsMatchingFileClasses].length)
      return;
    const mappedTags = [...this.tagsMatchingFileClasses.keys()];
    const filesWithMappedTagQuery = mappedTags.map((t) => `#${t}`).join(" or ");
    this.dv.api.pages(filesWithMappedTagQuery).forEach((dvFile) => {
      dvFile.file.tags.forEach((_tag) => {
        const tag = _tag.replace(/^\#/, "");
        const fileClass = this.tagsMatchingFileClasses.get(tag);
        const filePath = dvFile.file.path;
        if (fileClass) {
          this.filesFileClasses.set(filePath, [.../* @__PURE__ */ new Set([...this.filesFileClasses.get(filePath) || [], fileClass])]);
          this.filesFileClassesNames.set(dvFile.file.path, [.../* @__PURE__ */ new Set([...this.filesFileClassesNames.get(filePath) || [], fileClass.name])]);
          const fileFileClassesFieldsFromTag = this.fileClassesFields.get(fileClass.name);
          const currentFields = this.filesFieldsFromTags.get(filePath);
          if (fileFileClassesFieldsFromTag) {
            const newFields = [...fileFileClassesFieldsFromTag];
            const filteredCurrentFields = (currentFields == null ? void 0 : currentFields.filter((field) => !newFields.map((f) => f.name).includes(field.name))) || [];
            newFields.push(...filteredCurrentFields);
            this.filesFieldsFromTags.set(filePath, newFields);
          }
        }
      });
    });
  }
  resolveFileClassQueries() {
    var _a;
    const dvApi = (_a = this.plugin.app.plugins.plugins.dataview) == null ? void 0 : _a.api;
    this.plugin.settings.fileClassQueries.forEach((sfcq) => {
      const fcq = new FileClassQuery_default(sfcq.name, sfcq.id, sfcq.query, sfcq.fileClassName);
      fcq.getResults(dvApi).forEach((result) => {
        const fileClass = this.fileClassesName.get(fcq.fileClassName);
        if (fileClass) {
          const f = result.file;
          this.filesFileClasses.set(f.path, [.../* @__PURE__ */ new Set([...this.filesFileClasses.get(f.path) || [], fileClass])]);
          this.filesFileClassesNames.set(f.path, [.../* @__PURE__ */ new Set([...this.filesFileClassesNames.get(f.path) || [], fileClass.name])]);
        }
        const fileFileClassesFieldsFromQuery = this.fileClassesFields.get(fcq.fileClassName);
        if (fileFileClassesFieldsFromQuery)
          this.filesFieldsFromFileClassQueries.set(result.file.path, fileFileClassesFieldsFromQuery);
      });
    });
  }
  getFilesFieldsFromFileClass() {
    this.plugin.app.vault.getMarkdownFiles().filter((f) => !this.classFilesPath || !f.path.includes(this.classFilesPath)).forEach((f) => {
      var _a, _b;
      const fileFileClassesNames = [];
      const fileClassesCache = (_b = (_a = this.plugin.app.metadataCache.getFileCache(f)) == null ? void 0 : _a.frontmatter) == null ? void 0 : _b[this.plugin.settings.fileClassAlias];
      if (fileClassesCache) {
        Array.isArray(fileClassesCache) ? fileFileClassesNames.push(...fileClassesCache) : fileFileClassesNames.push(...fileClassesCache.split(",").map((fcn) => fcn.trim()));
        fileFileClassesNames.forEach((fileFileClassName) => {
          const fileClass = this.fileClassesName.get(fileFileClassName);
          if (fileClass) {
            this.filesFileClasses.set(f.path, [.../* @__PURE__ */ new Set([...this.filesFileClasses.get(f.path) || [], fileClass])]);
            this.filesFileClassesNames.set(f.path, [.../* @__PURE__ */ new Set([...this.filesFileClassesNames.get(f.path) || [], fileClass.name])]);
            const fileClassesFieldsFromFile = this.fileClassesFields.get(fileFileClassName);
            const currentFields = this.filesFieldsFromInnerFileClasses.get(f.path);
            if (fileClassesFieldsFromFile) {
              const newFields = [...fileClassesFieldsFromFile];
              const filteredCurrentFields = (currentFields == null ? void 0 : currentFields.filter((field) => !newFields.map((f2) => f2.name).includes(field.name))) || [];
              newFields.push(...filteredCurrentFields);
              this.filesFieldsFromInnerFileClasses.set(f.path, newFields);
            } else {
              this.filesFieldsFromInnerFileClasses.set(f.path, []);
            }
          } else {
            this.filesFieldsFromInnerFileClasses.set(f.path, []);
          }
        });
      } else {
        this.filesFieldsFromInnerFileClasses.set(f.path, []);
      }
    });
  }
  getFilesFields() {
    this.plugin.app.vault.getMarkdownFiles().filter((f) => !this.classFilesPath || !f.path.includes(this.classFilesPath)).forEach((f) => {
      const fileFieldsFromInnerFileClasses = this.filesFieldsFromInnerFileClasses.get(f.path);
      const fileFieldsFromQuery = this.filesFieldsFromFileClassQueries.get(f.path);
      const fileFieldsFromTag = this.filesFieldsFromTags.get(f.path);
      if ((fileFieldsFromInnerFileClasses == null ? void 0 : fileFieldsFromInnerFileClasses.length) || (fileFieldsFromQuery == null ? void 0 : fileFieldsFromQuery.length) || (fileFieldsFromTag == null ? void 0 : fileFieldsFromTag.length)) {
        const filesFields = fileFieldsFromInnerFileClasses || [];
        filesFields.push(...(fileFieldsFromTag || []).filter((field) => !filesFields.map((f2) => f2.name).includes(field.name)));
        filesFields.push(...(fileFieldsFromQuery || []).filter((field) => !filesFields.map((f2) => f2.name).includes(field.name)));
        this.filesFields.set(f.path, filesFields);
      } else if (this.fieldsFromGlobalFileClass.length) {
        this.filesFields.set(f.path, this.fieldsFromGlobalFileClass);
        this.filesFileClasses.set(f.path, [this.fileClassesName.get(this.plugin.settings.globalFileClass)]);
        this.filesFileClassesNames.set(f.path, [this.plugin.settings.globalFileClass]);
      } else {
        const fields = this.plugin.settings.presetFields.map((prop) => {
          const property = new Field_default();
          return Object.assign(property, prop);
        });
        this.filesFields.set(f.path, fields);
      }
    });
  }
  getFilesFieldsExists(file) {
    let fileFields2;
    if (file) {
      fileFields2 = [[file.path, this.filesFields.get(file.path) || []]];
    } else {
      fileFields2 = [...this.filesFields];
    }
    fileFields2.forEach(([filePath, fields]) => {
      const dvFile = this.dv.api.page(filePath);
      const existingFields = [];
      fields.forEach((field) => {
        if (dvFile && dvFile[field.name] !== void 0) {
          existingFields.push(field);
        }
      });
      if (existingFields.length) {
        this.filesFieldsExists.set(filePath, existingFields);
      } else {
        this.filesFieldsExists.delete(filePath);
      }
    });
  }
};

// src/components/FileTaskManager.ts
var import_obsidian58 = require("obsidian");

// node_modules/uuid/dist/esm-browser/rng.js
var getRandomValues;
var rnds8 = new Uint8Array(16);
function rng() {
  if (!getRandomValues) {
    getRandomValues = typeof crypto !== "undefined" && crypto.getRandomValues && crypto.getRandomValues.bind(crypto);
    if (!getRandomValues) {
      throw new Error("crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported");
    }
  }
  return getRandomValues(rnds8);
}

// node_modules/uuid/dist/esm-browser/stringify.js
var byteToHex = [];
for (let i = 0; i < 256; ++i) {
  byteToHex.push((i + 256).toString(16).slice(1));
}
function unsafeStringify(arr, offset2 = 0) {
  return (byteToHex[arr[offset2 + 0]] + byteToHex[arr[offset2 + 1]] + byteToHex[arr[offset2 + 2]] + byteToHex[arr[offset2 + 3]] + "-" + byteToHex[arr[offset2 + 4]] + byteToHex[arr[offset2 + 5]] + "-" + byteToHex[arr[offset2 + 6]] + byteToHex[arr[offset2 + 7]] + "-" + byteToHex[arr[offset2 + 8]] + byteToHex[arr[offset2 + 9]] + "-" + byteToHex[arr[offset2 + 10]] + byteToHex[arr[offset2 + 11]] + byteToHex[arr[offset2 + 12]] + byteToHex[arr[offset2 + 13]] + byteToHex[arr[offset2 + 14]] + byteToHex[arr[offset2 + 15]]).toLowerCase();
}

// node_modules/uuid/dist/esm-browser/native.js
var randomUUID = typeof crypto !== "undefined" && crypto.randomUUID && crypto.randomUUID.bind(crypto);
var native_default = {
  randomUUID
};

// node_modules/uuid/dist/esm-browser/v4.js
function v4(options2, buf, offset2) {
  if (native_default.randomUUID && !buf && !options2) {
    return native_default.randomUUID();
  }
  options2 = options2 || {};
  const rnds = options2.random || (options2.rng || rng)();
  rnds[6] = rnds[6] & 15 | 64;
  rnds[8] = rnds[8] & 63 | 128;
  if (buf) {
    offset2 = offset2 || 0;
    for (let i = 0; i < 16; ++i) {
      buf[offset2 + i] = rnds[i];
    }
    return buf;
  }
  return unsafeStringify(rnds);
}
var v4_default = v4;

// src/components/FileTaskManager.ts
var Task = class {
  constructor(fn2) {
    this.fn = fn2;
    this.status = "pending";
    this.id = v4_default();
  }
};
var FileTaskManager = class extends import_obsidian58.Component {
  constructor(plugin, cacheVersion, onChange) {
    super();
    this.plugin = plugin;
    this.cacheVersion = cacheVersion;
    this.onChange = onChange;
    this.busy = false;
    this.queue = /* @__PURE__ */ new Map();
  }
  onload() {
    return __async(this, null, function* () {
      this.plugin.registerEvent(this.plugin.app.metadataCache.on("resolved", () => __async(this, null, function* () {
        this.busy = false;
        yield this.executeNext();
      })));
      this.plugin.registerEvent(this.plugin.app.vault.on("modify", (file) => __async(this, null, function* () {
        if (file instanceof import_obsidian58.TFile && file.extension === "canvas") {
          this.busy = false;
          yield this.executeNext();
        }
      })));
    });
  }
  pushTask(fn2) {
    return __async(this, null, function* () {
      const task = new Task(fn2);
      this.queue.set(task.id, task);
      if (!this.busy)
        yield this.executeNext();
    });
  }
  executeNext() {
    return __async(this, null, function* () {
      const [firstTaskInQueueId, firstTaskInQueue] = [...this.queue][0] || [void 0, void 0];
      if (firstTaskInQueue && !this.plugin.app.metadataCache.inProgressTaskCount) {
        this.busy = true;
        firstTaskInQueue.status = "ongoing";
        yield firstTaskInQueue.fn();
        firstTaskInQueue.status = "done";
        this.queue.delete(firstTaskInQueueId);
        if (!this.plugin.app.metadataCache.inProgressTaskCount)
          yield this.executeNext();
      } else if (this.plugin.app.metadataCache.inProgressTaskCount) {
      } else {
      }
    });
  }
};

// src/commands/replaceValues.ts
var import_obsidian59 = require("obsidian");
var LocationWrapper2 = {
  "fullLine": { start: "", end: "" },
  "brackets": { start: "[", end: "]" },
  "parenthesis": { start: "(", end: ")" }
};
var matchInlineFields2 = (regex, line, attribute, input, location = "fullLine") => {
  const sR = line.matchAll(regex);
  let next = sR.next();
  const newFields = [];
  while (!next.done) {
    const match = next.value;
    if (match.groups && Object.keys(match.groups).every((j) => fieldComponents.includes(j))) {
      const { inList, inQuote, startStyle, endStyle, beforeSeparatorSpacer, afterSeparatorSpacer, values } = match.groups;
      const inputArray = input ? input.replace(/(\,\s+)/g, ",").split(",") : [""];
      const newValue = inputArray.length == 1 ? inputArray[0] : `${inputArray.join(", ")}`;
      const start2 = LocationWrapper2[location].start;
      const end2 = LocationWrapper2[location].end;
      newFields.push({
        oldField: match[0],
        newField: `${inQuote || ""}${start2}${inList || ""}${startStyle}${attribute}${endStyle}${beforeSeparatorSpacer}::${afterSeparatorSpacer}${newValue}${end2}`
      });
    }
    next = sR.next();
  }
  return newFields;
};
function replaceValues(plugin, fileOrFilePath, attribute, input, previousItemsCount = 0) {
  return __async(this, null, function* () {
    var _a, _b;
    let file;
    if (fileOrFilePath instanceof import_obsidian59.TFile) {
      file = fileOrFilePath;
    } else {
      const _file = plugin.app.vault.getAbstractFileByPath(fileOrFilePath);
      if (_file instanceof import_obsidian59.TFile && _file.extension == "md") {
        file = _file;
      } else {
        throw Error("path doesn't correspond to a proper file");
      }
    }
    const content = (yield plugin.app.vault.read(file)).split("\n");
    const frontmatter = (_a = plugin.app.metadataCache.getFileCache(file)) == null ? void 0 : _a.frontmatter;
    const skippedLines = [];
    const { position: { start: start2, end: end2 } } = frontmatter ? frontmatter : { position: { start: void 0, end: void 0 } };
    const newContent = content.map((line, i) => {
      var _a2;
      if (start2 && end2 && i >= start2.line && i <= end2.line) {
        const regex = new RegExp(`^${attribute}:`, "u");
        const r = line.match(regex);
        if (r && r.length > 0) {
          const inputArray = input ? input.replace(/(\,\s+)/g, ",").split(",") : [""];
          const newValue = inputArray.length == 1 ? inputArray[0] : `[${inputArray.join(", ")}]`;
          return `${attribute}: ${newValue}`;
        } else {
          return line;
        }
      } else {
        const encodedInput = encodeLink(input);
        let encodedLine = encodeLink(line);
        const fullLineRegex2 = new RegExp(`^${inlineFieldRegex(attribute)}(?<values>[^\\]]*)`, "u");
        const fR = encodedLine.match(fullLineRegex2);
        if ((fR == null ? void 0 : fR.groups) && Object.keys(fR.groups).every((j) => fieldComponents.includes(j))) {
          const field = (_a2 = plugin.fieldIndex.filesFields.get(file.path)) == null ? void 0 : _a2.find((f) => f.name === attribute);
          if ((field == null ? void 0 : field.type) === "Lookup" /* Lookup */) {
            const bounds = getListBounds(plugin, file, i);
            if (bounds) {
              const { start: start3, end: end3 } = bounds;
              for (let j = start3 + 1; j < start3 + previousItemsCount + 1 && j < end3 + 1; j++) {
                skippedLines.push(j);
              }
            }
          }
          const { inList, inQuote, startStyle, endStyle, beforeSeparatorSpacer, afterSeparatorSpacer, values } = fR.groups;
          const inputArray = input ? input.replace(/(\,\s+)/g, ",").split(",").sort() : [];
          let newValue;
          let hiddenValue = "";
          if ((field == null ? void 0 : field.type) === "Lookup" /* Lookup */ && bulletListLookupTypes.includes(field == null ? void 0 : field.options.outputType)) {
            newValue = inputArray.length == 1 ? "\n- " + inputArray[0] : `${inputArray.length > 0 ? "\n" : ""}${inputArray.map((item) => "- " + item).join("\n")}`;
            hiddenValue = `<div hidden id="${field.name}_values">${input}</div>`;
          } else {
            newValue = inputArray.length == 1 ? inputArray[0] : `${inputArray.join(", ")}`;
          }
          return `${inQuote || ""}${inList || ""}${startStyle}${attribute}${endStyle}${beforeSeparatorSpacer}::${afterSeparatorSpacer}${hiddenValue + newValue}`;
        } else {
          const newFields = [];
          const inSentenceRegexBrackets2 = new RegExp(`\\[${inlineFieldRegex(attribute)}(?<values>[^\\]]+)?\\]`, "gu");
          const inSentenceRegexPar2 = new RegExp(`\\(${inlineFieldRegex(attribute)}(?<values>[^\\)]+)?\\)`, "gu");
          newFields.push(...matchInlineFields2(inSentenceRegexBrackets2, encodedLine, attribute, encodedInput, "brackets" /* brackets */));
          newFields.push(...matchInlineFields2(inSentenceRegexPar2, encodedLine, attribute, encodedInput, "parenthesis" /* parenthesis */));
          newFields.forEach((field) => {
            const fieldRegex = new RegExp(field.oldField.replace(/[.*+?^${}()|[\]\\]/g, "\\$&"), "u");
            encodedLine = encodedLine.replace(fieldRegex, field.newField);
          });
          return decodeLink(encodedLine);
        }
      }
    });
    yield plugin.app.vault.modify(file, newContent.filter((line, i) => !skippedLines.includes(i)).join("\n"));
    const editor = (_b = plugin.app.workspace.getActiveViewOfType(import_obsidian59.MarkdownView)) == null ? void 0 : _b.editor;
    if (editor) {
      const lineNumber = editor.getCursor().line;
      editor.setCursor({ line: editor.getCursor().line, ch: editor.getLine(lineNumber).length });
    }
  });
}

// src/commands/insertValues.ts
var import_obsidian61 = require("obsidian");

// src/commands/insertFrontmatterWithFields.ts
var import_obsidian60 = require("obsidian");
function insertFrontmatterWithFields(plugin, fileOrFilePath, fields) {
  return __async(this, null, function* () {
    var _a;
    let file;
    if (fileOrFilePath instanceof import_obsidian60.TFile) {
      file = fileOrFilePath;
    } else {
      const _file = plugin.app.vault.getAbstractFileByPath(fileOrFilePath);
      if (_file instanceof import_obsidian60.TFile && _file.extension == "md") {
        file = _file;
      } else {
        throw Error("path doesn't correspond to a proper file");
      }
    }
    const content = yield plugin.app.vault.read(file);
    const frontmatter = "---\n" + Object.entries(fields).map(([fieldName, value]) => `${fieldName}: ${value}`).join("\n") + "\n---\n";
    yield plugin.app.vault.modify(file, frontmatter + content);
    const editor = (_a = plugin.app.workspace.getActiveViewOfType(import_obsidian60.MarkdownView)) == null ? void 0 : _a.editor;
    if (editor) {
      const lineNumber = editor.getCursor().line;
      editor.setCursor({ line: editor.getCursor().line, ch: editor.getLine(lineNumber).length });
    }
  });
}

// src/commands/insertValues.ts
function insertValues(plugin, fileOrFilePath, fieldName, value, lineNumber, inFrontmatter, after = true, asList = false, asComment = false) {
  return __async(this, null, function* () {
    var _a, _b;
    let file;
    if (fileOrFilePath instanceof import_obsidian61.TFile) {
      file = fileOrFilePath;
    } else {
      const _file = plugin.app.vault.getAbstractFileByPath(fileOrFilePath);
      if (_file instanceof import_obsidian61.TFile && _file.extension == "md") {
        file = _file;
      } else {
        throw Error("path doesn't correspond to a proper file");
      }
    }
    const frontmatter = (_a = plugin.app.metadataCache.getFileCache(file)) == null ? void 0 : _a.frontmatter;
    if (inFrontmatter && lineNumber == -2 && !frontmatter) {
      const fields = {};
      fields[fieldName] = value;
      yield insertFrontmatterWithFields(plugin, file, fields);
    } else {
      const result = yield plugin.app.vault.read(file);
      let newContent = [];
      const targetLineNumber = inFrontmatter && lineNumber == -2 && frontmatter ? frontmatter.position.end.line - 1 : lineNumber;
      result.split("\n").forEach((line, _lineNumber) => {
        if (_lineNumber == targetLineNumber) {
          if (after)
            newContent.push(line);
          const newLine = `${!inFrontmatter && asComment ? ">" : ""}${!inFrontmatter && asList ? "- " : ""}${fieldName}${inFrontmatter ? ":" : "::"} ${value}`;
          newContent.push(newLine);
          if (!after)
            newContent.push(line);
        } else {
          newContent.push(line);
        }
      });
      yield plugin.app.vault.modify(file, newContent.join("\n"));
      const editor = (_b = plugin.app.workspace.getActiveViewOfType(import_obsidian61.MarkdownView)) == null ? void 0 : _b.editor;
      if (editor) {
        const lineNumber2 = editor.getCursor().line;
        editor.setCursor({ line: editor.getCursor().line, ch: editor.getLine(lineNumber2).length });
      }
    }
  });
}

// src/commands/fieldModifier.ts
var import_obsidian62 = require("obsidian");
function buildAndOpenModal(plugin, file, fieldName, attrs) {
  var _a;
  if ((_a = attrs == null ? void 0 : attrs.options) == null ? void 0 : _a.inFrontmatter) {
    const lineNumber = -1;
    FieldManager2.openFieldModal(plugin, file, fieldName, "", lineNumber, false, false, false);
  } else {
    new chooseSectionModal(plugin, file, (lineNumber, after, asList, asComment) => FieldManager2.openFieldModal(plugin, file, fieldName, "", lineNumber, after, asList, asComment)).open();
  }
}
function createDvField(plugin, dv, p, fieldContainer, fieldName, attrs) {
  var _a;
  const field = (_a = plugin.fieldIndex.filesFields.get(p.file.path)) == null ? void 0 : _a.find((field2) => field2.name === fieldName);
  if (field == null ? void 0 : field.type) {
    const fieldManager = new FieldManager[field.type](plugin, field);
    fieldManager.createDvField(dv, p, fieldContainer, attrs);
  } else {
    const fieldManager = FieldManager2.createDefault(plugin, fieldName);
    fieldManager.createDvField(dv, p, fieldContainer, attrs);
  }
}
function fieldModifier(plugin, dv, p, fieldName, attrs) {
  var _a, _b;
  const fieldContainer = dv.el("div", "");
  fieldContainer.setAttr("class", "metadata-menu-dv-field-container");
  if (p[fieldName] === void 0) {
    if (!((_a = attrs == null ? void 0 : attrs.options) == null ? void 0 : _a.showAddField)) {
      const emptyField = dv.el("span", null, attrs);
      fieldContainer.appendChild(emptyField);
    } else {
      const addFieldBtn = dv.el("button", attrs);
      (0, import_obsidian62.setIcon)(addFieldBtn, "plus-with-circle");
      addFieldBtn.onclick = () => __async(this, null, function* () {
        var _a2;
        const file = plugin.app.vault.getAbstractFileByPath(p.file.path);
        if (file instanceof import_obsidian62.TFile && file.extension == "md") {
          const field = (_a2 = plugin.fieldIndex.filesFields.get(file.path)) == null ? void 0 : _a2.find((field2) => field2.name === fieldName);
          if (field) {
            buildAndOpenModal(plugin, file, fieldName, attrs);
          } else {
            new chooseSectionModal(plugin, file, (lineNumber, after, asList, asComment) => FieldManager2.openFieldModal(plugin, file, void 0, "", lineNumber, after, asList, asComment)).open();
          }
        } else {
          throw Error("path doesn't correspond to a proper file");
        }
      });
      fieldContainer.appendChild(addFieldBtn);
    }
  } else {
    const file = plugin.app.vault.getAbstractFileByPath(p.file.path);
    if (file instanceof import_obsidian62.TFile && file.extension == "md") {
      const field = (_b = plugin.fieldIndex.filesFields.get(file.path)) == null ? void 0 : _b.find((field2) => field2.name === fieldName);
      if (field) {
        createDvField(plugin, dv, p, fieldContainer, fieldName, attrs);
      } else {
        const fieldManager = FieldManager2.createDefault(plugin, fieldName);
        fieldManager.createDvField(dv, p, fieldContainer, attrs);
      }
    }
  }
  return fieldContainer;
}

// src/commands/fileFields.ts
var import_obsidian63 = require("obsidian");
var FieldInfo = class {
  constructor() {
    this.type = void 0;
    this.sourceType = void 0;
    this.fileClass = void 0;
    this.options = void 0;
    this.isValid = void 0;
    this.value = "";
    this.valuesListNotePath = void 0;
    this.unique = true;
  }
  setInfos(plugin, file, fieldName, value, matchingFileClassQuery) {
    var _a;
    this.value = value;
    this.ignoreInMenu = plugin.settings.globallyIgnoredFields.includes(fieldName);
    const field = (_a = plugin.fieldIndex.filesFields.get(file.path)) == null ? void 0 : _a.find((field2) => field2.name === fieldName);
    if (field) {
      const fieldManager = new FieldManager[field.type](plugin, field);
      this.isValid = fieldManager.validateValue(value);
      this.fileClass = field.fileClassName;
      this.type = field.type;
      this.options = field.options;
      this.sourceType = field.fileClassName ? "fileClass" : "settings";
    }
  }
};
function fileFields(plugin, fileOrfilePath) {
  var _a;
  let file;
  if (fileOrfilePath instanceof import_obsidian63.TFile) {
    file = fileOrfilePath;
  } else {
    const _file = plugin.app.vault.getAbstractFileByPath(fileOrfilePath);
    if (_file instanceof import_obsidian63.TFile && _file.extension == "md") {
      file = _file;
    } else {
      throw Error("path doesn't correspond to a proper file");
    }
  }
  const fields = {};
  const dvApi = (_a = plugin.app.plugins.plugins.dataview) == null ? void 0 : _a.api;
  if (dvApi) {
    const dvFile = dvApi.page(file.path);
    try {
      genuineKeys(dvFile).forEach((key) => __async(this, null, function* () {
        if (key !== "file") {
          const fieldInfo = new FieldInfo();
          fieldInfo.unique = !Object.keys(fields).includes(key);
          fields[key] = fieldInfo;
          fieldInfo.setInfos(plugin, file, key, dvFile[key]);
        }
      }));
    } catch (error) {
      throw error;
    }
  }
  return fields;
}

// src/MetadataMenuApi.ts
var MetadataMenuApi = class {
  constructor(plugin) {
    this.plugin = plugin;
  }
  make() {
    return {
      getValues: this.getValues(),
      replaceValues: this.replaceValues(),
      insertValues: this.insertValues(),
      fieldModifier: this.fieldModifier(),
      fileFields: this.fileFields(),
      insertMissingFields: this.insertMissingFields(),
      postValues: this.postValues()
    };
  }
  getValues() {
    return (fileOrFilePath, attribute) => __async(this, null, function* () {
      return getValues(this.plugin, fileOrFilePath, attribute);
    });
  }
  replaceValues() {
    return (fileOrFilePath, attribute, input) => __async(this, null, function* () {
      return yield this.plugin.fileTaskManager.pushTask(() => {
        console.info("replaceValues is deprecated, use postValues instead");
        replaceValues(this.plugin, fileOrFilePath, attribute, `${input}`);
      });
    });
  }
  insertValues() {
    return (fileOrFilePath, fieldName, value, lineNumber, inFrontmatter, after, asList, asComment) => __async(this, null, function* () {
      return yield this.plugin.fileTaskManager.pushTask(() => {
        console.info("insertValues is deprecated, use postValues instead");
        insertValues(this.plugin, fileOrFilePath, fieldName, value, lineNumber, inFrontmatter, after, asList, asComment);
      });
    });
  }
  fieldModifier() {
    return (dv, p, fieldName, attrs) => fieldModifier(this.plugin, dv, p, fieldName, attrs);
  }
  fileFields() {
    return (fileOrFilePath) => __async(this, null, function* () {
      return fileFields(this.plugin, fileOrFilePath);
    });
  }
  insertMissingFields() {
    return (fileOrFilePath, lineNumber, after, asList, asComment, fileClassName) => __async(this, null, function* () {
      return insertMissingFields(this.plugin, fileOrFilePath, lineNumber, after, asList, asComment, fileClassName);
    });
  }
  postValues() {
    return (fileOrFilePath, payload, lineNumber, after, asList, asComment) => __async(this, null, function* () {
      return postValues(this.plugin, payload, fileOrFilePath, lineNumber, after, asList, asComment);
    });
  }
};

// src/settings/MetadataMenuSettings.ts
var DEFAULT_SETTINGS = {
  presetFields: [],
  fileClassQueries: [],
  displayFieldsInContextMenu: true,
  globallyIgnoredFields: [],
  classFilesPath: null,
  isAutosuggestEnabled: true,
  fileClassAlias: "fileClass",
  settingsVersion: void 0,
  globalFileClass: void 0,
  firstDayOfWeek: 1,
  enableLinks: true,
  enableTabHeader: true,
  enableEditor: true,
  enableBacklinks: true,
  enableStarred: true,
  enableFileExplorer: true,
  enableSearch: true,
  buttonIcon: "clipboard-list",
  tableViewMaxRecords: 100
};

// src/settings/MetadataMenuSettingTab.ts
var import_obsidian67 = require("obsidian");

// src/suggester/FolderSuggester.ts
var import_obsidian64 = require("obsidian");
var FolderSuggest = class extends TextInputSuggest {
  constructor(plugin, inputEl) {
    super(inputEl);
    this.plugin = plugin;
    this.inputEl = inputEl;
  }
  getSuggestions(inputStr) {
    const abstractFiles = this.plugin.app.vault.getAllLoadedFiles();
    const folders = [];
    const lowerCaseInputStr = inputStr.toLowerCase();
    abstractFiles.forEach((folder) => {
      if (folder instanceof import_obsidian64.TFolder && folder.path.toLowerCase().contains(lowerCaseInputStr)) {
        folders.push(folder);
      }
    });
    return folders;
  }
  renderSuggestion(file, el) {
    el.setText(file.path);
  }
  selectSuggestion(file) {
    this.inputEl.value = file.path;
    this.inputEl.trigger("input");
    this.close();
  }
};

// src/settings/FileClassQuerySettingModal.ts
var import_obsidian66 = require("obsidian");

// src/settings/FileClassQuerySetting.ts
var import_obsidian65 = require("obsidian");
var FileClassQuerySetting = class extends import_obsidian65.Setting {
  constructor(containerEl, property, plugin) {
    super(containerEl);
    this.containerEl = containerEl;
    this.plugin = plugin;
    this.fileClassQuery = property;
    this.setTextContentWithname();
    this.addEditButton();
    this.addDeleteButton();
    this.addMoveUpButton();
    this.settingEl.addClass("no-border");
  }
  setTextContentWithname() {
    this.infoEl.textContent = "";
    this.infoEl.addClass("setting-item");
    const fileClassQueryContainer = this.infoEl.createDiv();
    const nameContainer = fileClassQueryContainer.createEl("div", "name");
    nameContainer.innerHTML = `<strong>${this.fileClassQuery.name}</strong>`;
    const fileClassNameContainer = fileClassQueryContainer.createEl("div");
    fileClassNameContainer.innerHTML = `<span>FileClass</span> : ${this.fileClassQuery.fileClassName}`;
    const queryContainer = fileClassQueryContainer.createEl("div");
    queryContainer.innerHTML = `<span>Query</span> : ${this.fileClassQuery.query}`;
  }
  addEditButton() {
    this.addButton((b) => {
      b.setIcon("pencil").setTooltip("Edit").onClick(() => {
        let modal = new FileClassQuerySettingsModal(this.plugin, this.containerEl, this, this.fileClassQuery);
        modal.open();
      });
    });
  }
  addDeleteButton() {
    this.addButton((b) => {
      b.setIcon("trash").setTooltip("Delete").onClick(() => {
        var _a;
        const currentExistingFileClassQuery = this.plugin.initialFileClassQueries.find((p) => p.id == this.fileClassQuery.id);
        if (currentExistingFileClassQuery) {
          this.plugin.initialFileClassQueries.remove(currentExistingFileClassQuery);
        }
        ;
        (_a = this.settingEl.parentElement) == null ? void 0 : _a.removeChild(this.settingEl);
        this.plugin.saveSettings();
      });
    });
  }
  addMoveUpButton() {
    this.addButton((b) => {
      b.setIcon("up-chevron-glyph").setTooltip("Move up (lower priority)").onClick(() => {
        const currentFileClassQueryIndex = this.plugin.initialFileClassQueries.map((fcq) => fcq.id).indexOf(this.fileClassQuery.id);
        if (currentFileClassQueryIndex > 0) {
          this.containerEl.insertBefore(this.settingEl, this.settingEl.previousElementSibling);
          this.plugin.initialFileClassQueries.splice(currentFileClassQueryIndex, 1);
          this.plugin.initialFileClassQueries.splice(currentFileClassQueryIndex - 1, 0, this.fileClassQuery);
          this.plugin.saveSettings();
        }
      });
    });
  }
};

// src/settings/FileClassQuerySettingModal.ts
var FileClassQuerySettingsModal = class extends import_obsidian66.Modal {
  constructor(plugin, parentSettingContainer, parentSetting, fileClassQuery) {
    super(plugin.app);
    this.plugin = plugin;
    this.parentSettingContainer = parentSettingContainer;
    this.parentSetting = parentSetting;
    this.saved = false;
    this.new = true;
    this.initialFileClassQuery = new FileClassQuery_default();
    if (fileClassQuery) {
      this.new = false;
      this.fileClassQuery = fileClassQuery;
      FileClassQuery_default.copyProperty(this.initialFileClassQuery, this.fileClassQuery);
    } else {
      let newId = 1;
      this.plugin.initialFileClassQueries.forEach((prop) => {
        if (parseInt(prop.id) && parseInt(prop.id) >= newId) {
          newId = parseInt(prop.id) + 1;
        }
        ;
      });
      this.fileClassQuery = new FileClassQuery_default();
      this.fileClassQuery.id = newId.toString();
      this.initialFileClassQuery.id = newId.toString();
    }
    ;
    this.containerEl.addClass("metadata-menu");
  }
  onOpen() {
    return __async(this, null, function* () {
      if (this.fileClassQuery.name == "") {
        this.titleEl.setText(`Select a fileClass and add an applicable query`);
      } else {
        this.titleEl.setText(`Manage ${this.fileClassQuery.name} settings`);
      }
      ;
      yield this.createForm();
    });
  }
  onClose() {
    Object.assign(this.fileClassQuery, this.initialFileClassQuery);
    if (!this.new && this.parentSetting) {
      this.parentSetting.setTextContentWithname();
    } else if (this.saved) {
      new FileClassQuerySetting(this.parentSettingContainer, this.fileClassQuery, this.plugin);
    }
    ;
  }
  createnameInputContainer(container) {
    container.createDiv({ cls: "label", text: `FileClass Query Name:` });
    const input = new import_obsidian66.TextComponent(container);
    input.inputEl.addClass("with-label");
    input.inputEl.addClass("full-width");
    const name = this.fileClassQuery.name;
    input.setValue(name);
    input.setPlaceholder("Name of this fileClass query");
    input.onChange((value) => {
      this.fileClassQuery.name = value;
      this.titleEl.setText(`Manage options for ${this.fileClassQuery.name}`);
    });
    return input;
  }
  createFileClassSelectorContainer(container) {
    container.createDiv({ cls: "label", text: `Fileclass:` });
    container.createDiv({ cls: "spacer" });
    const select = new import_obsidian66.DropdownComponent(container);
    const classFilesPath = this.plugin.settings.classFilesPath;
    const fileClasses = this.plugin.app.vault.getFiles().filter((f) => classFilesPath && f.path.startsWith(classFilesPath)).reverse();
    select.addOption("--Select a fileClass--", "--Select a fileClass--");
    fileClasses.forEach((fileClass) => {
      const fileClassName = FileClass.getFileClassNameFromPath(this.plugin, fileClass.path);
      if (fileClassName)
        select.addOption(fileClassName, fileClassName);
    });
    if (this.fileClassQuery.fileClassName) {
      select.setValue(this.fileClassQuery.fileClassName);
    }
    select.onChange((value) => {
      if (value != "--Select a fileClass--") {
        this.fileClassQuery.fileClassName = value;
      } else {
        this.fileClassQuery.fileClassName = "";
      }
    });
  }
  createQueryInputContainer(container) {
    container.createDiv({ text: "dataviewJS query:" });
    const queryStringInputContainer = container.createDiv({ cls: "field-container" });
    const queryStringInput = new import_obsidian66.TextAreaComponent(queryStringInputContainer);
    queryStringInput.inputEl.addClass("full-width");
    queryStringInput.inputEl.rows = 4;
    queryStringInput.setValue(this.fileClassQuery.query);
    queryStringInput.onChange((value) => this.fileClassQuery.query = value);
  }
  createForm() {
    return __async(this, null, function* () {
      const nameContainer = this.contentEl.createDiv({ cls: "field-container" });
      this.createnameInputContainer(nameContainer);
      const fileClassSelectContainer = this.contentEl.createDiv({ cls: "field-container" });
      this.createFileClassSelectorContainer(fileClassSelectContainer);
      const fileClassQueryContainer = this.contentEl.createDiv({ cls: "vstacked" });
      this.createQueryInputContainer(fileClassQueryContainer);
      const footer = this.contentEl.createDiv({ cls: "footer-actions" });
      footer.createDiv({ cls: "spacer" });
      this.createSaveButton(footer);
      this.createCancelButton(footer);
    });
  }
  createSaveButton(container) {
    const b = new import_obsidian66.ButtonComponent(container);
    b.setTooltip("Save");
    b.setIcon("checkmark");
    b.onClick(() => __async(this, null, function* () {
      var _a;
      if (this.fileClassQuery.fileClassName && this.fileClassQuery.name && this.fileClassQuery.query) {
        this.saved = true;
        const currentExistingFileClassQuery = this.plugin.initialFileClassQueries.filter((p) => p.id == this.fileClassQuery.id)[0];
        if (currentExistingFileClassQuery) {
          FileClassQuery_default.copyProperty(currentExistingFileClassQuery, this.fileClassQuery);
        } else {
          this.plugin.initialFileClassQueries.push(this.fileClassQuery);
        }
        ;
        FileClassQuery_default.copyProperty(this.initialFileClassQuery, this.fileClassQuery);
        if (this.parentSetting)
          FileClassQuery_default.copyProperty(this.parentSetting.fileClassQuery, this.fileClassQuery);
        (_a = this.parentSetting) == null ? void 0 : _a.setTextContentWithname();
        this.plugin.saveSettings();
        this.close();
      }
    }));
  }
  createCancelButton(container) {
    const b = new import_obsidian66.ButtonComponent(container);
    b.setIcon("cross").setTooltip("Cancel").onClick(() => {
      this.saved = false;
      if (this.initialFileClassQuery.name != "") {
        Object.assign(this.fileClassQuery, this.initialFileClassQuery);
      }
      ;
      this.close();
    });
  }
};

// src/settings/MetadataMenuSettingTab.ts
var MetadataMenuSettingTab = class extends import_obsidian67.PluginSettingTab {
  constructor(plugin) {
    super(app, plugin);
    this.plugin = plugin;
    this.containerEl.addClass("metadata-menu");
    this.containerEl.addClass("settings");
  }
  createSettingGroup(title, subTitle, withButton = false) {
    const settingHeader = this.containerEl.createEl("div");
    const settingHeaderContainer = settingHeader.createEl("div", { cls: "header-container" });
    const settingHeaderTextContainer = settingHeaderContainer.createEl("div", { cls: "text-container" });
    settingHeaderTextContainer.createEl("h4", { text: title, cls: "section-header" });
    if (subTitle)
      settingHeaderTextContainer.createEl("div", { text: subTitle, cls: "setting-item-description" });
    const settingsContainer = this.containerEl.createEl("div");
    if (withButton) {
      const settingsContainerShowButtonContainer = settingHeaderContainer.createEl("div", { cls: "setting-item-control" });
      const settingsContainerShowButton = new import_obsidian67.ButtonComponent(settingsContainerShowButtonContainer);
      settingsContainerShowButton.buttonEl.addClass("setting-item-control");
      settingsContainer.hide();
      settingsContainerShowButton.setCta();
      settingsContainerShowButton.setIcon("chevrons-up-down");
      const toggleState = () => {
        if (settingsContainer.isShown()) {
          settingsContainer.hide();
          settingsContainerShowButton.setIcon("chevrons-up-down");
          settingsContainerShowButton.setCta();
        } else {
          settingsContainer.show();
          settingsContainerShowButton.setIcon("chevrons-down-up");
          settingsContainerShowButton.removeCta();
        }
      };
      settingsContainerShowButton.onClick(() => toggleState());
    }
    return settingsContainer;
  }
  display() {
    let { containerEl } = this;
    containerEl.empty();
    const globalSettings = this.createSettingGroup("Global settings", "Global settings to apply to your whole vault", true);
    new import_obsidian67.Setting(globalSettings).setName("Display field options in context menu").setDesc("Choose to show or hide fields options in the context menu of a link or a file").addToggle((toggle) => {
      toggle.setValue(this.plugin.settings.displayFieldsInContextMenu);
      toggle.onChange((value) => __async(this, null, function* () {
        this.plugin.settings.displayFieldsInContextMenu = value;
        yield this.plugin.saveSettings();
      }));
    }).settingEl.addClass("no-border");
    const globallyIgnoredFieldsSetting = new import_obsidian67.Setting(globalSettings).setName("Globally ignored fields").setDesc("Fields to be ignored by the plugin when adding options to the context menu").addTextArea((text) => {
      text.setPlaceholder("Enter fields as string, comma separated").setValue(this.plugin.settings.globallyIgnoredFields.join(", ")).onChange((value) => __async(this, null, function* () {
        this.plugin.settings.globallyIgnoredFields = value.split(",").map((item) => item.trim());
        yield this.plugin.saveSettings();
      }));
      text.inputEl.rows = 6;
      text.inputEl.cols = 25;
    });
    globallyIgnoredFieldsSetting.settingEl.addClass("vstacked");
    globallyIgnoredFieldsSetting.settingEl.addClass("no-border");
    globallyIgnoredFieldsSetting.controlEl.addClass("full-width");
    new import_obsidian67.Setting(globalSettings).setName("First day of week").setDesc("For date fields, which day the date picker's week should start with").addDropdown((cb) => {
      for (let i = 0; i < 2; i++) {
        cb.addOption(i.toString(), (0, import_obsidian67.moment)().day(i).format("dddd"));
      }
      cb.setValue(this.plugin.settings.firstDayOfWeek.toString() || "1");
      cb.onChange((value) => __async(this, null, function* () {
        this.plugin.settings.firstDayOfWeek = parseInt(value);
        yield this.plugin.saveSettings();
      }));
    }).settingEl.addClass("no-border");
    containerEl.createDiv({ cls: "setting-divider" });
    const presetFieldsSettings = this.createSettingGroup("Preset Fields settings", "Manage globally predefined type and options for a field throughout your whole vault", true);
    new import_obsidian67.Setting(presetFieldsSettings).setName("Add New Field Setting").setDesc("Add a new Frontmatter property for which you want preset options.").addButton((button) => {
      return button.setTooltip("Add New Property Manager").setButtonText("Add new").setCta().onClick(() => __async(this, null, function* () {
        let modal = new FieldSettingsModal(this.plugin, presetFieldsSettings);
        modal.open();
      }));
    }).settingEl.addClass("no-border");
    this.plugin.initialProperties.forEach((prop) => {
      const property = new Field_default();
      Object.assign(property, prop);
      new FieldSetting(presetFieldsSettings, property, this.plugin);
    });
    containerEl.createDiv({ cls: "setting-divider" });
    const classFilesSettings = this.createSettingGroup("FileClass settings", "Manage fileClass folder and alias. When a note has a fileClass defined, fileClass field properties will override global preset fields settings for the same field name", true);
    const path = new import_obsidian67.Setting(classFilesSettings).setName("class Files path").setDesc("Path to the files containing the authorized fields for a type of note").addSearch((cfs) => {
      new FolderSuggest(this.plugin, cfs.inputEl);
      cfs.setPlaceholder("Folder").setValue(this.plugin.settings.classFilesPath || "").onChange((new_folder) => {
        const newPath = new_folder.endsWith("/") || !new_folder ? new_folder : new_folder + "/";
        this.plugin.settings.classFilesPath = newPath || null;
        this.plugin.saveSettings();
      });
    });
    path.settingEl.addClass("no-border");
    path.settingEl.addClass("narrow-title");
    path.controlEl.addClass("full-width");
    const alias = new import_obsidian67.Setting(classFilesSettings).setName("fileClass field alias").setDesc("Choose another name for fileClass field in frontmatter (example: Category, type, ...").addText((text) => {
      text.setValue(this.plugin.settings.fileClassAlias).onChange((value) => __async(this, null, function* () {
        this.plugin.settings.fileClassAlias = value || "fileClass";
        yield this.plugin.saveSettings();
      }));
    });
    alias.settingEl.addClass("no-border");
    alias.settingEl.addClass("narrow-title");
    alias.controlEl.addClass("full-width");
    const global = new import_obsidian67.Setting(classFilesSettings).setName("global fileClass").setDesc("Choose one fileClass to be applicable to all files (even it is not present as a fileClass attribute in their frontmatter). This will override the preset Fields defined above").addSearch((cfs) => {
      new FileSuggest(cfs.inputEl, this.plugin, this.plugin.settings.classFilesPath || "");
      cfs.setPlaceholder("Global fileClass");
      cfs.setValue(this.plugin.settings.globalFileClass ? this.plugin.settings.classFilesPath + this.plugin.settings.globalFileClass + ".md" : "").onChange((newPath) => {
        var _a;
        this.plugin.settings.globalFileClass = newPath ? (_a = newPath.split("\\").pop().split("/").pop()) == null ? void 0 : _a.replace(".md", "") : "";
        this.plugin.saveSettings();
      });
    });
    global.settingEl.addClass("no-border");
    global.settingEl.addClass("narrow-title");
    global.controlEl.addClass("full-width");
    containerEl.createDiv({ cls: "setting-divider" });
    const metadataMenuBtnSettings = this.createSettingGroup("Metadata Menu button", "Show extra button to access metadata menu modal of fields", true);
    new import_obsidian67.Setting(metadataMenuBtnSettings).setName("Metadata Menu button icon").setDesc("name of the default icon when not defined in fileClass").addText((text) => {
      text.setValue(this.plugin.settings.buttonIcon).onChange((value) => __async(this, null, function* () {
        this.plugin.settings.buttonIcon = value || "clipboard-list";
        yield this.plugin.saveSettings();
      }));
    }).settingEl.addClass("no-border");
    new import_obsidian67.Setting(metadataMenuBtnSettings).setName("Reading mode links").setDesc("Display an extra button to access metadata menu form after a link in reading mode").addToggle((cb) => {
      cb.setValue(this.plugin.settings.enableLinks);
      cb.onChange((value) => {
        this.plugin.settings.enableLinks = value;
        this.plugin.saveSettings();
      });
    }).settingEl.addClass("no-border");
    new import_obsidian67.Setting(metadataMenuBtnSettings).setName("Live preview mode").setDesc("Display an extra button to access metadata menu form after a link in live preview").addToggle((cb) => {
      cb.setValue(this.plugin.settings.enableEditor);
      cb.onChange((value) => {
        this.plugin.settings.enableEditor = value;
        this.plugin.saveSettings();
      });
    }).settingEl.addClass("no-border");
    new import_obsidian67.Setting(metadataMenuBtnSettings).setName("Tab header").setDesc("Display an extra button to access metadata menu form in the tab header").addToggle((cb) => {
      cb.setValue(this.plugin.settings.enableTabHeader);
      cb.onChange((value) => {
        this.plugin.settings.enableTabHeader = value;
        this.plugin.saveSettings();
      });
    }).settingEl.addClass("no-border");
    new import_obsidian67.Setting(metadataMenuBtnSettings).setName("Backlinks").setDesc("Display an extra button to access metadata menu form in the backlinks panel").addToggle((cb) => {
      cb.setValue(this.plugin.settings.enableBacklinks);
      cb.onChange((value) => {
        this.plugin.settings.enableBacklinks = value;
        this.plugin.saveSettings();
      });
    }).settingEl.addClass("no-border");
    new import_obsidian67.Setting(metadataMenuBtnSettings).setName("Search").setDesc("Display an extra button to access metadata menu form in the search panel").addToggle((cb) => {
      cb.setValue(this.plugin.settings.enableSearch);
      cb.onChange((value) => {
        this.plugin.settings.enableSearch = value;
        this.plugin.saveSettings();
      });
    }).settingEl.addClass("no-border");
    new import_obsidian67.Setting(metadataMenuBtnSettings).setName("File explorer").setDesc("Display an extra button to access metadata menu form in the file explorer").addToggle((cb) => {
      cb.setValue(this.plugin.settings.enableFileExplorer);
      cb.onChange((value) => {
        this.plugin.settings.enableFileExplorer = value;
        this.plugin.saveSettings();
      });
    }).settingEl.addClass("no-border");
    new import_obsidian67.Setting(metadataMenuBtnSettings).setName("Starred").setDesc("Display an extra button to access metadata menu form in the starred panel").addToggle((cb) => {
      cb.setValue(this.plugin.settings.enableStarred);
      cb.onChange((value) => {
        this.plugin.settings.enableStarred = value;
        this.plugin.saveSettings();
      });
    }).settingEl.addClass("no-border");
    containerEl.createDiv({ cls: "setting-divider" });
    const queryFileClassSettings = this.createSettingGroup("Query based FileClass settings", "Manage globally predefined type and options for a field matching this query", true);
    new import_obsidian67.Setting(queryFileClassSettings).setName("Add New Query for fileClass").setDesc("Add a new query and a FileClass that will apply to files matching this query.").addButton((button) => {
      return button.setTooltip("Add New fileClass query").setButtonText("Add new").setCta().onClick(() => __async(this, null, function* () {
        let modal = new FileClassQuerySettingsModal(this.plugin, queryFileClassSettings);
        modal.open();
      }));
    }).settingEl.addClass("no-border");
    this.plugin.initialFileClassQueries.forEach((query) => {
      const fileClassQuery = new FileClassQuery_default();
      Object.assign(fileClassQuery, query);
      new FileClassQuerySetting(queryFileClassSettings, fileClassQuery, this.plugin);
    });
  }
};

// src/settings/migrateSetting.ts
var migrateSettingsV1toV2 = (plugin) => __async(void 0, null, function* () {
  const presetFields = plugin.settings.presetFields;
  presetFields.forEach((p) => {
    if (!Object.keys(p).contains("type")) {
      if (p.isMulti)
        p.type = "Multi" /* Multi */;
      else if (p.isCycle)
        p.type = "Cycle" /* Cycle */;
      else if (p.isBoolean)
        p.type = "Boolean" /* Boolean */;
      else if (p.options && Object.keys(p.options).length > 0)
        p.type = "Select" /* Select */;
      else
        p.type = "Input" /* Input */;
    }
    delete p.isMulti;
    delete p.isCycle;
    delete p.isBoolean;
    if (Object.getOwnPropertyDescriptor(p, "values") !== void 0) {
      Object.defineProperty(p, "options", Object.getOwnPropertyDescriptor(p, "values"));
      delete p["values"];
    }
  });
  plugin.settings.settingsVersion = 2;
  yield plugin.saveData(plugin.settings);
  console.log("Metadata menu settings migrated to version 2");
});
var migrateSettingsV2toV3 = (plugin) => __async(void 0, null, function* () {
  const presetFields = plugin.settings.presetFields;
  presetFields.forEach((p) => {
    if (["Select" /* Select */, "Multi" /* Multi */].includes(p.type)) {
      const currentOptionKeys = Object.keys(p.options);
      p.options.valuesList = {};
      currentOptionKeys.forEach((key) => p.options.valuesList[key] = p.options[key]);
      if (p.valuesListNotePath) {
        const selectType = "ValuesListNotePath" /* ValuesListNotePath */;
        p.options.sourceType = selectType;
        p.options[Key[selectType]];
      } else {
        p.options.sourceType = "ValuesList" /* ValuesList */;
      }
      p.options.valuesListNotePath = p.valuesListNotePath;
      currentOptionKeys.forEach((key) => delete p.options[key]);
      p.options.valuesFromDVQuery = "";
    }
    delete p.valuesListNotePath;
  });
  plugin.settings.settingsVersion = 3;
  yield plugin.saveData(plugin.settings);
  console.log("Metadata menu settings migrated to version 3");
});

// src/suggester/metadataSuggester.ts
var import_obsidian68 = require("obsidian");
var ValueSuggest = class extends import_obsidian68.EditorSuggest {
  constructor(plugin) {
    super(plugin.app);
    this.inFrontmatter = false;
    this.inFullLine = false;
    this.inSentence = false;
    this.didSelect = false;
    this.filterOption = (firstValues, lastValue, option) => {
      return !firstValues || !(firstValues == null ? void 0 : firstValues.contains(encodeLink(option))) && (!lastValue || !!lastValue && encodeLink(option).includes(lastValue));
    };
    this.plugin = plugin;
    this.setInstructions([{ command: "Shift", purpose: "put a space after::" }]);
    this.scope.register(["Shift"], "Enter", (evt) => {
      this.suggestions.useSelectedItem(evt);
      return false;
    });
  }
  onTrigger(cursor, editor, file) {
    var _a;
    if (this.didSelect) {
      this.didSelect = false;
      return null;
    }
    if (!this.plugin.settings.isAutosuggestEnabled) {
      return null;
    }
    ;
    if ((file == null ? void 0 : file.extension) !== "md")
      return null;
    const frontmatter = (_a = this.plugin.app.metadataCache.getFileCache(file)) == null ? void 0 : _a.frontmatter;
    const fullLine = editor.getLine(editor.getCursor().line);
    this.inFrontmatter = !!frontmatter && frontmatter.position.start.line < cursor.line && cursor.line < frontmatter.position.end.line;
    if (this.inFrontmatter) {
      const regex = new RegExp(`^${genericFieldRegex}:(?<values>.*)`, "u");
      if (!regex.test(fullLine))
        return null;
    } else if (getLineFields(fullLine).length === 0) {
      return null;
    }
    return {
      start: cursor,
      end: cursor,
      query: editor.getLine(cursor.line)
    };
  }
  getAlias(tFile) {
    var _a, _b;
    const dvApi = (_a = this.plugin.app.plugins.plugins.dataview) == null ? void 0 : _a.api;
    let alias = void 0;
    if (dvApi && ((_b = this.field) == null ? void 0 : _b.options.customRendering)) {
      alias = new Function("page", `return ${this.field.options.customRendering}`)(dvApi.page(tFile.path));
    }
    return alias;
  }
  getSuggestions(context) {
    return __async(this, null, function* () {
      const suggestions = yield this.getValueSuggestions(context);
      if (suggestions.length) {
        return suggestions;
      }
      return [];
    });
  }
  getValueSuggestions(context) {
    return __async(this, null, function* () {
      var _a, _b, _c, _d, _e;
      const lineNumber = context.start.line;
      const matchField = { attribute: void 0, values: "" };
      const dvApi = (_a = this.plugin.app.plugins.plugins.dataview) == null ? void 0 : _a.api;
      if (!this.inFrontmatter) {
        const lineFields = getLineFields(encodeLink(context.editor.getLine(lineNumber)));
        const position = context.editor.getCursor().ch;
        const activeLineField = lineFields.find((lineField) => lineField.index <= position && lineField.index + lineField.length >= position);
        if (activeLineField) {
          this.inSentence = activeLineField.index > 0;
          this.inFullLine = activeLineField.index === 0;
          matchField.attribute = activeLineField.attribute;
          matchField.values = activeLineField.values;
        }
      } else {
        const regex = new RegExp(`^${genericFieldRegex}:(?<values>.+)?`, "u");
        const regexResult = context.editor.getRange({ line: lineNumber, ch: 0 }, context.end).match(regex);
        if (regexResult == null ? void 0 : regexResult.groups) {
          matchField.attribute = regexResult.groups.attribute;
          matchField.values = regexResult.groups.values;
        }
      }
      ;
      if (matchField.attribute) {
        const fieldName = matchField.attribute;
        this.field = (_b = this.plugin.fieldIndex.filesFields.get(context.file.path)) == null ? void 0 : _b.find((f) => f.name === fieldName);
        const valuesList = (_c = matchField.values) == null ? void 0 : _c.replace(/^\[|^\s\[|^\(|^\s\(/, "").replace(/\]$|\)$/, "").split(",").map((o) => encodeLink(o.trim()));
        const lastValue = valuesList == null ? void 0 : valuesList.last();
        const firstValues = valuesList == null ? void 0 : valuesList.slice(0, -1);
        if (fieldName === "tags" && this.inFrontmatter) {
          return Object.keys(this.plugin.app.metadataCache.getTags()).filter((t) => lastValue ? t.contains(lastValue) : t).sort().map((tag) => Object({ value: tag.replace(/^#/, "") }));
        }
        if (this.field && ["Cycle" /* Cycle */, "Multi" /* Multi */, "Select" /* Select */].contains(this.field.type)) {
          const fieldManager = new FieldManager[this.field.type](this.plugin, this.field);
          return fieldManager.getOptionsList(dvApi.page((_d = this.context) == null ? void 0 : _d.file.path)).filter((option) => this.filterOption(firstValues, lastValue, option)).map((_value) => Object({ value: _value }));
        } else if (this.field && ["File" /* File */, "MultiFile" /* MultiFile */].includes(this.field.type)) {
          const sortingMethod = new Function("a", "b", `return ${this.field.options.customSorting}`) || function(a, b) {
            return a.basename < b.basename ? -1 : 1;
          };
          const fieldManager = new FieldManager[this.field.type](this.plugin, this.field);
          const files = fieldManager.getFiles((_e = this.context) == null ? void 0 : _e.file).sort(sortingMethod);
          if (lastValue) {
            return files.filter((f) => {
              var _a2;
              return f.basename.toLowerCase().includes(lastValue) || ((_a2 = this.getAlias(f)) == null ? void 0 : _a2.toLowerCase().includes(lastValue));
            }).map((f) => {
              return Object({ value: FileField.buildMarkDownLink(this.plugin, context.file, f.basename, this.getAlias(f)) });
            });
          } else {
            return files.map((f) => {
              var _a2;
              let alias = void 0;
              if (dvApi && ((_a2 = this.field) == null ? void 0 : _a2.options.customRendering)) {
                alias = new Function("page", `return ${this.field.options.customRendering}`)(dvApi.page(f.path));
              }
              return Object({ value: FileField.buildMarkDownLink(this.plugin, context.file, f.basename, alias) });
            });
          }
        } else {
          return [];
        }
      }
      ;
      return [];
    });
  }
  renderSuggestion(suggestion, el) {
    var _a;
    el.addClass("metadata-menu");
    el.addClass("suggester");
    const [rawValue, alias] = suggestion.value.replace(/^\[\[/, "").replace(/\]\]$/, "").split("|");
    const targetFile = this.plugin.app.metadataCache.getFirstLinkpathDest(rawValue, this.context.file.path);
    const dvApi = (_a = this.plugin.app.plugins.plugins.dataview) == null ? void 0 : _a.api;
    if (dvApi && this.field && this.field.options.customRendering && targetFile) {
      if (alias) {
        const suggestionContainer = el.createDiv({ cls: "item-with-alias" });
        suggestionContainer.createDiv({ text: alias });
        const filePath = suggestionContainer.createDiv({ cls: "item-with-alias-filepath" });
        filePath.setText(rawValue);
      } else {
        el.setText(new Function("page", `return ${this.field.options.customRendering}`)(dvApi.page(targetFile.path)));
      }
    } else {
      el.setText(rawValue);
    }
  }
  selectSuggestion(suggestion, event) {
    return __async(this, null, function* () {
      var _a, _b;
      const activeView = this.plugin.app.workspace.getActiveViewOfType(import_obsidian68.MarkdownView);
      if (!activeView) {
        return;
      }
      ;
      const editor = activeView.editor;
      const activeLine = editor.getLine(this.context.start.line);
      const file = (_a = this.context) == null ? void 0 : _a.file;
      const position = ((_b = this.context) == null ? void 0 : _b.editor.getCursor().ch) || 0;
      if (this.inFrontmatter && file) {
        try {
          let parsedField = (0, import_obsidian68.parseYaml)(activeLine);
          let [attr, pastValues] = Object.entries(parsedField)[0];
          yield postValues(this.plugin, [{ name: attr, payload: { value: suggestion.value, addToCurrentValues: true } }], file);
        } catch (error) {
          new import_obsidian68.Notice("Frontmatter wrongly formatted", 2e3);
          this.close();
          return;
        }
      } else if (this.inFullLine && this.field && file) {
        let cleanedLine = activeLine;
        while (![",", ":"].contains(cleanedLine.charAt(cleanedLine.length - 1))) {
          cleanedLine = cleanedLine.slice(0, -1);
        }
        editor.replaceRange(`${cleanedLine}${event.shiftKey ? " " : ""}` + suggestion.value, { line: this.context.start.line, ch: 0 }, this.context.end);
      } else if (this.inSentence && this.field && file) {
        let beforeCursor = activeLine.slice(0, position);
        let afterCursor = activeLine.slice(position);
        let separatorPos = position;
        let currentValueLength = 0;
        while (!beforeCursor.endsWith("::") && !beforeCursor.endsWith(",") && beforeCursor.length) {
          separatorPos = separatorPos - 1;
          currentValueLength = currentValueLength + 1;
          beforeCursor = beforeCursor.slice(0, -1);
        }
        let nextBracketPos = position;
        while (!encodeLink(afterCursor).match("(\\]|\\)).*") && afterCursor.length) {
          nextBracketPos = nextBracketPos + 1;
          afterCursor = afterCursor.slice(nextBracketPos - position);
        }
        editor.replaceRange(suggestion.value, { line: this.context.start.line, ch: separatorPos }, { line: this.context.start.line, ch: nextBracketPos });
        editor.setCursor({ line: this.context.start.line, ch: nextBracketPos - currentValueLength + suggestion.value.length });
      }
      this.didSelect = true;
      this.close();
    });
  }
};

// main.ts
var MetadataMenu = class extends import_obsidian69.Plugin {
  constructor() {
    super(...arguments);
    this.initialProperties = [];
    this.initialFileClassQueries = [];
  }
  onload() {
    return __async(this, null, function* () {
      console.log("Metadata Menu loaded");
      yield this.loadSettings();
      if (this.settings.settingsVersion === void 0)
        yield migrateSettingsV1toV2(this);
      if (this.settings.settingsVersion === 2)
        yield migrateSettingsV2toV3(this);
      this.fieldIndex = this.addChild(new FieldIndex(this, "1", () => {
      }));
      this.fileTaskManager = this.addChild(new FileTaskManager(this, "1", () => {
      }));
      this.extraButton = this.addChild(new ExtraButton(this, "1", () => {
      }));
      this.contextMenu = this.addChild(new ContextMenu(this));
      this.settings.presetFields.forEach((prop) => {
        const property = new Field_default();
        Object.assign(property, prop);
        this.initialProperties.push(property);
      });
      this.settings.fileClassQueries.forEach((query) => {
        const fileClassQuery = new FileClassQuery_default();
        Object.assign(fileClassQuery, query);
        this.initialFileClassQueries.push(fileClassQuery);
      });
      this.addSettingTab(new MetadataMenuSettingTab(this));
      this.registerEditorSuggest(new ValueSuggest(this));
      this.api = new MetadataMenuApi(this).make();
      this.registerEvent(this.app.workspace.on("active-leaf-change", (leaf) => {
        const view = leaf == null ? void 0 : leaf.view;
        addCommands(this, view);
      }));
      this.registerEvent(this.app.workspace.on("metadata-menu:indexed", () => {
        addCommands(this, void 0);
      }));
      addCommands(this, this.app.workspace.getActiveViewOfType(import_obsidian69.MarkdownView));
    });
  }
  loadSettings() {
    return __async(this, null, function* () {
      this.settings = Object.assign({}, DEFAULT_SETTINGS, yield this.loadData());
    });
  }
  saveSettings() {
    return __async(this, null, function* () {
      this.settings.presetFields = this.initialProperties;
      this.settings.fileClassQueries = this.initialFileClassQueries;
      yield this.saveData(this.settings);
      yield this.fieldIndex.fullIndex("setting", true, false);
      this.extraButton.reloadObservers();
    });
  }
  onunload() {
    console.log("Metadata Menu unloaded");
  }
};
//# sourceMappingURL=data:application/json;base64,
