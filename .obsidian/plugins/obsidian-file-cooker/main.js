/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __markAsModule = (target) => __defProp(target, "__esModule", { value: true });
var __commonJS = (cb, mod) => function __require() {
  return mod || (0, cb[Object.keys(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
};
var __export = (target, all) => {
  __markAsModule(target);
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __reExport = (target, module2, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && key !== "default")
        __defProp(target, key, { get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable });
  }
  return target;
};
var __toModule = (module2) => {
  return __reExport(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", module2 && module2.__esModule && "default" in module2 ? { get: () => module2.default, enumerable: true } : { value: module2, enumerable: true })), module2);
};
var __async = (__this, __arguments, generator) => {
  return new Promise((resolve, reject) => {
    var fulfilled = (value) => {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    };
    var rejected = (value) => {
      try {
        step(generator.throw(value));
      } catch (e) {
        reject(e);
      }
    };
    var step = (x) => x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);
    step((generator = generator.apply(__this, __arguments)).next());
  });
};

// node_modules/node-fetch/browser.js
var require_browser = __commonJS({
  "node_modules/node-fetch/browser.js"(exports, module2) {
    "use strict";
    var getGlobal = function() {
      if (typeof self !== "undefined") {
        return self;
      }
      if (typeof window !== "undefined") {
        return window;
      }
      if (typeof global !== "undefined") {
        return global;
      }
      throw new Error("unable to locate global object");
    };
    var global = getGlobal();
    module2.exports = exports = global.fetch;
    if (global.fetch) {
      exports.default = global.fetch.bind(global);
    }
    exports.Headers = global.Headers;
    exports.Request = global.Request;
    exports.Response = global.Response;
  }
});

// node_modules/obsidian-dataview/lib/index.js
var require_lib = __commonJS({
  "node_modules/obsidian-dataview/lib/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    require("obsidian");
    var getAPI3 = (app) => {
      var _a;
      if (app)
        return (_a = app.plugins.plugins.dataview) === null || _a === void 0 ? void 0 : _a.api;
      else
        return window.DataviewAPI;
    };
    var isPluginEnabled = (app) => app.plugins.enabledPlugins.has("dataview");
    exports.getAPI = getAPI3;
    exports.isPluginEnabled = isPluginEnabled;
  }
});

// main.ts
__export(exports, {
  default: () => FileCookerPlugin
});
var import_obsidian22 = __toModule(require("obsidian"));

// src/action/delete-action.ts
var import_obsidian2 = __toModule(require("obsidian"));

// src/modal/delete-confirm-modal.ts
var import_obsidian = __toModule(require("obsidian"));
var DeleteConfirmModal = class extends import_obsidian.Modal {
  constructor(app, resultArr) {
    super(app);
    this.resultArr = resultArr;
  }
  onOpen() {
    return __async(this, null, function* () {
      const { contentEl } = this;
      contentEl.createEl("h1", { text: "Confirm Delete?" });
      if (this.resultArr.length == 0) {
        contentEl.createEl("div", { text: "No files found!" });
        new import_obsidian.Setting(contentEl).addButton((btn) => btn.setButtonText("Close").setCta().onClick(() => {
          this.close();
        }));
      } else {
        this.resultArr.forEach((info) => {
          contentEl.createEl("div", { text: info.path });
        });
        new import_obsidian.Setting(contentEl).addButton((btn) => btn.setButtonText("Confirm").setCta().onClick(() => {
          this.close();
          this.resultArr.forEach((info) => {
            this.app.vault.trash(info, true);
          });
          new import_obsidian.Notice("Delete Success!");
        })).addButton((btn) => btn.setButtonText("Cancel").setCta().onClick(() => {
          this.close();
          new import_obsidian.Notice("Delete Canceled!");
        }));
      }
    });
  }
};

// src/action/delete-action.ts
var DeleteAction = class {
  constructor(app) {
    this.app = app;
  }
  act(resultArr) {
    if (resultArr.length > 0) {
      new DeleteConfirmModal(this.app, resultArr).open();
    } else {
      new import_obsidian2.Notice("No Files Found!");
    }
  }
};

// src/action/edit-front-matter-action.ts
var import_obsidian4 = __toModule(require("obsidian"));

// src/modal/edit-front-matter-modal.ts
var import_obsidian3 = __toModule(require("obsidian"));
var EditFrontMatterModal = class extends import_obsidian3.Modal {
  constructor(app, resultArr) {
    super(app);
    this.resultArr = resultArr;
    let tmpFlag = localStorage.getItem("overrideFlag");
    if (tmpFlag && tmpFlag == "true") {
      this.overrideFlag = true;
    }
  }
  onOpen() {
    const { contentEl } = this;
    contentEl.createEl("h1", { text: "Edit Front Matter" });
    if (this.resultArr.length == 0) {
      contentEl.createEl("div", { text: "No files found!" });
      new import_obsidian3.Setting(contentEl).addButton((btn) => btn.setButtonText("Close").setCta().onClick(() => {
        this.close();
      }));
    } else {
      this.resultArr.forEach((info) => {
        contentEl.createEl("div", { text: info.path });
      });
      new import_obsidian3.Setting(contentEl).addText((txt) => txt.setPlaceholder("Front Matter Key").onChange((val) => {
        this.key = val;
      })).addText((txt) => txt.setPlaceholder("Front Matter Value").onChange((val) => {
        this.val = val;
      })).addToggle((toggle) => {
        toggle.setValue(this.overrideFlag);
        toggle.setTooltip("Override if exists!");
        toggle.onChange((val) => {
          localStorage.setItem("overrideFlag", val + "");
          this.overrideFlag = val;
        });
      });
      new import_obsidian3.Setting(contentEl).addButton((btn) => btn.setButtonText("Confirm").setCta().onClick(() => __async(this, null, function* () {
        if (this.key == null || this.key.trim() == "") {
          new import_obsidian3.Notice("Key could not be empty!");
          return;
        }
        if (this.val == null || this.val.trim() == "") {
          new import_obsidian3.Notice("Value could not be empty!");
          return;
        }
        this.close();
        let api = this.app.plugins.plugins["metaedit"].api;
        let c_num = 0;
        let u_num = 0;
        for (let i = 0; i < this.resultArr.length; i++) {
          let info = this.resultArr[i];
          let val = yield api.getPropertyValue(this.key, info);
          if (val == null) {
            api.createYamlProperty(this.key, this.val, info);
            c_num += 1;
          } else if (this.overrideFlag || val.trim() == "") {
            api.update(this.key, this.val, info);
            u_num += 1;
          }
        }
        new import_obsidian3.Notice("Edit Success!");
        new import_obsidian3.Notice("Add " + c_num + " !");
        new import_obsidian3.Notice("Update " + u_num + " !");
      }))).addButton((btn) => btn.setButtonText("Cancel").setCta().onClick(() => {
        this.close();
        new import_obsidian3.Notice("Edit Canceled!");
      }));
    }
  }
};

// src/action/edit-front-matter-action.ts
var EditFrontMatterAction = class {
  constructor(app) {
    this.app = app;
  }
  act(resultArr) {
    if (resultArr.length > 0) {
      new EditFrontMatterModal(this.app, resultArr).open();
    } else {
      new import_obsidian4.Notice("No Files Found!");
    }
  }
};

// src/action/move-action.ts
var import_obsidian6 = __toModule(require("obsidian"));

// src/modal/move-confirm-modal.ts
var import_obsidian5 = __toModule(require("obsidian"));
var MoveConfirmModal = class extends import_obsidian5.Modal {
  constructor(app, moveInfos) {
    super(app);
    this.moveInfos = moveInfos;
  }
  onOpen() {
    const { contentEl } = this;
    contentEl.createEl("h1", { text: "Confirm Move/Copy?" });
    this.moveInfos.forEach((info) => {
      contentEl.createEl("div", { text: info.sourceFile.path + " -> " + info.targetDir + "/" + info.sourceFile.name });
    });
    new import_obsidian5.Setting(contentEl).addToggle((toggle) => {
      toggle.setTooltip("Copy instead!");
      toggle.onChange((val) => {
        this.copyFlag = val;
      });
    });
    new import_obsidian5.Setting(contentEl).addButton((btn) => btn.setButtonText("Confirm").setCta().onClick(() => __async(this, null, function* () {
      this.close();
      if (this.copyFlag) {
        for (const key in this.moveInfos) {
          let info = this.moveInfos[key];
          yield this.app.vault.copy(info.sourceFile, info.targetDir + "/" + info.sourceFile.name);
        }
        new import_obsidian5.Notice("Copy Success!");
      } else {
        for (const key in this.moveInfos) {
          let info = this.moveInfos[key];
          yield this.app.fileManager.renameFile(info.sourceFile, info.targetDir + "/" + info.sourceFile.name);
        }
        new import_obsidian5.Notice("Move Success!");
      }
    }))).addButton((btn) => btn.setButtonText("Cancel").setCta().onClick(() => {
      this.close();
      new import_obsidian5.Notice("Move Canceled!");
    }));
  }
};

// src/action/move-action.ts
var MoveAction = class {
  constructor(app, targetPath) {
    this.app = app;
    this.targetPath = targetPath;
  }
  act(resultArr) {
    const moveInfos = [];
    if (resultArr.length > 0) {
      resultArr.forEach((ff) => {
        moveInfos.push({
          sourceFile: ff,
          targetDir: this.targetPath
        });
      });
      new MoveConfirmModal(this.app, moveInfos).open();
    } else {
      new import_obsidian6.Notice("No Files Found!");
    }
  }
};

// src/action/rename-action.ts
var import_obsidian9 = __toModule(require("obsidian"));

// src/modal/rename-modal.ts
var import_obsidian8 = __toModule(require("obsidian"));

// src/modal/rename-confirm-modal.ts
var import_obsidian7 = __toModule(require("obsidian"));
var RenameConfirmModal = class extends import_obsidian7.Modal {
  constructor(app, resultArr, prefix, suffix) {
    super(app);
    this.resultArr = resultArr;
    this.prefix = prefix;
    this.suffix = suffix;
  }
  onOpen() {
    const { contentEl } = this;
    contentEl.createEl("h1", { text: "Rename Files" });
    this.resultArr.forEach((info) => {
      let name = this.newName(info.name);
      contentEl.createEl("div", { text: info.name + "->" + name });
    });
    new import_obsidian7.Setting(contentEl).addButton((btn) => btn.setButtonText("Confirm").setCta().onClick(() => __async(this, null, function* () {
      if ((this.prefix == null || this.prefix.trim() == "") && (this.suffix == null || this.suffix.trim() == "")) {
        new import_obsidian7.Notice("Prefix and Suffix could not be all empty!");
        return;
      }
      this.close();
      for (let i = 0; i < this.resultArr.length; i++) {
        let info = this.resultArr[i];
        let name = this.newName(info.name);
        yield this.app.fileManager.renameFile(info, info.parent.path + "/" + name);
      }
      new import_obsidian7.Notice("Rename Success!");
    }))).addButton((btn) => btn.setButtonText("Cancel").setCta().onClick(() => {
      this.close();
      new import_obsidian7.Notice("Rename Canceled!");
    }));
  }
  newName(name) {
    let tName = name + "";
    let suf = "";
    if (tName.endsWith(".md")) {
      tName = tName.replace(".md", "");
      suf = ".md";
    }
    if (this.prefix.startsWith("-")) {
      let t = this.prefix.substring(1, this.prefix.length);
      if (tName.startsWith(t)) {
        tName = tName.substring(t.length, tName.length);
      }
    } else {
      tName = this.prefix + tName;
    }
    if (this.suffix.startsWith("-")) {
      let t = this.suffix.substring(1, this.suffix.length);
      if (tName.endsWith(t)) {
        tName = tName.substring(0, tName.length - t.length);
      }
    } else {
      tName = tName + this.suffix;
    }
    return tName + suf;
  }
};

// src/modal/rename-modal.ts
var RenameModal = class extends import_obsidian8.Modal {
  constructor(app, resultArr) {
    super(app);
    this.resultArr = resultArr;
  }
  onOpen() {
    const { contentEl } = this;
    contentEl.createEl("h1", { text: "Rename Files" });
    if (this.resultArr.length == 0) {
      contentEl.createEl("div", { text: "No files found!" });
      new import_obsidian8.Setting(contentEl).addButton((btn) => btn.setButtonText("Close").setCta().onClick(() => {
        this.close();
      }));
    } else {
      this.resultArr.forEach((info) => {
        contentEl.createEl("div", { text: info.path });
      });
      new import_obsidian8.Setting(contentEl).addText((txt) => txt.setPlaceholder("Prefix").onChange((val) => {
        this.prefix = val;
      })).addText((txt) => txt.setPlaceholder("Suffix").onChange((val) => {
        this.suffix = val;
      }));
      new import_obsidian8.Setting(contentEl).addButton((btn) => btn.setButtonText("Confirm").setCta().onClick(() => __async(this, null, function* () {
        if ((this.prefix == null || this.prefix.trim() == "") && (this.suffix == null || this.suffix.trim() == "")) {
          new import_obsidian8.Notice("Prefix and Suffix could not be all empty!");
          return;
        }
        this.close();
        new RenameConfirmModal(this.app, this.resultArr, this.prefix, this.suffix).open();
      }))).addButton((btn) => btn.setButtonText("Cancel").setCta().onClick(() => {
        this.close();
        new import_obsidian8.Notice("Rename Canceled!");
      }));
    }
  }
};

// src/action/rename-action.ts
var RenameAction = class {
  constructor(app) {
    this.app = app;
  }
  act(resultArr) {
    if (resultArr.length > 0) {
      new RenameModal(this.app, resultArr).open();
    } else {
      new import_obsidian9.Notice("No Files Found!");
    }
  }
};

// src/action/sync-flomo-action.ts
var import_obsidian11 = __toModule(require("obsidian"));

// src/modal/sync-flomo-confirm-modal.ts
var import_obsidian10 = __toModule(require("obsidian"));
var import_node_fetch = __toModule(require_browser());
var SyncFlomoConfirmModal = class extends import_obsidian10.Modal {
  constructor(plugin, resultArr) {
    super(plugin.app);
    this.plugin = plugin;
    this.resultArr = resultArr;
  }
  onOpen() {
    return __async(this, null, function* () {
      const { contentEl } = this;
      contentEl.createEl("h1", { text: "Confirm Sync to flomo?" });
      if (this.resultArr.length == 0) {
        contentEl.createEl("div", { text: "No files found!" });
        new import_obsidian10.Setting(contentEl).addButton((btn) => btn.setButtonText("Close").setCta().onClick(() => {
          this.close();
        }));
      } else {
        this.resultArr.forEach((info) => {
          contentEl.createEl("div", { text: info.path });
        });
        new import_obsidian10.Setting(contentEl).addButton((btn) => btn.setButtonText("Confirm").setCta().onClick(() => __async(this, null, function* () {
          this.close();
          for (let i = 0; i < this.resultArr.length; i++) {
            let info = this.resultArr[i];
            let cont = yield this.app.vault.read(info);
            const response = yield (0, import_node_fetch.default)(this.plugin.settings.flomoAPI, {
              method: "POST",
              body: JSON.stringify({
                content: cont
              }),
              headers: {
                "Content-Type": "application/json",
                Accept: "application/json"
              }
            });
            if (!response.ok) {
              new import_obsidian10.Notice(`Sync to flomo Error!${response.text}[${response.status}]`);
              return;
            }
          }
          new import_obsidian10.Notice("Sync to flomo Success!");
        }))).addButton((btn) => btn.setButtonText("Cancel").setCta().onClick(() => {
          this.close();
          new import_obsidian10.Notice("Sync to flomo Canceled!");
        }));
      }
    });
  }
};

// src/action/sync-flomo-action.ts
var SyncFlomoAction = class {
  constructor(plugin) {
    this.plugin = plugin;
  }
  act(resultArr) {
    let flomoAPI = this.plugin.settings.flomoAPI;
    if (!flomoAPI || flomoAPI.trim() == "") {
      new import_obsidian11.Notice("Please config flomoAPI first!");
      return;
    }
    if (resultArr.length > 0) {
      new SyncFlomoConfirmModal(this.plugin, resultArr).open();
    } else {
      new import_obsidian11.Notice("No Files Found!");
    }
  }
};

// src/modal/choose-file-modal.ts
var import_obsidian14 = __toModule(require("obsidian"));

// src/action/merge-action.ts
var import_obsidian13 = __toModule(require("obsidian"));

// src/modal/merge-confirm-modal.ts
var import_obsidian12 = __toModule(require("obsidian"));
var MergeConfirmModal = class extends import_obsidian12.Modal {
  constructor(app, resultArr, targetFilePath) {
    super(app);
    this.targetFilePath = targetFilePath;
    this.resultArr = resultArr;
    this.lineBreak = getLinebreak();
  }
  onOpen() {
    const { contentEl } = this;
    contentEl.createEl("h1", { text: "Confirm Merge?" });
    contentEl.createEl("div", { text: "Merge all files below -> " + this.targetFilePath + " !" });
    this.resultArr.forEach((info) => {
      contentEl.createEl("div", { text: info.path });
    });
    new import_obsidian12.Setting(contentEl).addButton((btn) => btn.setButtonText("Confirm").setCta().onClick(() => __async(this, null, function* () {
      this.close();
      let targetFile = this.app.vault.getAbstractFileByPath(this.targetFilePath);
      if (targetFile == null) {
        targetFile = yield this.app.vault.create(this.targetFilePath, "");
      }
      for (const key in this.resultArr) {
        let info = this.resultArr[key];
        if (info.name.endsWith(".md")) {
          let cont = yield this.app.vault.read(info);
          cont = this.clearYaml(cont);
          cont = "# " + info.name.substring(0, info.name.length - 3) + this.lineBreak + cont + this.lineBreak + this.lineBreak;
          yield this.app.vault.append(targetFile, cont);
        } else {
          let cont = `![[${info.name}]]${this.lineBreak}${this.lineBreak}`;
          yield this.app.vault.append(targetFile, cont);
        }
      }
      new import_obsidian12.Notice("Merge Success!");
    }))).addButton((btn) => btn.setButtonText("Cancel").setCta().onClick(() => {
      this.close();
      new import_obsidian12.Notice("Merge Canceled!");
    }));
  }
  clearYaml(cont) {
    if (cont.startsWith("---")) {
      let lines = cont.split(this.lineBreak);
      let results = "";
      let appendFlag = true;
      for (let idx in lines) {
        if (lines[idx] == "---") {
          appendFlag = !appendFlag;
          continue;
        }
        if (appendFlag) {
          results = results + lines[idx] + this.lineBreak;
        }
      }
      return results;
    } else {
      return cont;
    }
  }
};
function getLinebreak() {
  let oss = ["Windows", "Mac", "Linux"];
  let lineBreaks = ["\r\n", "\n", "\n"];
  for (let i = 0; i < oss.length; i++) {
    let os = oss[i];
    if (navigator.userAgent.indexOf(os) != -1) {
      return lineBreaks[i];
    }
  }
  return "\n";
}

// src/action/merge-action.ts
var MergeAction = class {
  constructor(app, targetFilePath) {
    this.app = app;
    this.targetFilePath = targetFilePath;
  }
  act(resultArr) {
    return __async(this, null, function* () {
      if (resultArr.length > 0) {
        new MergeConfirmModal(this.app, resultArr, this.targetFilePath).open();
      } else {
        new import_obsidian13.Notice("No Files Found!");
      }
    });
  }
};

// src/modal/choose-file-modal.ts
var ChooseFileModal = class extends import_obsidian14.SuggestModal {
  constructor(app, readable) {
    super(app);
    this.readable = readable;
  }
  getSuggestions(query) {
    const abstractFiles = this.app.vault.getAllLoadedFiles();
    const files = [];
    const lowerCaseInputStr = query.toLowerCase();
    abstractFiles.forEach((file) => {
      if (file instanceof import_obsidian14.TFile && file.path.toLowerCase().contains(lowerCaseInputStr)) {
        files.push(file.path);
      }
    });
    if (files.length == 0) {
      if (query.endsWith(".md")) {
        files.push(query);
      } else {
        files.push(query + ".md");
      }
    }
    return files;
  }
  renderSuggestion(filePath, el) {
    el.createEl("div", { text: filePath });
  }
  onChooseSuggestion(file, evt) {
    let action = new MergeAction(this.app, file);
    this.readable.read(action);
  }
};

// src/modal/choose-folder-modal.ts
var import_obsidian15 = __toModule(require("obsidian"));
var ChooseFolderModal = class extends import_obsidian15.SuggestModal {
  constructor(app, readable, actionFunc) {
    super(app);
    this.readable = readable;
    this.actionFunc = actionFunc;
  }
  getSuggestions(query) {
    const abstractFiles = this.app.vault.getAllLoadedFiles();
    const folders = [];
    const lowerCaseInputStr = query.toLowerCase();
    abstractFiles.forEach((folder) => {
      if (folder instanceof import_obsidian15.TFolder && folder.path.toLowerCase().contains(lowerCaseInputStr)) {
        folders.push(folder);
      }
    });
    return folders;
  }
  renderSuggestion(folder, el) {
    el.createEl("div", { text: folder.path });
  }
  onChooseSuggestion(folder, evt) {
    let action = this.actionFunc(folder.path);
    this.readable.read(action);
  }
};

// src/reader/clipboard-reader.ts
var import_obsidian16 = __toModule(require("obsidian"));

// src/reader/read-info.ts
var ReadInfo = class {
  constructor(limit = 300) {
    this.limit = limit;
    this.resultArr = [];
  }
  add(file) {
    if (this.resultArr.length >= this.limit) {
      throw new Error("Load more than " + this.limit + " files!");
    }
    this.resultArr.push(file);
  }
  getFiles() {
    return this.resultArr;
  }
};

// src/reader/clipboard-reader.ts
var ClipboardReader = class {
  constructor(app) {
    this.app = app;
  }
  read(action) {
    let readInfo = new ReadInfo();
    let promiseStr = navigator.clipboard.readText();
    promiseStr.then((str) => {
      let lines = str.split("\n");
      try {
        lines.forEach((line) => {
          let f = line;
          if (f.startsWith("[[")) {
            f = f.substring(2, f.length);
          }
          if (f.endsWith("]]")) {
            f = f.substring(0, f.length - 2);
          }
          if (!f.endsWith(".md") && !f.endsWith(".MD") && !f.endsWith(".Md") && !f.endsWith(".mD")) {
            f = f + ".md";
          }
          let ff = this.app.vault.getAbstractFileByPath(f);
          if (ff != null) {
            readInfo.add(ff);
          }
        });
        action.act(readInfo.getFiles());
      } catch (e) {
        new import_obsidian16.Notice(e.message);
      }
    }).catch((e) => {
      new import_obsidian16.Notice("Clipboard Content Error!" + e);
    });
  }
};

// src/command/clipboard-command.ts
var ClipboardCommand = class {
  constructor(plugin) {
    this.plugin = plugin;
  }
  regist() {
    this.registMoveFile();
    this.registSyncFlomo();
    this.registMergeFile();
    this.registDeleteFile();
    this.registEditProp();
    this.registRenameFile();
  }
  registRenameFile() {
    this.plugin.addCommand({
      id: "rename-in-clipboard-files",
      name: "Rename in clipboard files ...",
      callback: () => {
        new ClipboardReader(this.plugin.app).read(new RenameAction(this.plugin.app));
      }
    });
  }
  registEditProp() {
    let metaedit = this.plugin.app.plugins.plugins["metaedit"];
    this.plugin.addCommand({
      id: "edit-front-matter-in-clipboard-files",
      name: "Edit Front Matter in clipboard files ...",
      checkCallback: (checking) => {
        if (!checking) {
          new ClipboardReader(this.plugin.app).read(new EditFrontMatterAction(this.plugin.app));
        }
        return metaedit != null;
      }
    });
  }
  registDeleteFile() {
    this.plugin.addCommand({
      id: "delete-files-in-clipboard",
      name: "Delete files in clipboard!",
      callback: () => {
        new ClipboardReader(this.plugin.app).read(new DeleteAction(this.plugin.app));
      }
    });
  }
  registMergeFile() {
    this.plugin.addCommand({
      id: "merge-files-to",
      name: "Merge files to ...",
      callback: () => {
        new ChooseFileModal(this.plugin.app, new ClipboardReader(this.plugin.app)).open();
      }
    });
  }
  registSyncFlomo() {
    this.plugin.addCommand({
      id: "sync-files-to-flomo",
      name: "Sync files to flomo ...",
      callback: () => {
        new ClipboardReader(this.plugin.app).read(new SyncFlomoAction(this.plugin));
      }
    });
  }
  registMoveFile() {
    this.plugin.addCommand({
      id: "move-files-to",
      name: "Move files to ...",
      callback: () => {
        let actionFunc = (path) => {
          return new MoveAction(this.plugin.app, path);
        };
        new ChooseFolderModal(this.plugin.app, new ClipboardReader(this.plugin.app), actionFunc).open();
      }
    });
  }
};

// src/action/create-action.ts
var import_obsidian18 = __toModule(require("obsidian"));

// src/modal/create-confirm-modal.ts
var import_obsidian17 = __toModule(require("obsidian"));
var CreateConfirmModal = class extends import_obsidian17.Modal {
  constructor(app, moveInfos) {
    super(app);
    this.moveInfos = moveInfos;
  }
  onOpen() {
    const { contentEl } = this;
    contentEl.createEl("h1", { text: "Confirm Create?" });
    this.moveInfos.forEach((info) => {
      contentEl.createEl("div", { text: info.targetDir + "/" + info.sourceFile.name });
    });
    new import_obsidian17.Setting(contentEl).addButton((btn) => btn.setButtonText("Confirm").setCta().onClick(() => __async(this, null, function* () {
      this.close();
      for (const key in this.moveInfos) {
        let info = this.moveInfos[key];
        yield this.app.vault.create(info.targetDir + "/" + info.sourceFile.name, "");
      }
      new import_obsidian17.Notice("Create Success!");
    }))).addButton((btn) => btn.setButtonText("Cancel").setCta().onClick(() => {
      this.close();
      new import_obsidian17.Notice("Create Canceled!");
    }));
  }
};

// src/action/create-action.ts
var CreateAction = class {
  constructor(app, targetPath) {
    this.app = app;
    this.targetPath = targetPath;
  }
  act(resultArr) {
    const moveInfos = [];
    if (resultArr.length > 0) {
      resultArr.forEach((ff) => {
        moveInfos.push({
          sourceFile: ff,
          targetDir: this.targetPath
        });
      });
      new CreateConfirmModal(this.app, moveInfos).open();
    } else {
      new import_obsidian18.Notice("No Files Found!");
    }
  }
};

// src/reader/current-file-reader.ts
var import_obsidian19 = __toModule(require("obsidian"));
var ReadType;
(function(ReadType2) {
  ReadType2[ReadType2["LINKS"] = 0] = "LINKS";
  ReadType2[ReadType2["UN_RESOLVED_LINKS"] = 1] = "UN_RESOLVED_LINKS";
  ReadType2[ReadType2["CONTENT"] = 2] = "CONTENT";
})(ReadType || (ReadType = {}));
var CurrentFileReader = class {
  constructor(app, readType) {
    this.readType = 0;
    this.app = app;
    this.readType = readType;
  }
  read(action) {
    let readInfo = new ReadInfo();
    let currentFile = this.app.workspace.getActiveFile();
    if (currentFile == null) {
      new import_obsidian19.Notice("No active file!");
      return;
    }
    let currentFilePath = currentFile.path;
    let paths = [];
    if (this.readType == 2) {
      paths.push(currentFilePath);
    } else if (this.readType == 1) {
      let linkObj = this.app.metadataCache.unresolvedLinks[currentFilePath];
      for (let key in linkObj) {
        paths.push(key);
      }
    } else {
      let linkObj = this.app.metadataCache.resolvedLinks[currentFilePath];
      for (let key in linkObj) {
        paths.push(key);
      }
    }
    try {
      if (this.readType == 1) {
        paths.forEach((path) => {
          let ff = new VirtualFile(path);
          readInfo.add(ff);
        });
      } else {
        paths.forEach((path) => {
          let ff = this.app.vault.getAbstractFileByPath(path);
          if (ff != null) {
            readInfo.add(ff);
          }
        });
      }
      action.act(readInfo.getFiles());
    } catch (e) {
      new import_obsidian19.Notice(e.message);
    }
  }
};
var VirtualFile = class {
  constructor(path) {
    let idx = path.lastIndexOf("/");
    if (!path.endsWith(".md")) {
      path = path + ".md";
    }
    this.path = path;
    if (idx >= 0) {
      this.name = path.substring(idx, path.length);
    } else {
      this.name = path;
    }
  }
};

// src/command/current-file-command.ts
var CurrentFileCommand = class {
  constructor(plugin) {
    this.plugin = plugin;
  }
  regist() {
    this.registMoveFile();
    this.registSyncContentToFlomo();
    this.registSyncFileToFlomo();
    this.registCreateFile();
    this.registMergeFile();
    this.registDeleteFile();
    this.registEditProp();
    this.registRenameFile();
  }
  registRenameFile() {
    this.plugin.addCommand({
      id: "rename-in-current-file-links",
      name: "Rename in current file links ...",
      callback: () => {
        new CurrentFileReader(this.plugin.app).read(new RenameAction(this.plugin.app));
      }
    });
  }
  registEditProp() {
    let metaedit = this.plugin.app.plugins.plugins["metaedit"];
    this.plugin.addCommand({
      id: "edit-front-matter-in-current-file-links",
      name: "Edit Front Matter in current file links ...",
      checkCallback: (checking) => {
        if (!checking) {
          new CurrentFileReader(this.plugin.app).read(new EditFrontMatterAction(this.plugin.app));
        }
        return metaedit != null;
      }
    });
  }
  registDeleteFile() {
    this.plugin.addCommand({
      id: "delete-links-in-current-file",
      name: "Delete link-files in current file!",
      callback: () => {
        new CurrentFileReader(this.plugin.app).read(new DeleteAction(this.plugin.app));
      }
    });
  }
  registMergeFile() {
    this.plugin.addCommand({
      id: "merge-links-to",
      name: "Merge links in current file to ...",
      callback: () => {
        new ChooseFileModal(this.plugin.app, new CurrentFileReader(this.plugin.app)).open();
      }
    });
  }
  registCreateFile() {
    this.plugin.addCommand({
      id: "create-links",
      name: "Create links in current file ...",
      callback: () => {
        let actionFunc = (path) => {
          return new CreateAction(this.plugin.app, path);
        };
        new ChooseFolderModal(this.plugin.app, new CurrentFileReader(this.plugin.app, ReadType.UN_RESOLVED_LINKS), actionFunc).open();
      }
    });
  }
  registSyncFileToFlomo() {
    this.plugin.addCommand({
      id: "sync-links-to",
      name: "Sync links in current file to flomo ...",
      callback: () => {
        new CurrentFileReader(this.plugin.app).read(new SyncFlomoAction(this.plugin));
      }
    });
  }
  registSyncContentToFlomo() {
    this.plugin.addCommand({
      id: "sync-content-to",
      name: "Sync content in current file to flomo ...",
      callback: () => {
        new CurrentFileReader(this.plugin.app, ReadType.CONTENT).read(new SyncFlomoAction(this.plugin));
      }
    });
  }
  registMoveFile() {
    this.plugin.addCommand({
      id: "move-links-to",
      name: "Move links in current file to ...",
      callback: () => {
        let actionFunc = (path) => {
          return new MoveAction(this.plugin.app, path);
        };
        new ChooseFolderModal(this.plugin.app, new CurrentFileReader(this.plugin.app), actionFunc).open();
      }
    });
  }
};

// src/command/dataview-command.ts
var import_obsidian_dataview2 = __toModule(require_lib());

// src/action/copy-action.ts
var import_obsidian20 = __toModule(require("obsidian"));
var CopyAction = class {
  constructor(app) {
    this.app = app;
  }
  act(resultArr) {
    if (resultArr.length > 0) {
      let str = "";
      resultArr.forEach((ff) => {
        let name = ff.name;
        if (name.endsWith(".md")) {
          name = name.substring(0, name.lastIndexOf("."));
        }
        str += "[[" + ff.path + "|" + name + "]]\n";
      });
      navigator.clipboard.writeText(str);
      new import_obsidian20.Notice("Copy links success!");
    } else {
      new import_obsidian20.Notice("No Files Found!");
    }
  }
};

// src/reader/dataview-reader.ts
var import_obsidian21 = __toModule(require("obsidian"));
var import_obsidian_dataview = __toModule(require_lib());
var DataviewReader = class {
  constructor(app, queryStr) {
    this.app = app;
    this.queryStr = queryStr;
  }
  read(action) {
    let readInfo = new ReadInfo();
    let api = (0, import_obsidian_dataview.getAPI)();
    let qStr = formatStr(this.queryStr);
    api.query(qStr).then((res) => {
      if (res.successful) {
        let filePaths = [];
        if (res.value.type == "list") {
          res.value.values.forEach((it) => {
            filePaths.push(it.path);
          });
        } else if (res.value.type == "table") {
          filePaths = res.value.values;
          res.value.values.forEach((it) => {
            it.forEach((innerIt) => {
              if (innerIt && innerIt.path) {
                filePaths.push(innerIt.path);
                return;
              }
            });
          });
        } else {
          res.value.values.forEach((it) => {
            filePaths.push(it.link.path);
          });
        }
        try {
          filePaths.forEach((filePath) => {
            let ff = this.app.vault.getAbstractFileByPath(filePath.toString());
            if (ff != null) {
              readInfo.add(ff);
            }
          });
          action.act(readInfo.getFiles());
        } catch (e) {
          new import_obsidian21.Notice(e.message);
        }
      } else {
        new import_obsidian21.Notice("Query string error![" + this.queryStr + "]");
      }
    });
  }
};
function formatStr(queryStr) {
  let str = queryStr.trimStart();
  let commandStr = str.substring(0, 4);
  if (commandStr.toUpperCase() == "LIST") {
    return "LIST" + str.substring(4, str.length);
  }
  if (commandStr.toUpperCase() == "TABL") {
    return "TABLE" + str.substring(5, str.length);
  }
  if (commandStr.toUpperCase() == "TASK") {
    return "TASK" + str.substring(4, str.length);
  }
  return queryStr;
}

// src/command/dataview-command.ts
var DataviewCommand = class {
  constructor(plugin) {
    this.plugin = plugin;
  }
  regist() {
    let dataviewApi = (0, import_obsidian_dataview2.getAPI)();
    this.registMoveFile(dataviewApi);
    this.registSyncFlomo(dataviewApi);
    this.registMergeFile(dataviewApi);
    this.registDeleteFile(dataviewApi);
    this.registCopyLinks(dataviewApi);
    this.registEditProp(dataviewApi);
    this.registRenameFile(dataviewApi);
  }
  registRenameFile(dataviewApi) {
    this.plugin.addCommand({
      id: "rename-in-dataview-results",
      name: "Rename in dataview results ...",
      editorCheckCallback: (checking, editor, view) => {
        if (!checking) {
          new DataviewReader(this.plugin.app, editor.getSelection()).read(new RenameAction(this.plugin.app));
        }
        return dataviewApi != null;
      }
    });
  }
  registEditProp(dataviewApi) {
    let metaedit = this.plugin.app.plugins.plugins["metaedit"];
    this.plugin.addCommand({
      id: "edit-front-matter-in-dataview-results",
      name: "Edit Front Matter in dataview results ...",
      editorCheckCallback: (checking, editor, view) => {
        if (!checking) {
          new DataviewReader(this.plugin.app, editor.getSelection()).read(new EditFrontMatterAction(this.plugin.app));
        }
        return dataviewApi != null && metaedit != null;
      }
    });
  }
  registCopyLinks(dataviewApi) {
    this.plugin.addCommand({
      id: "copy-dataview-result-links",
      name: "Copy dataview result links!",
      editorCheckCallback: (checking, editor, view) => {
        if (!checking) {
          new DataviewReader(this.plugin.app, editor.getSelection()).read(new CopyAction(this.plugin.app));
        }
        return dataviewApi != null;
      }
    });
  }
  registDeleteFile(dataviewApi) {
    this.plugin.addCommand({
      id: "delete-dataview-results",
      name: "Delete dataview query results!",
      editorCheckCallback: (checking, editor, view) => {
        if (!checking) {
          new DataviewReader(this.plugin.app, editor.getSelection()).read(new DeleteAction(this.plugin.app));
        }
        return dataviewApi != null;
      }
    });
  }
  registMergeFile(dataviewApi) {
    this.plugin.addCommand({
      id: "merge-dataview-results-to",
      name: "Merge dataview query results to ...",
      editorCheckCallback: (checking, editor, view) => {
        if (!checking) {
          new ChooseFileModal(this.plugin.app, new DataviewReader(this.plugin.app, editor.getSelection())).open();
        }
        return dataviewApi != null;
      }
    });
  }
  registSyncFlomo(dataviewApi) {
    this.plugin.addCommand({
      id: "sync-dataview-results-to",
      name: "Sync dataview query results to flomo ...",
      editorCheckCallback: (checking, editor, view) => {
        if (!checking) {
          new DataviewReader(this.plugin.app, editor.getSelection()).read(new SyncFlomoAction(this.plugin));
        }
        return dataviewApi != null;
      }
    });
  }
  registMoveFile(dataviewApi) {
    this.plugin.addCommand({
      id: "move-dataview-results-to",
      name: "Move dataview query results to ...",
      editorCheckCallback: (checking, editor, view) => {
        if (!checking) {
          let actionFunc = (path) => {
            return new MoveAction(this.plugin.app, path);
          };
          new ChooseFolderModal(this.plugin.app, new DataviewReader(this.plugin.app, editor.getSelection()), actionFunc).open();
        }
        return dataviewApi != null;
      }
    });
  }
};

// main.ts
var FileCookerPlugin = class extends import_obsidian22.Plugin {
  onload() {
    return __async(this, null, function* () {
      yield this.loadSettings();
      new CurrentFileCommand(this).regist();
      new ClipboardCommand(this).regist();
      new DataviewCommand(this).regist();
      this.addSettingTab(new FileCookerSettingTab(this.app, this));
    });
  }
  onunload() {
  }
  loadSettings() {
    return __async(this, null, function* () {
      this.settings = Object.assign({}, DEFAULT_SETTINGS, yield this.loadData());
    });
  }
  saveSettings() {
    return __async(this, null, function* () {
      yield this.saveData(this.settings);
    });
  }
};
var DEFAULT_SETTINGS = {
  flomoAPI: ""
};
var FileCookerSettingTab = class extends import_obsidian22.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    containerEl.createEl("h2", { text: "Settings for File Cooker!" });
    new import_obsidian22.Setting(containerEl).setName("flomoAPI").setDesc("config flomo API to sync notes").addText((text) => text.setPlaceholder("Enter flomo API").setValue(this.plugin.settings.flomoAPI).onChange((value) => __async(this, null, function* () {
      this.plugin.settings.flomoAPI = value;
      yield this.plugin.saveSettings();
    })));
  }
};
//# sourceMappingURL=data:application/json;base64,
